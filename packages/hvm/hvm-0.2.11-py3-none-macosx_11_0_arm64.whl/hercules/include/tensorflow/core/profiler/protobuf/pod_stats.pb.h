// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/pod_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fpod_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fpod_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/profiler/protobuf/diagnostics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fpod_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fpod_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fpod_5fstats_2eproto;
namespace tensorflow {
namespace profiler {
class PodStatsDatabase;
struct PodStatsDatabaseDefaultTypeInternal;
extern PodStatsDatabaseDefaultTypeInternal _PodStatsDatabase_default_instance_;
class PodStatsRecord;
struct PodStatsRecordDefaultTypeInternal;
extern PodStatsRecordDefaultTypeInternal _PodStatsRecord_default_instance_;
class PodStatsRecord_StepBreakdownUsEntry_DoNotUse;
struct PodStatsRecord_StepBreakdownUsEntry_DoNotUseDefaultTypeInternal;
extern PodStatsRecord_StepBreakdownUsEntry_DoNotUseDefaultTypeInternal _PodStatsRecord_StepBreakdownUsEntry_DoNotUse_default_instance_;
class StepBreakdownEvents;
struct StepBreakdownEventsDefaultTypeInternal;
extern StepBreakdownEventsDefaultTypeInternal _StepBreakdownEvents_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::profiler::PodStatsDatabase* Arena::CreateMaybeMessage<::tensorflow::profiler::PodStatsDatabase>(Arena*);
template<> ::tensorflow::profiler::PodStatsRecord* Arena::CreateMaybeMessage<::tensorflow::profiler::PodStatsRecord>(Arena*);
template<> ::tensorflow::profiler::PodStatsRecord_StepBreakdownUsEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::profiler::PodStatsRecord_StepBreakdownUsEntry_DoNotUse>(Arena*);
template<> ::tensorflow::profiler::StepBreakdownEvents* Arena::CreateMaybeMessage<::tensorflow::profiler::StepBreakdownEvents>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace profiler {

// ===================================================================

class StepBreakdownEvents final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.StepBreakdownEvents) */ {
 public:
  inline StepBreakdownEvents() : StepBreakdownEvents(nullptr) {}
  ~StepBreakdownEvents() override;
  explicit constexpr StepBreakdownEvents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepBreakdownEvents(const StepBreakdownEvents& from);
  StepBreakdownEvents(StepBreakdownEvents&& from) noexcept
    : StepBreakdownEvents() {
    *this = ::std::move(from);
  }

  inline StepBreakdownEvents& operator=(const StepBreakdownEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepBreakdownEvents& operator=(StepBreakdownEvents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepBreakdownEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepBreakdownEvents* internal_default_instance() {
    return reinterpret_cast<const StepBreakdownEvents*>(
               &_StepBreakdownEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StepBreakdownEvents& a, StepBreakdownEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(StepBreakdownEvents* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepBreakdownEvents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StepBreakdownEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StepBreakdownEvents>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StepBreakdownEvents& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StepBreakdownEvents& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepBreakdownEvents* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.StepBreakdownEvents";
  }
  protected:
  explicit StepBreakdownEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.StepBreakdownEvents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fpod_5fstats_2eproto;
};
// -------------------------------------------------------------------

class PodStatsDatabase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.PodStatsDatabase) */ {
 public:
  inline PodStatsDatabase() : PodStatsDatabase(nullptr) {}
  ~PodStatsDatabase() override;
  explicit constexpr PodStatsDatabase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PodStatsDatabase(const PodStatsDatabase& from);
  PodStatsDatabase(PodStatsDatabase&& from) noexcept
    : PodStatsDatabase() {
    *this = ::std::move(from);
  }

  inline PodStatsDatabase& operator=(const PodStatsDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodStatsDatabase& operator=(PodStatsDatabase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PodStatsDatabase& default_instance() {
    return *internal_default_instance();
  }
  static inline const PodStatsDatabase* internal_default_instance() {
    return reinterpret_cast<const PodStatsDatabase*>(
               &_PodStatsDatabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PodStatsDatabase& a, PodStatsDatabase& b) {
    a.Swap(&b);
  }
  inline void Swap(PodStatsDatabase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodStatsDatabase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PodStatsDatabase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PodStatsDatabase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PodStatsDatabase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PodStatsDatabase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodStatsDatabase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.PodStatsDatabase";
  }
  protected:
  explicit PodStatsDatabase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodStatsRecordFieldNumber = 1,
    kStepBreakdownEventsFieldNumber = 4,
    kDiagnosticsFieldNumber = 3,
  };
  // repeated .tensorflow.profiler.PodStatsRecord pod_stats_record = 1;
  int pod_stats_record_size() const;
  private:
  int _internal_pod_stats_record_size() const;
  public:
  void clear_pod_stats_record();
  ::tensorflow::profiler::PodStatsRecord* mutable_pod_stats_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::PodStatsRecord >*
      mutable_pod_stats_record();
  private:
  const ::tensorflow::profiler::PodStatsRecord& _internal_pod_stats_record(int index) const;
  ::tensorflow::profiler::PodStatsRecord* _internal_add_pod_stats_record();
  public:
  const ::tensorflow::profiler::PodStatsRecord& pod_stats_record(int index) const;
  ::tensorflow::profiler::PodStatsRecord* add_pod_stats_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::PodStatsRecord >&
      pod_stats_record() const;

  // repeated .tensorflow.profiler.StepBreakdownEvents step_breakdown_events = 4;
  int step_breakdown_events_size() const;
  private:
  int _internal_step_breakdown_events_size() const;
  public:
  void clear_step_breakdown_events();
  ::tensorflow::profiler::StepBreakdownEvents* mutable_step_breakdown_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::StepBreakdownEvents >*
      mutable_step_breakdown_events();
  private:
  const ::tensorflow::profiler::StepBreakdownEvents& _internal_step_breakdown_events(int index) const;
  ::tensorflow::profiler::StepBreakdownEvents* _internal_add_step_breakdown_events();
  public:
  const ::tensorflow::profiler::StepBreakdownEvents& step_breakdown_events(int index) const;
  ::tensorflow::profiler::StepBreakdownEvents* add_step_breakdown_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::StepBreakdownEvents >&
      step_breakdown_events() const;

  // .tensorflow.profiler.Diagnostics diagnostics = 3;
  bool has_diagnostics() const;
  private:
  bool _internal_has_diagnostics() const;
  public:
  void clear_diagnostics();
  const ::tensorflow::profiler::Diagnostics& diagnostics() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::Diagnostics* release_diagnostics();
  ::tensorflow::profiler::Diagnostics* mutable_diagnostics();
  void set_allocated_diagnostics(::tensorflow::profiler::Diagnostics* diagnostics);
  private:
  const ::tensorflow::profiler::Diagnostics& _internal_diagnostics() const;
  ::tensorflow::profiler::Diagnostics* _internal_mutable_diagnostics();
  public:
  void unsafe_arena_set_allocated_diagnostics(
      ::tensorflow::profiler::Diagnostics* diagnostics);
  ::tensorflow::profiler::Diagnostics* unsafe_arena_release_diagnostics();

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.PodStatsDatabase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::PodStatsRecord > pod_stats_record_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::StepBreakdownEvents > step_breakdown_events_;
  ::tensorflow::profiler::Diagnostics* diagnostics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fpod_5fstats_2eproto;
};
// -------------------------------------------------------------------

class PodStatsRecord_StepBreakdownUsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodStatsRecord_StepBreakdownUsEntry_DoNotUse, 
    int32_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodStatsRecord_StepBreakdownUsEntry_DoNotUse, 
    int32_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  PodStatsRecord_StepBreakdownUsEntry_DoNotUse();
  explicit constexpr PodStatsRecord_StepBreakdownUsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PodStatsRecord_StepBreakdownUsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodStatsRecord_StepBreakdownUsEntry_DoNotUse& other);
  static const PodStatsRecord_StepBreakdownUsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodStatsRecord_StepBreakdownUsEntry_DoNotUse*>(&_PodStatsRecord_StepBreakdownUsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PodStatsRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.PodStatsRecord) */ {
 public:
  inline PodStatsRecord() : PodStatsRecord(nullptr) {}
  ~PodStatsRecord() override;
  explicit constexpr PodStatsRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PodStatsRecord(const PodStatsRecord& from);
  PodStatsRecord(PodStatsRecord&& from) noexcept
    : PodStatsRecord() {
    *this = ::std::move(from);
  }

  inline PodStatsRecord& operator=(const PodStatsRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodStatsRecord& operator=(PodStatsRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PodStatsRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const PodStatsRecord* internal_default_instance() {
    return reinterpret_cast<const PodStatsRecord*>(
               &_PodStatsRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PodStatsRecord& a, PodStatsRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PodStatsRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodStatsRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PodStatsRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PodStatsRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PodStatsRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PodStatsRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodStatsRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.PodStatsRecord";
  }
  protected:
  explicit PodStatsRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStepBreakdownUsFieldNumber = 19,
    kHostNameFieldNumber = 1,
    kBottleneckFieldNumber = 14,
    kChipIdFieldNumber = 2,
    kNodeIdFieldNumber = 3,
    kTotalDurationUsFieldNumber = 5,
    kStepNumFieldNumber = 4,
  };
  // map<int32, double> step_breakdown_us = 19;
  int step_breakdown_us_size() const;
  private:
  int _internal_step_breakdown_us_size() const;
  public:
  void clear_step_breakdown_us();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
      _internal_step_breakdown_us() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
      _internal_mutable_step_breakdown_us();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
      step_breakdown_us() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
      mutable_step_breakdown_us();

  // string host_name = 1;
  void clear_host_name();
  const std::string& host_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_name();
  PROTOBUF_NODISCARD std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // string bottleneck = 14;
  void clear_bottleneck();
  const std::string& bottleneck() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bottleneck(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bottleneck();
  PROTOBUF_NODISCARD std::string* release_bottleneck();
  void set_allocated_bottleneck(std::string* bottleneck);
  private:
  const std::string& _internal_bottleneck() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bottleneck(const std::string& value);
  std::string* _internal_mutable_bottleneck();
  public:

  // int32 chip_id = 2;
  void clear_chip_id();
  int32_t chip_id() const;
  void set_chip_id(int32_t value);
  private:
  int32_t _internal_chip_id() const;
  void _internal_set_chip_id(int32_t value);
  public:

  // int32 node_id = 3;
  void clear_node_id();
  int32_t node_id() const;
  void set_node_id(int32_t value);
  private:
  int32_t _internal_node_id() const;
  void _internal_set_node_id(int32_t value);
  public:

  // double total_duration_us = 5;
  void clear_total_duration_us();
  double total_duration_us() const;
  void set_total_duration_us(double value);
  private:
  double _internal_total_duration_us() const;
  void _internal_set_total_duration_us(double value);
  public:

  // uint32 step_num = 4;
  void clear_step_num();
  uint32_t step_num() const;
  void set_step_num(uint32_t value);
  private:
  uint32_t _internal_step_num() const;
  void _internal_set_step_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.PodStatsRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodStatsRecord_StepBreakdownUsEntry_DoNotUse,
      int32_t, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> step_breakdown_us_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bottleneck_;
  int32_t chip_id_;
  int32_t node_id_;
  double total_duration_us_;
  uint32_t step_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fpod_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StepBreakdownEvents

// int32 id = 1;
inline void StepBreakdownEvents::clear_id() {
  id_ = 0;
}
inline int32_t StepBreakdownEvents::_internal_id() const {
  return id_;
}
inline int32_t StepBreakdownEvents::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.StepBreakdownEvents.id)
  return _internal_id();
}
inline void StepBreakdownEvents::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void StepBreakdownEvents::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.StepBreakdownEvents.id)
}

// string name = 2;
inline void StepBreakdownEvents::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StepBreakdownEvents::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.StepBreakdownEvents.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StepBreakdownEvents::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.StepBreakdownEvents.name)
}
inline std::string* StepBreakdownEvents::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.StepBreakdownEvents.name)
  return _s;
}
inline const std::string& StepBreakdownEvents::_internal_name() const {
  return name_.Get();
}
inline void StepBreakdownEvents::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StepBreakdownEvents::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StepBreakdownEvents::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.StepBreakdownEvents.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StepBreakdownEvents::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.StepBreakdownEvents.name)
}

// -------------------------------------------------------------------

// PodStatsDatabase

// repeated .tensorflow.profiler.PodStatsRecord pod_stats_record = 1;
inline int PodStatsDatabase::_internal_pod_stats_record_size() const {
  return pod_stats_record_.size();
}
inline int PodStatsDatabase::pod_stats_record_size() const {
  return _internal_pod_stats_record_size();
}
inline void PodStatsDatabase::clear_pod_stats_record() {
  pod_stats_record_.Clear();
}
inline ::tensorflow::profiler::PodStatsRecord* PodStatsDatabase::mutable_pod_stats_record(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PodStatsDatabase.pod_stats_record)
  return pod_stats_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::PodStatsRecord >*
PodStatsDatabase::mutable_pod_stats_record() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.PodStatsDatabase.pod_stats_record)
  return &pod_stats_record_;
}
inline const ::tensorflow::profiler::PodStatsRecord& PodStatsDatabase::_internal_pod_stats_record(int index) const {
  return pod_stats_record_.Get(index);
}
inline const ::tensorflow::profiler::PodStatsRecord& PodStatsDatabase::pod_stats_record(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PodStatsDatabase.pod_stats_record)
  return _internal_pod_stats_record(index);
}
inline ::tensorflow::profiler::PodStatsRecord* PodStatsDatabase::_internal_add_pod_stats_record() {
  return pod_stats_record_.Add();
}
inline ::tensorflow::profiler::PodStatsRecord* PodStatsDatabase::add_pod_stats_record() {
  ::tensorflow::profiler::PodStatsRecord* _add = _internal_add_pod_stats_record();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.PodStatsDatabase.pod_stats_record)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::PodStatsRecord >&
PodStatsDatabase::pod_stats_record() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.PodStatsDatabase.pod_stats_record)
  return pod_stats_record_;
}

// .tensorflow.profiler.Diagnostics diagnostics = 3;
inline bool PodStatsDatabase::_internal_has_diagnostics() const {
  return this != internal_default_instance() && diagnostics_ != nullptr;
}
inline bool PodStatsDatabase::has_diagnostics() const {
  return _internal_has_diagnostics();
}
inline const ::tensorflow::profiler::Diagnostics& PodStatsDatabase::_internal_diagnostics() const {
  const ::tensorflow::profiler::Diagnostics* p = diagnostics_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::Diagnostics&>(
      ::tensorflow::profiler::_Diagnostics_default_instance_);
}
inline const ::tensorflow::profiler::Diagnostics& PodStatsDatabase::diagnostics() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PodStatsDatabase.diagnostics)
  return _internal_diagnostics();
}
inline void PodStatsDatabase::unsafe_arena_set_allocated_diagnostics(
    ::tensorflow::profiler::Diagnostics* diagnostics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostics_);
  }
  diagnostics_ = diagnostics;
  if (diagnostics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.PodStatsDatabase.diagnostics)
}
inline ::tensorflow::profiler::Diagnostics* PodStatsDatabase::release_diagnostics() {
  
  ::tensorflow::profiler::Diagnostics* temp = diagnostics_;
  diagnostics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::Diagnostics* PodStatsDatabase::unsafe_arena_release_diagnostics() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.PodStatsDatabase.diagnostics)
  
  ::tensorflow::profiler::Diagnostics* temp = diagnostics_;
  diagnostics_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::Diagnostics* PodStatsDatabase::_internal_mutable_diagnostics() {
  
  if (diagnostics_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::Diagnostics>(GetArenaForAllocation());
    diagnostics_ = p;
  }
  return diagnostics_;
}
inline ::tensorflow::profiler::Diagnostics* PodStatsDatabase::mutable_diagnostics() {
  ::tensorflow::profiler::Diagnostics* _msg = _internal_mutable_diagnostics();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PodStatsDatabase.diagnostics)
  return _msg;
}
inline void PodStatsDatabase::set_allocated_diagnostics(::tensorflow::profiler::Diagnostics* diagnostics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostics_);
  }
  if (diagnostics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostics));
    if (message_arena != submessage_arena) {
      diagnostics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnostics, submessage_arena);
    }
    
  } else {
    
  }
  diagnostics_ = diagnostics;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.PodStatsDatabase.diagnostics)
}

// repeated .tensorflow.profiler.StepBreakdownEvents step_breakdown_events = 4;
inline int PodStatsDatabase::_internal_step_breakdown_events_size() const {
  return step_breakdown_events_.size();
}
inline int PodStatsDatabase::step_breakdown_events_size() const {
  return _internal_step_breakdown_events_size();
}
inline void PodStatsDatabase::clear_step_breakdown_events() {
  step_breakdown_events_.Clear();
}
inline ::tensorflow::profiler::StepBreakdownEvents* PodStatsDatabase::mutable_step_breakdown_events(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PodStatsDatabase.step_breakdown_events)
  return step_breakdown_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::StepBreakdownEvents >*
PodStatsDatabase::mutable_step_breakdown_events() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.PodStatsDatabase.step_breakdown_events)
  return &step_breakdown_events_;
}
inline const ::tensorflow::profiler::StepBreakdownEvents& PodStatsDatabase::_internal_step_breakdown_events(int index) const {
  return step_breakdown_events_.Get(index);
}
inline const ::tensorflow::profiler::StepBreakdownEvents& PodStatsDatabase::step_breakdown_events(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PodStatsDatabase.step_breakdown_events)
  return _internal_step_breakdown_events(index);
}
inline ::tensorflow::profiler::StepBreakdownEvents* PodStatsDatabase::_internal_add_step_breakdown_events() {
  return step_breakdown_events_.Add();
}
inline ::tensorflow::profiler::StepBreakdownEvents* PodStatsDatabase::add_step_breakdown_events() {
  ::tensorflow::profiler::StepBreakdownEvents* _add = _internal_add_step_breakdown_events();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.PodStatsDatabase.step_breakdown_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::StepBreakdownEvents >&
PodStatsDatabase::step_breakdown_events() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.PodStatsDatabase.step_breakdown_events)
  return step_breakdown_events_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PodStatsRecord

// string host_name = 1;
inline void PodStatsRecord::clear_host_name() {
  host_name_.ClearToEmpty();
}
inline const std::string& PodStatsRecord::host_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PodStatsRecord.host_name)
  return _internal_host_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodStatsRecord::set_host_name(ArgT0&& arg0, ArgT... args) {
 
 host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PodStatsRecord.host_name)
}
inline std::string* PodStatsRecord::mutable_host_name() {
  std::string* _s = _internal_mutable_host_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PodStatsRecord.host_name)
  return _s;
}
inline const std::string& PodStatsRecord::_internal_host_name() const {
  return host_name_.Get();
}
inline void PodStatsRecord::_internal_set_host_name(const std::string& value) {
  
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodStatsRecord::_internal_mutable_host_name() {
  
  return host_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodStatsRecord::release_host_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.PodStatsRecord.host_name)
  return host_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodStatsRecord::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    
  } else {
    
  }
  host_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.PodStatsRecord.host_name)
}

// int32 chip_id = 2;
inline void PodStatsRecord::clear_chip_id() {
  chip_id_ = 0;
}
inline int32_t PodStatsRecord::_internal_chip_id() const {
  return chip_id_;
}
inline int32_t PodStatsRecord::chip_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PodStatsRecord.chip_id)
  return _internal_chip_id();
}
inline void PodStatsRecord::_internal_set_chip_id(int32_t value) {
  
  chip_id_ = value;
}
inline void PodStatsRecord::set_chip_id(int32_t value) {
  _internal_set_chip_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PodStatsRecord.chip_id)
}

// int32 node_id = 3;
inline void PodStatsRecord::clear_node_id() {
  node_id_ = 0;
}
inline int32_t PodStatsRecord::_internal_node_id() const {
  return node_id_;
}
inline int32_t PodStatsRecord::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PodStatsRecord.node_id)
  return _internal_node_id();
}
inline void PodStatsRecord::_internal_set_node_id(int32_t value) {
  
  node_id_ = value;
}
inline void PodStatsRecord::set_node_id(int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PodStatsRecord.node_id)
}

// uint32 step_num = 4;
inline void PodStatsRecord::clear_step_num() {
  step_num_ = 0u;
}
inline uint32_t PodStatsRecord::_internal_step_num() const {
  return step_num_;
}
inline uint32_t PodStatsRecord::step_num() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PodStatsRecord.step_num)
  return _internal_step_num();
}
inline void PodStatsRecord::_internal_set_step_num(uint32_t value) {
  
  step_num_ = value;
}
inline void PodStatsRecord::set_step_num(uint32_t value) {
  _internal_set_step_num(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PodStatsRecord.step_num)
}

// double total_duration_us = 5;
inline void PodStatsRecord::clear_total_duration_us() {
  total_duration_us_ = 0;
}
inline double PodStatsRecord::_internal_total_duration_us() const {
  return total_duration_us_;
}
inline double PodStatsRecord::total_duration_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PodStatsRecord.total_duration_us)
  return _internal_total_duration_us();
}
inline void PodStatsRecord::_internal_set_total_duration_us(double value) {
  
  total_duration_us_ = value;
}
inline void PodStatsRecord::set_total_duration_us(double value) {
  _internal_set_total_duration_us(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PodStatsRecord.total_duration_us)
}

// map<int32, double> step_breakdown_us = 19;
inline int PodStatsRecord::_internal_step_breakdown_us_size() const {
  return step_breakdown_us_.size();
}
inline int PodStatsRecord::step_breakdown_us_size() const {
  return _internal_step_breakdown_us_size();
}
inline void PodStatsRecord::clear_step_breakdown_us() {
  step_breakdown_us_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
PodStatsRecord::_internal_step_breakdown_us() const {
  return step_breakdown_us_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
PodStatsRecord::step_breakdown_us() const {
  // @@protoc_insertion_point(field_map:tensorflow.profiler.PodStatsRecord.step_breakdown_us)
  return _internal_step_breakdown_us();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
PodStatsRecord::_internal_mutable_step_breakdown_us() {
  return step_breakdown_us_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
PodStatsRecord::mutable_step_breakdown_us() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.profiler.PodStatsRecord.step_breakdown_us)
  return _internal_mutable_step_breakdown_us();
}

// string bottleneck = 14;
inline void PodStatsRecord::clear_bottleneck() {
  bottleneck_.ClearToEmpty();
}
inline const std::string& PodStatsRecord::bottleneck() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PodStatsRecord.bottleneck)
  return _internal_bottleneck();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodStatsRecord::set_bottleneck(ArgT0&& arg0, ArgT... args) {
 
 bottleneck_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PodStatsRecord.bottleneck)
}
inline std::string* PodStatsRecord::mutable_bottleneck() {
  std::string* _s = _internal_mutable_bottleneck();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PodStatsRecord.bottleneck)
  return _s;
}
inline const std::string& PodStatsRecord::_internal_bottleneck() const {
  return bottleneck_.Get();
}
inline void PodStatsRecord::_internal_set_bottleneck(const std::string& value) {
  
  bottleneck_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodStatsRecord::_internal_mutable_bottleneck() {
  
  return bottleneck_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodStatsRecord::release_bottleneck() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.PodStatsRecord.bottleneck)
  return bottleneck_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodStatsRecord::set_allocated_bottleneck(std::string* bottleneck) {
  if (bottleneck != nullptr) {
    
  } else {
    
  }
  bottleneck_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bottleneck,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bottleneck_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bottleneck_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.PodStatsRecord.bottleneck)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fpod_5fstats_2eproto
