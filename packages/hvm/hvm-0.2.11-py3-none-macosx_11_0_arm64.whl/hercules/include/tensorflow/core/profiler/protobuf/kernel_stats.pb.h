// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/kernel_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto;
namespace tensorflow {
namespace profiler {
class KernelReport;
struct KernelReportDefaultTypeInternal;
extern KernelReportDefaultTypeInternal _KernelReport_default_instance_;
class KernelStatsDb;
struct KernelStatsDbDefaultTypeInternal;
extern KernelStatsDbDefaultTypeInternal _KernelStatsDb_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::profiler::KernelReport* Arena::CreateMaybeMessage<::tensorflow::profiler::KernelReport>(Arena*);
template<> ::tensorflow::profiler::KernelStatsDb* Arena::CreateMaybeMessage<::tensorflow::profiler::KernelStatsDb>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace profiler {

// ===================================================================

class KernelReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.KernelReport) */ {
 public:
  inline KernelReport() : KernelReport(nullptr) {}
  ~KernelReport() override;
  explicit constexpr KernelReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KernelReport(const KernelReport& from);
  KernelReport(KernelReport&& from) noexcept
    : KernelReport() {
    *this = ::std::move(from);
  }

  inline KernelReport& operator=(const KernelReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline KernelReport& operator=(KernelReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KernelReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const KernelReport* internal_default_instance() {
    return reinterpret_cast<const KernelReport*>(
               &_KernelReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KernelReport& a, KernelReport& b) {
    a.Swap(&b);
  }
  inline void Swap(KernelReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KernelReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KernelReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KernelReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KernelReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KernelReport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KernelReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.KernelReport";
  }
  protected:
  explicit KernelReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockDimFieldNumber = 5,
    kGridDimFieldNumber = 6,
    kNameFieldNumber = 1,
    kOpNameFieldNumber = 12,
    kRegistersPerThreadFieldNumber = 2,
    kStaticShmemBytesFieldNumber = 3,
    kTotalDurationNsFieldNumber = 7,
    kMinDurationNsFieldNumber = 8,
    kDynamicShmemBytesFieldNumber = 4,
    kIsKernelUsingTensorCoreFieldNumber = 10,
    kIsOpTensorCoreEligibleFieldNumber = 11,
    kMaxDurationNsFieldNumber = 9,
    kOccurrencesFieldNumber = 13,
    kOccupancyPctFieldNumber = 14,
  };
  // repeated uint32 block_dim = 5;
  int block_dim_size() const;
  private:
  int _internal_block_dim_size() const;
  public:
  void clear_block_dim();
  private:
  uint32_t _internal_block_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_block_dim() const;
  void _internal_add_block_dim(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_block_dim();
  public:
  uint32_t block_dim(int index) const;
  void set_block_dim(int index, uint32_t value);
  void add_block_dim(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      block_dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_block_dim();

  // repeated uint32 grid_dim = 6;
  int grid_dim_size() const;
  private:
  int _internal_grid_dim_size() const;
  public:
  void clear_grid_dim();
  private:
  uint32_t _internal_grid_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_grid_dim() const;
  void _internal_add_grid_dim(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_grid_dim();
  public:
  uint32_t grid_dim(int index) const;
  void set_grid_dim(int index, uint32_t value);
  void add_grid_dim(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      grid_dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_grid_dim();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string op_name = 12;
  void clear_op_name();
  const std::string& op_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_op_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_op_name();
  PROTOBUF_NODISCARD std::string* release_op_name();
  void set_allocated_op_name(std::string* op_name);
  private:
  const std::string& _internal_op_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op_name(const std::string& value);
  std::string* _internal_mutable_op_name();
  public:

  // uint32 registers_per_thread = 2;
  void clear_registers_per_thread();
  uint32_t registers_per_thread() const;
  void set_registers_per_thread(uint32_t value);
  private:
  uint32_t _internal_registers_per_thread() const;
  void _internal_set_registers_per_thread(uint32_t value);
  public:

  // uint32 static_shmem_bytes = 3;
  void clear_static_shmem_bytes();
  uint32_t static_shmem_bytes() const;
  void set_static_shmem_bytes(uint32_t value);
  private:
  uint32_t _internal_static_shmem_bytes() const;
  void _internal_set_static_shmem_bytes(uint32_t value);
  public:

  // uint64 total_duration_ns = 7;
  void clear_total_duration_ns();
  uint64_t total_duration_ns() const;
  void set_total_duration_ns(uint64_t value);
  private:
  uint64_t _internal_total_duration_ns() const;
  void _internal_set_total_duration_ns(uint64_t value);
  public:

  // uint64 min_duration_ns = 8;
  void clear_min_duration_ns();
  uint64_t min_duration_ns() const;
  void set_min_duration_ns(uint64_t value);
  private:
  uint64_t _internal_min_duration_ns() const;
  void _internal_set_min_duration_ns(uint64_t value);
  public:

  // uint32 dynamic_shmem_bytes = 4;
  void clear_dynamic_shmem_bytes();
  uint32_t dynamic_shmem_bytes() const;
  void set_dynamic_shmem_bytes(uint32_t value);
  private:
  uint32_t _internal_dynamic_shmem_bytes() const;
  void _internal_set_dynamic_shmem_bytes(uint32_t value);
  public:

  // bool is_kernel_using_tensor_core = 10;
  void clear_is_kernel_using_tensor_core();
  bool is_kernel_using_tensor_core() const;
  void set_is_kernel_using_tensor_core(bool value);
  private:
  bool _internal_is_kernel_using_tensor_core() const;
  void _internal_set_is_kernel_using_tensor_core(bool value);
  public:

  // bool is_op_tensor_core_eligible = 11;
  void clear_is_op_tensor_core_eligible();
  bool is_op_tensor_core_eligible() const;
  void set_is_op_tensor_core_eligible(bool value);
  private:
  bool _internal_is_op_tensor_core_eligible() const;
  void _internal_set_is_op_tensor_core_eligible(bool value);
  public:

  // uint64 max_duration_ns = 9;
  void clear_max_duration_ns();
  uint64_t max_duration_ns() const;
  void set_max_duration_ns(uint64_t value);
  private:
  uint64_t _internal_max_duration_ns() const;
  void _internal_set_max_duration_ns(uint64_t value);
  public:

  // uint32 occurrences = 13;
  void clear_occurrences();
  uint32_t occurrences() const;
  void set_occurrences(uint32_t value);
  private:
  uint32_t _internal_occurrences() const;
  void _internal_set_occurrences(uint32_t value);
  public:

  // float occupancy_pct = 14;
  void clear_occupancy_pct();
  float occupancy_pct() const;
  void set_occupancy_pct(float value);
  private:
  float _internal_occupancy_pct() const;
  void _internal_set_occupancy_pct(float value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.KernelReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > block_dim_;
  mutable std::atomic<int> _block_dim_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > grid_dim_;
  mutable std::atomic<int> _grid_dim_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_name_;
  uint32_t registers_per_thread_;
  uint32_t static_shmem_bytes_;
  uint64_t total_duration_ns_;
  uint64_t min_duration_ns_;
  uint32_t dynamic_shmem_bytes_;
  bool is_kernel_using_tensor_core_;
  bool is_op_tensor_core_eligible_;
  uint64_t max_duration_ns_;
  uint32_t occurrences_;
  float occupancy_pct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto;
};
// -------------------------------------------------------------------

class KernelStatsDb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.KernelStatsDb) */ {
 public:
  inline KernelStatsDb() : KernelStatsDb(nullptr) {}
  ~KernelStatsDb() override;
  explicit constexpr KernelStatsDb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KernelStatsDb(const KernelStatsDb& from);
  KernelStatsDb(KernelStatsDb&& from) noexcept
    : KernelStatsDb() {
    *this = ::std::move(from);
  }

  inline KernelStatsDb& operator=(const KernelStatsDb& from) {
    CopyFrom(from);
    return *this;
  }
  inline KernelStatsDb& operator=(KernelStatsDb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KernelStatsDb& default_instance() {
    return *internal_default_instance();
  }
  static inline const KernelStatsDb* internal_default_instance() {
    return reinterpret_cast<const KernelStatsDb*>(
               &_KernelStatsDb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KernelStatsDb& a, KernelStatsDb& b) {
    a.Swap(&b);
  }
  inline void Swap(KernelStatsDb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KernelStatsDb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KernelStatsDb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KernelStatsDb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KernelStatsDb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KernelStatsDb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KernelStatsDb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.KernelStatsDb";
  }
  protected:
  explicit KernelStatsDb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportsFieldNumber = 1,
  };
  // repeated .tensorflow.profiler.KernelReport reports = 1;
  int reports_size() const;
  private:
  int _internal_reports_size() const;
  public:
  void clear_reports();
  ::tensorflow::profiler::KernelReport* mutable_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::KernelReport >*
      mutable_reports();
  private:
  const ::tensorflow::profiler::KernelReport& _internal_reports(int index) const;
  ::tensorflow::profiler::KernelReport* _internal_add_reports();
  public:
  const ::tensorflow::profiler::KernelReport& reports(int index) const;
  ::tensorflow::profiler::KernelReport* add_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::KernelReport >&
      reports() const;

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.KernelStatsDb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::KernelReport > reports_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KernelReport

// string name = 1;
inline void KernelReport::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& KernelReport::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KernelReport::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.name)
}
inline std::string* KernelReport::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.KernelReport.name)
  return _s;
}
inline const std::string& KernelReport::_internal_name() const {
  return name_.Get();
}
inline void KernelReport::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KernelReport::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KernelReport::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.KernelReport.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KernelReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.KernelReport.name)
}

// uint32 registers_per_thread = 2;
inline void KernelReport::clear_registers_per_thread() {
  registers_per_thread_ = 0u;
}
inline uint32_t KernelReport::_internal_registers_per_thread() const {
  return registers_per_thread_;
}
inline uint32_t KernelReport::registers_per_thread() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.registers_per_thread)
  return _internal_registers_per_thread();
}
inline void KernelReport::_internal_set_registers_per_thread(uint32_t value) {
  
  registers_per_thread_ = value;
}
inline void KernelReport::set_registers_per_thread(uint32_t value) {
  _internal_set_registers_per_thread(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.registers_per_thread)
}

// uint32 static_shmem_bytes = 3;
inline void KernelReport::clear_static_shmem_bytes() {
  static_shmem_bytes_ = 0u;
}
inline uint32_t KernelReport::_internal_static_shmem_bytes() const {
  return static_shmem_bytes_;
}
inline uint32_t KernelReport::static_shmem_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.static_shmem_bytes)
  return _internal_static_shmem_bytes();
}
inline void KernelReport::_internal_set_static_shmem_bytes(uint32_t value) {
  
  static_shmem_bytes_ = value;
}
inline void KernelReport::set_static_shmem_bytes(uint32_t value) {
  _internal_set_static_shmem_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.static_shmem_bytes)
}

// uint32 dynamic_shmem_bytes = 4;
inline void KernelReport::clear_dynamic_shmem_bytes() {
  dynamic_shmem_bytes_ = 0u;
}
inline uint32_t KernelReport::_internal_dynamic_shmem_bytes() const {
  return dynamic_shmem_bytes_;
}
inline uint32_t KernelReport::dynamic_shmem_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.dynamic_shmem_bytes)
  return _internal_dynamic_shmem_bytes();
}
inline void KernelReport::_internal_set_dynamic_shmem_bytes(uint32_t value) {
  
  dynamic_shmem_bytes_ = value;
}
inline void KernelReport::set_dynamic_shmem_bytes(uint32_t value) {
  _internal_set_dynamic_shmem_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.dynamic_shmem_bytes)
}

// repeated uint32 block_dim = 5;
inline int KernelReport::_internal_block_dim_size() const {
  return block_dim_.size();
}
inline int KernelReport::block_dim_size() const {
  return _internal_block_dim_size();
}
inline void KernelReport::clear_block_dim() {
  block_dim_.Clear();
}
inline uint32_t KernelReport::_internal_block_dim(int index) const {
  return block_dim_.Get(index);
}
inline uint32_t KernelReport::block_dim(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.block_dim)
  return _internal_block_dim(index);
}
inline void KernelReport::set_block_dim(int index, uint32_t value) {
  block_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.block_dim)
}
inline void KernelReport::_internal_add_block_dim(uint32_t value) {
  block_dim_.Add(value);
}
inline void KernelReport::add_block_dim(uint32_t value) {
  _internal_add_block_dim(value);
  // @@protoc_insertion_point(field_add:tensorflow.profiler.KernelReport.block_dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
KernelReport::_internal_block_dim() const {
  return block_dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
KernelReport::block_dim() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.KernelReport.block_dim)
  return _internal_block_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
KernelReport::_internal_mutable_block_dim() {
  return &block_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
KernelReport::mutable_block_dim() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.KernelReport.block_dim)
  return _internal_mutable_block_dim();
}

// repeated uint32 grid_dim = 6;
inline int KernelReport::_internal_grid_dim_size() const {
  return grid_dim_.size();
}
inline int KernelReport::grid_dim_size() const {
  return _internal_grid_dim_size();
}
inline void KernelReport::clear_grid_dim() {
  grid_dim_.Clear();
}
inline uint32_t KernelReport::_internal_grid_dim(int index) const {
  return grid_dim_.Get(index);
}
inline uint32_t KernelReport::grid_dim(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.grid_dim)
  return _internal_grid_dim(index);
}
inline void KernelReport::set_grid_dim(int index, uint32_t value) {
  grid_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.grid_dim)
}
inline void KernelReport::_internal_add_grid_dim(uint32_t value) {
  grid_dim_.Add(value);
}
inline void KernelReport::add_grid_dim(uint32_t value) {
  _internal_add_grid_dim(value);
  // @@protoc_insertion_point(field_add:tensorflow.profiler.KernelReport.grid_dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
KernelReport::_internal_grid_dim() const {
  return grid_dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
KernelReport::grid_dim() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.KernelReport.grid_dim)
  return _internal_grid_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
KernelReport::_internal_mutable_grid_dim() {
  return &grid_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
KernelReport::mutable_grid_dim() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.KernelReport.grid_dim)
  return _internal_mutable_grid_dim();
}

// uint64 total_duration_ns = 7;
inline void KernelReport::clear_total_duration_ns() {
  total_duration_ns_ = uint64_t{0u};
}
inline uint64_t KernelReport::_internal_total_duration_ns() const {
  return total_duration_ns_;
}
inline uint64_t KernelReport::total_duration_ns() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.total_duration_ns)
  return _internal_total_duration_ns();
}
inline void KernelReport::_internal_set_total_duration_ns(uint64_t value) {
  
  total_duration_ns_ = value;
}
inline void KernelReport::set_total_duration_ns(uint64_t value) {
  _internal_set_total_duration_ns(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.total_duration_ns)
}

// uint64 min_duration_ns = 8;
inline void KernelReport::clear_min_duration_ns() {
  min_duration_ns_ = uint64_t{0u};
}
inline uint64_t KernelReport::_internal_min_duration_ns() const {
  return min_duration_ns_;
}
inline uint64_t KernelReport::min_duration_ns() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.min_duration_ns)
  return _internal_min_duration_ns();
}
inline void KernelReport::_internal_set_min_duration_ns(uint64_t value) {
  
  min_duration_ns_ = value;
}
inline void KernelReport::set_min_duration_ns(uint64_t value) {
  _internal_set_min_duration_ns(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.min_duration_ns)
}

// uint64 max_duration_ns = 9;
inline void KernelReport::clear_max_duration_ns() {
  max_duration_ns_ = uint64_t{0u};
}
inline uint64_t KernelReport::_internal_max_duration_ns() const {
  return max_duration_ns_;
}
inline uint64_t KernelReport::max_duration_ns() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.max_duration_ns)
  return _internal_max_duration_ns();
}
inline void KernelReport::_internal_set_max_duration_ns(uint64_t value) {
  
  max_duration_ns_ = value;
}
inline void KernelReport::set_max_duration_ns(uint64_t value) {
  _internal_set_max_duration_ns(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.max_duration_ns)
}

// bool is_kernel_using_tensor_core = 10;
inline void KernelReport::clear_is_kernel_using_tensor_core() {
  is_kernel_using_tensor_core_ = false;
}
inline bool KernelReport::_internal_is_kernel_using_tensor_core() const {
  return is_kernel_using_tensor_core_;
}
inline bool KernelReport::is_kernel_using_tensor_core() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.is_kernel_using_tensor_core)
  return _internal_is_kernel_using_tensor_core();
}
inline void KernelReport::_internal_set_is_kernel_using_tensor_core(bool value) {
  
  is_kernel_using_tensor_core_ = value;
}
inline void KernelReport::set_is_kernel_using_tensor_core(bool value) {
  _internal_set_is_kernel_using_tensor_core(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.is_kernel_using_tensor_core)
}

// bool is_op_tensor_core_eligible = 11;
inline void KernelReport::clear_is_op_tensor_core_eligible() {
  is_op_tensor_core_eligible_ = false;
}
inline bool KernelReport::_internal_is_op_tensor_core_eligible() const {
  return is_op_tensor_core_eligible_;
}
inline bool KernelReport::is_op_tensor_core_eligible() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.is_op_tensor_core_eligible)
  return _internal_is_op_tensor_core_eligible();
}
inline void KernelReport::_internal_set_is_op_tensor_core_eligible(bool value) {
  
  is_op_tensor_core_eligible_ = value;
}
inline void KernelReport::set_is_op_tensor_core_eligible(bool value) {
  _internal_set_is_op_tensor_core_eligible(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.is_op_tensor_core_eligible)
}

// string op_name = 12;
inline void KernelReport::clear_op_name() {
  op_name_.ClearToEmpty();
}
inline const std::string& KernelReport::op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.op_name)
  return _internal_op_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KernelReport::set_op_name(ArgT0&& arg0, ArgT... args) {
 
 op_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.op_name)
}
inline std::string* KernelReport::mutable_op_name() {
  std::string* _s = _internal_mutable_op_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.KernelReport.op_name)
  return _s;
}
inline const std::string& KernelReport::_internal_op_name() const {
  return op_name_.Get();
}
inline void KernelReport::_internal_set_op_name(const std::string& value) {
  
  op_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KernelReport::_internal_mutable_op_name() {
  
  return op_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KernelReport::release_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.KernelReport.op_name)
  return op_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KernelReport::set_allocated_op_name(std::string* op_name) {
  if (op_name != nullptr) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (op_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.KernelReport.op_name)
}

// uint32 occurrences = 13;
inline void KernelReport::clear_occurrences() {
  occurrences_ = 0u;
}
inline uint32_t KernelReport::_internal_occurrences() const {
  return occurrences_;
}
inline uint32_t KernelReport::occurrences() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.occurrences)
  return _internal_occurrences();
}
inline void KernelReport::_internal_set_occurrences(uint32_t value) {
  
  occurrences_ = value;
}
inline void KernelReport::set_occurrences(uint32_t value) {
  _internal_set_occurrences(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.occurrences)
}

// float occupancy_pct = 14;
inline void KernelReport::clear_occupancy_pct() {
  occupancy_pct_ = 0;
}
inline float KernelReport::_internal_occupancy_pct() const {
  return occupancy_pct_;
}
inline float KernelReport::occupancy_pct() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.occupancy_pct)
  return _internal_occupancy_pct();
}
inline void KernelReport::_internal_set_occupancy_pct(float value) {
  
  occupancy_pct_ = value;
}
inline void KernelReport::set_occupancy_pct(float value) {
  _internal_set_occupancy_pct(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.occupancy_pct)
}

// -------------------------------------------------------------------

// KernelStatsDb

// repeated .tensorflow.profiler.KernelReport reports = 1;
inline int KernelStatsDb::_internal_reports_size() const {
  return reports_.size();
}
inline int KernelStatsDb::reports_size() const {
  return _internal_reports_size();
}
inline void KernelStatsDb::clear_reports() {
  reports_.Clear();
}
inline ::tensorflow::profiler::KernelReport* KernelStatsDb::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.KernelStatsDb.reports)
  return reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::KernelReport >*
KernelStatsDb::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.KernelStatsDb.reports)
  return &reports_;
}
inline const ::tensorflow::profiler::KernelReport& KernelStatsDb::_internal_reports(int index) const {
  return reports_.Get(index);
}
inline const ::tensorflow::profiler::KernelReport& KernelStatsDb::reports(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelStatsDb.reports)
  return _internal_reports(index);
}
inline ::tensorflow::profiler::KernelReport* KernelStatsDb::_internal_add_reports() {
  return reports_.Add();
}
inline ::tensorflow::profiler::KernelReport* KernelStatsDb::add_reports() {
  ::tensorflow::profiler::KernelReport* _add = _internal_add_reports();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.KernelStatsDb.reports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::KernelReport >&
KernelStatsDb::reports() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.KernelStatsDb.reports)
  return reports_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto
