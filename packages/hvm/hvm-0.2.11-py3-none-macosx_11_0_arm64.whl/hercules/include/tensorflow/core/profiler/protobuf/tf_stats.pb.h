// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/tf_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto;
namespace tensorflow {
namespace profiler {
class TfStatsDatabase;
struct TfStatsDatabaseDefaultTypeInternal;
extern TfStatsDatabaseDefaultTypeInternal _TfStatsDatabase_default_instance_;
class TfStatsRecord;
struct TfStatsRecordDefaultTypeInternal;
extern TfStatsRecordDefaultTypeInternal _TfStatsRecord_default_instance_;
class TfStatsTable;
struct TfStatsTableDefaultTypeInternal;
extern TfStatsTableDefaultTypeInternal _TfStatsTable_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::profiler::TfStatsDatabase* Arena::CreateMaybeMessage<::tensorflow::profiler::TfStatsDatabase>(Arena*);
template<> ::tensorflow::profiler::TfStatsRecord* Arena::CreateMaybeMessage<::tensorflow::profiler::TfStatsRecord>(Arena*);
template<> ::tensorflow::profiler::TfStatsTable* Arena::CreateMaybeMessage<::tensorflow::profiler::TfStatsTable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace profiler {

// ===================================================================

class TfStatsDatabase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.TfStatsDatabase) */ {
 public:
  inline TfStatsDatabase() : TfStatsDatabase(nullptr) {}
  ~TfStatsDatabase() override;
  explicit constexpr TfStatsDatabase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfStatsDatabase(const TfStatsDatabase& from);
  TfStatsDatabase(TfStatsDatabase&& from) noexcept
    : TfStatsDatabase() {
    *this = ::std::move(from);
  }

  inline TfStatsDatabase& operator=(const TfStatsDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfStatsDatabase& operator=(TfStatsDatabase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfStatsDatabase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfStatsDatabase* internal_default_instance() {
    return reinterpret_cast<const TfStatsDatabase*>(
               &_TfStatsDatabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TfStatsDatabase& a, TfStatsDatabase& b) {
    a.Swap(&b);
  }
  inline void Swap(TfStatsDatabase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfStatsDatabase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TfStatsDatabase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TfStatsDatabase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TfStatsDatabase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TfStatsDatabase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfStatsDatabase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.TfStatsDatabase";
  }
  protected:
  explicit TfStatsDatabase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceTypeFieldNumber = 6,
    kWithIdleFieldNumber = 4,
    kWithoutIdleFieldNumber = 5,
  };
  // string device_type = 6;
  void clear_device_type();
  const std::string& device_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_type();
  PROTOBUF_NODISCARD std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // .tensorflow.profiler.TfStatsTable with_idle = 4;
  bool has_with_idle() const;
  private:
  bool _internal_has_with_idle() const;
  public:
  void clear_with_idle();
  const ::tensorflow::profiler::TfStatsTable& with_idle() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::TfStatsTable* release_with_idle();
  ::tensorflow::profiler::TfStatsTable* mutable_with_idle();
  void set_allocated_with_idle(::tensorflow::profiler::TfStatsTable* with_idle);
  private:
  const ::tensorflow::profiler::TfStatsTable& _internal_with_idle() const;
  ::tensorflow::profiler::TfStatsTable* _internal_mutable_with_idle();
  public:
  void unsafe_arena_set_allocated_with_idle(
      ::tensorflow::profiler::TfStatsTable* with_idle);
  ::tensorflow::profiler::TfStatsTable* unsafe_arena_release_with_idle();

  // .tensorflow.profiler.TfStatsTable without_idle = 5;
  bool has_without_idle() const;
  private:
  bool _internal_has_without_idle() const;
  public:
  void clear_without_idle();
  const ::tensorflow::profiler::TfStatsTable& without_idle() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::TfStatsTable* release_without_idle();
  ::tensorflow::profiler::TfStatsTable* mutable_without_idle();
  void set_allocated_without_idle(::tensorflow::profiler::TfStatsTable* without_idle);
  private:
  const ::tensorflow::profiler::TfStatsTable& _internal_without_idle() const;
  ::tensorflow::profiler::TfStatsTable* _internal_mutable_without_idle();
  public:
  void unsafe_arena_set_allocated_without_idle(
      ::tensorflow::profiler::TfStatsTable* without_idle);
  ::tensorflow::profiler::TfStatsTable* unsafe_arena_release_without_idle();

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.TfStatsDatabase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
  ::tensorflow::profiler::TfStatsTable* with_idle_;
  ::tensorflow::profiler::TfStatsTable* without_idle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto;
};
// -------------------------------------------------------------------

class TfStatsTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.TfStatsTable) */ {
 public:
  inline TfStatsTable() : TfStatsTable(nullptr) {}
  ~TfStatsTable() override;
  explicit constexpr TfStatsTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfStatsTable(const TfStatsTable& from);
  TfStatsTable(TfStatsTable&& from) noexcept
    : TfStatsTable() {
    *this = ::std::move(from);
  }

  inline TfStatsTable& operator=(const TfStatsTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfStatsTable& operator=(TfStatsTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfStatsTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfStatsTable* internal_default_instance() {
    return reinterpret_cast<const TfStatsTable*>(
               &_TfStatsTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TfStatsTable& a, TfStatsTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TfStatsTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfStatsTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TfStatsTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TfStatsTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TfStatsTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TfStatsTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfStatsTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.TfStatsTable";
  }
  protected:
  explicit TfStatsTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTfStatsRecordFieldNumber = 1,
    kHostTfPprofKeyFieldNumber = 2,
    kDeviceTfPprofKeyFieldNumber = 3,
  };
  // repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
  int tf_stats_record_size() const;
  private:
  int _internal_tf_stats_record_size() const;
  public:
  void clear_tf_stats_record();
  ::tensorflow::profiler::TfStatsRecord* mutable_tf_stats_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::TfStatsRecord >*
      mutable_tf_stats_record();
  private:
  const ::tensorflow::profiler::TfStatsRecord& _internal_tf_stats_record(int index) const;
  ::tensorflow::profiler::TfStatsRecord* _internal_add_tf_stats_record();
  public:
  const ::tensorflow::profiler::TfStatsRecord& tf_stats_record(int index) const;
  ::tensorflow::profiler::TfStatsRecord* add_tf_stats_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::TfStatsRecord >&
      tf_stats_record() const;

  // string host_tf_pprof_key = 2;
  void clear_host_tf_pprof_key();
  const std::string& host_tf_pprof_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_tf_pprof_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_tf_pprof_key();
  PROTOBUF_NODISCARD std::string* release_host_tf_pprof_key();
  void set_allocated_host_tf_pprof_key(std::string* host_tf_pprof_key);
  private:
  const std::string& _internal_host_tf_pprof_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_tf_pprof_key(const std::string& value);
  std::string* _internal_mutable_host_tf_pprof_key();
  public:

  // string device_tf_pprof_key = 3;
  void clear_device_tf_pprof_key();
  const std::string& device_tf_pprof_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_tf_pprof_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_tf_pprof_key();
  PROTOBUF_NODISCARD std::string* release_device_tf_pprof_key();
  void set_allocated_device_tf_pprof_key(std::string* device_tf_pprof_key);
  private:
  const std::string& _internal_device_tf_pprof_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_tf_pprof_key(const std::string& value);
  std::string* _internal_mutable_device_tf_pprof_key();
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.TfStatsTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::TfStatsRecord > tf_stats_record_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_tf_pprof_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_tf_pprof_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto;
};
// -------------------------------------------------------------------

class TfStatsRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.TfStatsRecord) */ {
 public:
  inline TfStatsRecord() : TfStatsRecord(nullptr) {}
  ~TfStatsRecord() override;
  explicit constexpr TfStatsRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfStatsRecord(const TfStatsRecord& from);
  TfStatsRecord(TfStatsRecord&& from) noexcept
    : TfStatsRecord() {
    *this = ::std::move(from);
  }

  inline TfStatsRecord& operator=(const TfStatsRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfStatsRecord& operator=(TfStatsRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfStatsRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfStatsRecord* internal_default_instance() {
    return reinterpret_cast<const TfStatsRecord*>(
               &_TfStatsRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TfStatsRecord& a, TfStatsRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(TfStatsRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfStatsRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TfStatsRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TfStatsRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TfStatsRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TfStatsRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfStatsRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.TfStatsRecord";
  }
  protected:
  explicit TfStatsRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostOrDeviceFieldNumber = 2,
    kOpTypeFieldNumber = 3,
    kOpNameFieldNumber = 4,
    kBoundByFieldNumber = 17,
    kRankFieldNumber = 1,
    kOccurrencesFieldNumber = 5,
    kTotalTimeInUsFieldNumber = 6,
    kAvgTimeInUsFieldNumber = 7,
    kTotalSelfTimeInUsFieldNumber = 8,
    kAvgSelfTimeInUsFieldNumber = 9,
    kDeviceTotalSelfTimeAsFractionFieldNumber = 10,
    kDeviceCumulativeTotalSelfTimeAsFractionFieldNumber = 11,
    kHostTotalSelfTimeAsFractionFieldNumber = 12,
    kHostCumulativeTotalSelfTimeAsFractionFieldNumber = 13,
    kMeasuredFlopRateFieldNumber = 14,
    kMeasuredMemoryBwFieldNumber = 15,
    kOperationalIntensityFieldNumber = 16,
    kGpuTensorcoreUtilizationFieldNumber = 19,
    kIsEagerFieldNumber = 18,
  };
  // string host_or_device = 2;
  void clear_host_or_device();
  const std::string& host_or_device() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_or_device(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_or_device();
  PROTOBUF_NODISCARD std::string* release_host_or_device();
  void set_allocated_host_or_device(std::string* host_or_device);
  private:
  const std::string& _internal_host_or_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_or_device(const std::string& value);
  std::string* _internal_mutable_host_or_device();
  public:

  // string op_type = 3;
  void clear_op_type();
  const std::string& op_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_op_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_op_type();
  PROTOBUF_NODISCARD std::string* release_op_type();
  void set_allocated_op_type(std::string* op_type);
  private:
  const std::string& _internal_op_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op_type(const std::string& value);
  std::string* _internal_mutable_op_type();
  public:

  // string op_name = 4;
  void clear_op_name();
  const std::string& op_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_op_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_op_name();
  PROTOBUF_NODISCARD std::string* release_op_name();
  void set_allocated_op_name(std::string* op_name);
  private:
  const std::string& _internal_op_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op_name(const std::string& value);
  std::string* _internal_mutable_op_name();
  public:

  // string bound_by = 17;
  void clear_bound_by();
  const std::string& bound_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bound_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bound_by();
  PROTOBUF_NODISCARD std::string* release_bound_by();
  void set_allocated_bound_by(std::string* bound_by);
  private:
  const std::string& _internal_bound_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bound_by(const std::string& value);
  std::string* _internal_mutable_bound_by();
  public:

  // uint64 rank = 1;
  void clear_rank();
  uint64_t rank() const;
  void set_rank(uint64_t value);
  private:
  uint64_t _internal_rank() const;
  void _internal_set_rank(uint64_t value);
  public:

  // int64 occurrences = 5;
  void clear_occurrences();
  int64_t occurrences() const;
  void set_occurrences(int64_t value);
  private:
  int64_t _internal_occurrences() const;
  void _internal_set_occurrences(int64_t value);
  public:

  // double total_time_in_us = 6;
  void clear_total_time_in_us();
  double total_time_in_us() const;
  void set_total_time_in_us(double value);
  private:
  double _internal_total_time_in_us() const;
  void _internal_set_total_time_in_us(double value);
  public:

  // double avg_time_in_us = 7;
  void clear_avg_time_in_us();
  double avg_time_in_us() const;
  void set_avg_time_in_us(double value);
  private:
  double _internal_avg_time_in_us() const;
  void _internal_set_avg_time_in_us(double value);
  public:

  // double total_self_time_in_us = 8;
  void clear_total_self_time_in_us();
  double total_self_time_in_us() const;
  void set_total_self_time_in_us(double value);
  private:
  double _internal_total_self_time_in_us() const;
  void _internal_set_total_self_time_in_us(double value);
  public:

  // double avg_self_time_in_us = 9;
  void clear_avg_self_time_in_us();
  double avg_self_time_in_us() const;
  void set_avg_self_time_in_us(double value);
  private:
  double _internal_avg_self_time_in_us() const;
  void _internal_set_avg_self_time_in_us(double value);
  public:

  // double device_total_self_time_as_fraction = 10;
  void clear_device_total_self_time_as_fraction();
  double device_total_self_time_as_fraction() const;
  void set_device_total_self_time_as_fraction(double value);
  private:
  double _internal_device_total_self_time_as_fraction() const;
  void _internal_set_device_total_self_time_as_fraction(double value);
  public:

  // double device_cumulative_total_self_time_as_fraction = 11;
  void clear_device_cumulative_total_self_time_as_fraction();
  double device_cumulative_total_self_time_as_fraction() const;
  void set_device_cumulative_total_self_time_as_fraction(double value);
  private:
  double _internal_device_cumulative_total_self_time_as_fraction() const;
  void _internal_set_device_cumulative_total_self_time_as_fraction(double value);
  public:

  // double host_total_self_time_as_fraction = 12;
  void clear_host_total_self_time_as_fraction();
  double host_total_self_time_as_fraction() const;
  void set_host_total_self_time_as_fraction(double value);
  private:
  double _internal_host_total_self_time_as_fraction() const;
  void _internal_set_host_total_self_time_as_fraction(double value);
  public:

  // double host_cumulative_total_self_time_as_fraction = 13;
  void clear_host_cumulative_total_self_time_as_fraction();
  double host_cumulative_total_self_time_as_fraction() const;
  void set_host_cumulative_total_self_time_as_fraction(double value);
  private:
  double _internal_host_cumulative_total_self_time_as_fraction() const;
  void _internal_set_host_cumulative_total_self_time_as_fraction(double value);
  public:

  // double measured_flop_rate = 14;
  void clear_measured_flop_rate();
  double measured_flop_rate() const;
  void set_measured_flop_rate(double value);
  private:
  double _internal_measured_flop_rate() const;
  void _internal_set_measured_flop_rate(double value);
  public:

  // double measured_memory_bw = 15;
  void clear_measured_memory_bw();
  double measured_memory_bw() const;
  void set_measured_memory_bw(double value);
  private:
  double _internal_measured_memory_bw() const;
  void _internal_set_measured_memory_bw(double value);
  public:

  // double operational_intensity = 16;
  void clear_operational_intensity();
  double operational_intensity() const;
  void set_operational_intensity(double value);
  private:
  double _internal_operational_intensity() const;
  void _internal_set_operational_intensity(double value);
  public:

  // double gpu_tensorcore_utilization = 19;
  void clear_gpu_tensorcore_utilization();
  double gpu_tensorcore_utilization() const;
  void set_gpu_tensorcore_utilization(double value);
  private:
  double _internal_gpu_tensorcore_utilization() const;
  void _internal_set_gpu_tensorcore_utilization(double value);
  public:

  // bool is_eager = 18;
  void clear_is_eager();
  bool is_eager() const;
  void set_is_eager(bool value);
  private:
  bool _internal_is_eager() const;
  void _internal_set_is_eager(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.TfStatsRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_or_device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bound_by_;
  uint64_t rank_;
  int64_t occurrences_;
  double total_time_in_us_;
  double avg_time_in_us_;
  double total_self_time_in_us_;
  double avg_self_time_in_us_;
  double device_total_self_time_as_fraction_;
  double device_cumulative_total_self_time_as_fraction_;
  double host_total_self_time_as_fraction_;
  double host_cumulative_total_self_time_as_fraction_;
  double measured_flop_rate_;
  double measured_memory_bw_;
  double operational_intensity_;
  double gpu_tensorcore_utilization_;
  bool is_eager_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TfStatsDatabase

// .tensorflow.profiler.TfStatsTable with_idle = 4;
inline bool TfStatsDatabase::_internal_has_with_idle() const {
  return this != internal_default_instance() && with_idle_ != nullptr;
}
inline bool TfStatsDatabase::has_with_idle() const {
  return _internal_has_with_idle();
}
inline void TfStatsDatabase::clear_with_idle() {
  if (GetArenaForAllocation() == nullptr && with_idle_ != nullptr) {
    delete with_idle_;
  }
  with_idle_ = nullptr;
}
inline const ::tensorflow::profiler::TfStatsTable& TfStatsDatabase::_internal_with_idle() const {
  const ::tensorflow::profiler::TfStatsTable* p = with_idle_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::TfStatsTable&>(
      ::tensorflow::profiler::_TfStatsTable_default_instance_);
}
inline const ::tensorflow::profiler::TfStatsTable& TfStatsDatabase::with_idle() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsDatabase.with_idle)
  return _internal_with_idle();
}
inline void TfStatsDatabase::unsafe_arena_set_allocated_with_idle(
    ::tensorflow::profiler::TfStatsTable* with_idle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(with_idle_);
  }
  with_idle_ = with_idle;
  if (with_idle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.TfStatsDatabase.with_idle)
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::release_with_idle() {
  
  ::tensorflow::profiler::TfStatsTable* temp = with_idle_;
  with_idle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::unsafe_arena_release_with_idle() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsDatabase.with_idle)
  
  ::tensorflow::profiler::TfStatsTable* temp = with_idle_;
  with_idle_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::_internal_mutable_with_idle() {
  
  if (with_idle_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::TfStatsTable>(GetArenaForAllocation());
    with_idle_ = p;
  }
  return with_idle_;
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::mutable_with_idle() {
  ::tensorflow::profiler::TfStatsTable* _msg = _internal_mutable_with_idle();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsDatabase.with_idle)
  return _msg;
}
inline void TfStatsDatabase::set_allocated_with_idle(::tensorflow::profiler::TfStatsTable* with_idle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete with_idle_;
  }
  if (with_idle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::TfStatsTable>::GetOwningArena(with_idle);
    if (message_arena != submessage_arena) {
      with_idle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, with_idle, submessage_arena);
    }
    
  } else {
    
  }
  with_idle_ = with_idle;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsDatabase.with_idle)
}

// .tensorflow.profiler.TfStatsTable without_idle = 5;
inline bool TfStatsDatabase::_internal_has_without_idle() const {
  return this != internal_default_instance() && without_idle_ != nullptr;
}
inline bool TfStatsDatabase::has_without_idle() const {
  return _internal_has_without_idle();
}
inline void TfStatsDatabase::clear_without_idle() {
  if (GetArenaForAllocation() == nullptr && without_idle_ != nullptr) {
    delete without_idle_;
  }
  without_idle_ = nullptr;
}
inline const ::tensorflow::profiler::TfStatsTable& TfStatsDatabase::_internal_without_idle() const {
  const ::tensorflow::profiler::TfStatsTable* p = without_idle_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::TfStatsTable&>(
      ::tensorflow::profiler::_TfStatsTable_default_instance_);
}
inline const ::tensorflow::profiler::TfStatsTable& TfStatsDatabase::without_idle() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsDatabase.without_idle)
  return _internal_without_idle();
}
inline void TfStatsDatabase::unsafe_arena_set_allocated_without_idle(
    ::tensorflow::profiler::TfStatsTable* without_idle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(without_idle_);
  }
  without_idle_ = without_idle;
  if (without_idle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.TfStatsDatabase.without_idle)
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::release_without_idle() {
  
  ::tensorflow::profiler::TfStatsTable* temp = without_idle_;
  without_idle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::unsafe_arena_release_without_idle() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsDatabase.without_idle)
  
  ::tensorflow::profiler::TfStatsTable* temp = without_idle_;
  without_idle_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::_internal_mutable_without_idle() {
  
  if (without_idle_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::TfStatsTable>(GetArenaForAllocation());
    without_idle_ = p;
  }
  return without_idle_;
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::mutable_without_idle() {
  ::tensorflow::profiler::TfStatsTable* _msg = _internal_mutable_without_idle();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsDatabase.without_idle)
  return _msg;
}
inline void TfStatsDatabase::set_allocated_without_idle(::tensorflow::profiler::TfStatsTable* without_idle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete without_idle_;
  }
  if (without_idle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::TfStatsTable>::GetOwningArena(without_idle);
    if (message_arena != submessage_arena) {
      without_idle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, without_idle, submessage_arena);
    }
    
  } else {
    
  }
  without_idle_ = without_idle;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsDatabase.without_idle)
}

// string device_type = 6;
inline void TfStatsDatabase::clear_device_type() {
  device_type_.ClearToEmpty();
}
inline const std::string& TfStatsDatabase::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsDatabase.device_type)
  return _internal_device_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TfStatsDatabase::set_device_type(ArgT0&& arg0, ArgT... args) {
 
 device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsDatabase.device_type)
}
inline std::string* TfStatsDatabase::mutable_device_type() {
  std::string* _s = _internal_mutable_device_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsDatabase.device_type)
  return _s;
}
inline const std::string& TfStatsDatabase::_internal_device_type() const {
  return device_type_.Get();
}
inline void TfStatsDatabase::_internal_set_device_type(const std::string& value) {
  
  device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TfStatsDatabase::_internal_mutable_device_type() {
  
  return device_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TfStatsDatabase::release_device_type() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsDatabase.device_type)
  return device_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TfStatsDatabase::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsDatabase.device_type)
}

// -------------------------------------------------------------------

// TfStatsTable

// repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
inline int TfStatsTable::_internal_tf_stats_record_size() const {
  return tf_stats_record_.size();
}
inline int TfStatsTable::tf_stats_record_size() const {
  return _internal_tf_stats_record_size();
}
inline void TfStatsTable::clear_tf_stats_record() {
  tf_stats_record_.Clear();
}
inline ::tensorflow::profiler::TfStatsRecord* TfStatsTable::mutable_tf_stats_record(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsTable.tf_stats_record)
  return tf_stats_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::TfStatsRecord >*
TfStatsTable::mutable_tf_stats_record() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.TfStatsTable.tf_stats_record)
  return &tf_stats_record_;
}
inline const ::tensorflow::profiler::TfStatsRecord& TfStatsTable::_internal_tf_stats_record(int index) const {
  return tf_stats_record_.Get(index);
}
inline const ::tensorflow::profiler::TfStatsRecord& TfStatsTable::tf_stats_record(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsTable.tf_stats_record)
  return _internal_tf_stats_record(index);
}
inline ::tensorflow::profiler::TfStatsRecord* TfStatsTable::_internal_add_tf_stats_record() {
  return tf_stats_record_.Add();
}
inline ::tensorflow::profiler::TfStatsRecord* TfStatsTable::add_tf_stats_record() {
  ::tensorflow::profiler::TfStatsRecord* _add = _internal_add_tf_stats_record();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.TfStatsTable.tf_stats_record)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::TfStatsRecord >&
TfStatsTable::tf_stats_record() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.TfStatsTable.tf_stats_record)
  return tf_stats_record_;
}

// string host_tf_pprof_key = 2;
inline void TfStatsTable::clear_host_tf_pprof_key() {
  host_tf_pprof_key_.ClearToEmpty();
}
inline const std::string& TfStatsTable::host_tf_pprof_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
  return _internal_host_tf_pprof_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TfStatsTable::set_host_tf_pprof_key(ArgT0&& arg0, ArgT... args) {
 
 host_tf_pprof_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
}
inline std::string* TfStatsTable::mutable_host_tf_pprof_key() {
  std::string* _s = _internal_mutable_host_tf_pprof_key();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
  return _s;
}
inline const std::string& TfStatsTable::_internal_host_tf_pprof_key() const {
  return host_tf_pprof_key_.Get();
}
inline void TfStatsTable::_internal_set_host_tf_pprof_key(const std::string& value) {
  
  host_tf_pprof_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TfStatsTable::_internal_mutable_host_tf_pprof_key() {
  
  return host_tf_pprof_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TfStatsTable::release_host_tf_pprof_key() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
  return host_tf_pprof_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TfStatsTable::set_allocated_host_tf_pprof_key(std::string* host_tf_pprof_key) {
  if (host_tf_pprof_key != nullptr) {
    
  } else {
    
  }
  host_tf_pprof_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_tf_pprof_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_tf_pprof_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_tf_pprof_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
}

// string device_tf_pprof_key = 3;
inline void TfStatsTable::clear_device_tf_pprof_key() {
  device_tf_pprof_key_.ClearToEmpty();
}
inline const std::string& TfStatsTable::device_tf_pprof_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
  return _internal_device_tf_pprof_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TfStatsTable::set_device_tf_pprof_key(ArgT0&& arg0, ArgT... args) {
 
 device_tf_pprof_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
}
inline std::string* TfStatsTable::mutable_device_tf_pprof_key() {
  std::string* _s = _internal_mutable_device_tf_pprof_key();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
  return _s;
}
inline const std::string& TfStatsTable::_internal_device_tf_pprof_key() const {
  return device_tf_pprof_key_.Get();
}
inline void TfStatsTable::_internal_set_device_tf_pprof_key(const std::string& value) {
  
  device_tf_pprof_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TfStatsTable::_internal_mutable_device_tf_pprof_key() {
  
  return device_tf_pprof_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TfStatsTable::release_device_tf_pprof_key() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
  return device_tf_pprof_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TfStatsTable::set_allocated_device_tf_pprof_key(std::string* device_tf_pprof_key) {
  if (device_tf_pprof_key != nullptr) {
    
  } else {
    
  }
  device_tf_pprof_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_tf_pprof_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_tf_pprof_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_tf_pprof_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
}

// -------------------------------------------------------------------

// TfStatsRecord

// uint64 rank = 1;
inline void TfStatsRecord::clear_rank() {
  rank_ = uint64_t{0u};
}
inline uint64_t TfStatsRecord::_internal_rank() const {
  return rank_;
}
inline uint64_t TfStatsRecord::rank() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.rank)
  return _internal_rank();
}
inline void TfStatsRecord::_internal_set_rank(uint64_t value) {
  
  rank_ = value;
}
inline void TfStatsRecord::set_rank(uint64_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.rank)
}

// string host_or_device = 2;
inline void TfStatsRecord::clear_host_or_device() {
  host_or_device_.ClearToEmpty();
}
inline const std::string& TfStatsRecord::host_or_device() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.host_or_device)
  return _internal_host_or_device();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TfStatsRecord::set_host_or_device(ArgT0&& arg0, ArgT... args) {
 
 host_or_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.host_or_device)
}
inline std::string* TfStatsRecord::mutable_host_or_device() {
  std::string* _s = _internal_mutable_host_or_device();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsRecord.host_or_device)
  return _s;
}
inline const std::string& TfStatsRecord::_internal_host_or_device() const {
  return host_or_device_.Get();
}
inline void TfStatsRecord::_internal_set_host_or_device(const std::string& value) {
  
  host_or_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TfStatsRecord::_internal_mutable_host_or_device() {
  
  return host_or_device_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TfStatsRecord::release_host_or_device() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsRecord.host_or_device)
  return host_or_device_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TfStatsRecord::set_allocated_host_or_device(std::string* host_or_device) {
  if (host_or_device != nullptr) {
    
  } else {
    
  }
  host_or_device_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_or_device,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_or_device_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_or_device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsRecord.host_or_device)
}

// string op_type = 3;
inline void TfStatsRecord::clear_op_type() {
  op_type_.ClearToEmpty();
}
inline const std::string& TfStatsRecord::op_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.op_type)
  return _internal_op_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TfStatsRecord::set_op_type(ArgT0&& arg0, ArgT... args) {
 
 op_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.op_type)
}
inline std::string* TfStatsRecord::mutable_op_type() {
  std::string* _s = _internal_mutable_op_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsRecord.op_type)
  return _s;
}
inline const std::string& TfStatsRecord::_internal_op_type() const {
  return op_type_.Get();
}
inline void TfStatsRecord::_internal_set_op_type(const std::string& value) {
  
  op_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TfStatsRecord::_internal_mutable_op_type() {
  
  return op_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TfStatsRecord::release_op_type() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsRecord.op_type)
  return op_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TfStatsRecord::set_allocated_op_type(std::string* op_type) {
  if (op_type != nullptr) {
    
  } else {
    
  }
  op_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (op_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsRecord.op_type)
}

// string op_name = 4;
inline void TfStatsRecord::clear_op_name() {
  op_name_.ClearToEmpty();
}
inline const std::string& TfStatsRecord::op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.op_name)
  return _internal_op_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TfStatsRecord::set_op_name(ArgT0&& arg0, ArgT... args) {
 
 op_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.op_name)
}
inline std::string* TfStatsRecord::mutable_op_name() {
  std::string* _s = _internal_mutable_op_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsRecord.op_name)
  return _s;
}
inline const std::string& TfStatsRecord::_internal_op_name() const {
  return op_name_.Get();
}
inline void TfStatsRecord::_internal_set_op_name(const std::string& value) {
  
  op_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TfStatsRecord::_internal_mutable_op_name() {
  
  return op_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TfStatsRecord::release_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsRecord.op_name)
  return op_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TfStatsRecord::set_allocated_op_name(std::string* op_name) {
  if (op_name != nullptr) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (op_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsRecord.op_name)
}

// int64 occurrences = 5;
inline void TfStatsRecord::clear_occurrences() {
  occurrences_ = int64_t{0};
}
inline int64_t TfStatsRecord::_internal_occurrences() const {
  return occurrences_;
}
inline int64_t TfStatsRecord::occurrences() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.occurrences)
  return _internal_occurrences();
}
inline void TfStatsRecord::_internal_set_occurrences(int64_t value) {
  
  occurrences_ = value;
}
inline void TfStatsRecord::set_occurrences(int64_t value) {
  _internal_set_occurrences(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.occurrences)
}

// double total_time_in_us = 6;
inline void TfStatsRecord::clear_total_time_in_us() {
  total_time_in_us_ = 0;
}
inline double TfStatsRecord::_internal_total_time_in_us() const {
  return total_time_in_us_;
}
inline double TfStatsRecord::total_time_in_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.total_time_in_us)
  return _internal_total_time_in_us();
}
inline void TfStatsRecord::_internal_set_total_time_in_us(double value) {
  
  total_time_in_us_ = value;
}
inline void TfStatsRecord::set_total_time_in_us(double value) {
  _internal_set_total_time_in_us(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.total_time_in_us)
}

// double avg_time_in_us = 7;
inline void TfStatsRecord::clear_avg_time_in_us() {
  avg_time_in_us_ = 0;
}
inline double TfStatsRecord::_internal_avg_time_in_us() const {
  return avg_time_in_us_;
}
inline double TfStatsRecord::avg_time_in_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.avg_time_in_us)
  return _internal_avg_time_in_us();
}
inline void TfStatsRecord::_internal_set_avg_time_in_us(double value) {
  
  avg_time_in_us_ = value;
}
inline void TfStatsRecord::set_avg_time_in_us(double value) {
  _internal_set_avg_time_in_us(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.avg_time_in_us)
}

// double total_self_time_in_us = 8;
inline void TfStatsRecord::clear_total_self_time_in_us() {
  total_self_time_in_us_ = 0;
}
inline double TfStatsRecord::_internal_total_self_time_in_us() const {
  return total_self_time_in_us_;
}
inline double TfStatsRecord::total_self_time_in_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.total_self_time_in_us)
  return _internal_total_self_time_in_us();
}
inline void TfStatsRecord::_internal_set_total_self_time_in_us(double value) {
  
  total_self_time_in_us_ = value;
}
inline void TfStatsRecord::set_total_self_time_in_us(double value) {
  _internal_set_total_self_time_in_us(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.total_self_time_in_us)
}

// double avg_self_time_in_us = 9;
inline void TfStatsRecord::clear_avg_self_time_in_us() {
  avg_self_time_in_us_ = 0;
}
inline double TfStatsRecord::_internal_avg_self_time_in_us() const {
  return avg_self_time_in_us_;
}
inline double TfStatsRecord::avg_self_time_in_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.avg_self_time_in_us)
  return _internal_avg_self_time_in_us();
}
inline void TfStatsRecord::_internal_set_avg_self_time_in_us(double value) {
  
  avg_self_time_in_us_ = value;
}
inline void TfStatsRecord::set_avg_self_time_in_us(double value) {
  _internal_set_avg_self_time_in_us(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.avg_self_time_in_us)
}

// double device_total_self_time_as_fraction = 10;
inline void TfStatsRecord::clear_device_total_self_time_as_fraction() {
  device_total_self_time_as_fraction_ = 0;
}
inline double TfStatsRecord::_internal_device_total_self_time_as_fraction() const {
  return device_total_self_time_as_fraction_;
}
inline double TfStatsRecord::device_total_self_time_as_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.device_total_self_time_as_fraction)
  return _internal_device_total_self_time_as_fraction();
}
inline void TfStatsRecord::_internal_set_device_total_self_time_as_fraction(double value) {
  
  device_total_self_time_as_fraction_ = value;
}
inline void TfStatsRecord::set_device_total_self_time_as_fraction(double value) {
  _internal_set_device_total_self_time_as_fraction(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.device_total_self_time_as_fraction)
}

// double device_cumulative_total_self_time_as_fraction = 11;
inline void TfStatsRecord::clear_device_cumulative_total_self_time_as_fraction() {
  device_cumulative_total_self_time_as_fraction_ = 0;
}
inline double TfStatsRecord::_internal_device_cumulative_total_self_time_as_fraction() const {
  return device_cumulative_total_self_time_as_fraction_;
}
inline double TfStatsRecord::device_cumulative_total_self_time_as_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.device_cumulative_total_self_time_as_fraction)
  return _internal_device_cumulative_total_self_time_as_fraction();
}
inline void TfStatsRecord::_internal_set_device_cumulative_total_self_time_as_fraction(double value) {
  
  device_cumulative_total_self_time_as_fraction_ = value;
}
inline void TfStatsRecord::set_device_cumulative_total_self_time_as_fraction(double value) {
  _internal_set_device_cumulative_total_self_time_as_fraction(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.device_cumulative_total_self_time_as_fraction)
}

// double host_total_self_time_as_fraction = 12;
inline void TfStatsRecord::clear_host_total_self_time_as_fraction() {
  host_total_self_time_as_fraction_ = 0;
}
inline double TfStatsRecord::_internal_host_total_self_time_as_fraction() const {
  return host_total_self_time_as_fraction_;
}
inline double TfStatsRecord::host_total_self_time_as_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.host_total_self_time_as_fraction)
  return _internal_host_total_self_time_as_fraction();
}
inline void TfStatsRecord::_internal_set_host_total_self_time_as_fraction(double value) {
  
  host_total_self_time_as_fraction_ = value;
}
inline void TfStatsRecord::set_host_total_self_time_as_fraction(double value) {
  _internal_set_host_total_self_time_as_fraction(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.host_total_self_time_as_fraction)
}

// double host_cumulative_total_self_time_as_fraction = 13;
inline void TfStatsRecord::clear_host_cumulative_total_self_time_as_fraction() {
  host_cumulative_total_self_time_as_fraction_ = 0;
}
inline double TfStatsRecord::_internal_host_cumulative_total_self_time_as_fraction() const {
  return host_cumulative_total_self_time_as_fraction_;
}
inline double TfStatsRecord::host_cumulative_total_self_time_as_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.host_cumulative_total_self_time_as_fraction)
  return _internal_host_cumulative_total_self_time_as_fraction();
}
inline void TfStatsRecord::_internal_set_host_cumulative_total_self_time_as_fraction(double value) {
  
  host_cumulative_total_self_time_as_fraction_ = value;
}
inline void TfStatsRecord::set_host_cumulative_total_self_time_as_fraction(double value) {
  _internal_set_host_cumulative_total_self_time_as_fraction(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.host_cumulative_total_self_time_as_fraction)
}

// double measured_flop_rate = 14;
inline void TfStatsRecord::clear_measured_flop_rate() {
  measured_flop_rate_ = 0;
}
inline double TfStatsRecord::_internal_measured_flop_rate() const {
  return measured_flop_rate_;
}
inline double TfStatsRecord::measured_flop_rate() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.measured_flop_rate)
  return _internal_measured_flop_rate();
}
inline void TfStatsRecord::_internal_set_measured_flop_rate(double value) {
  
  measured_flop_rate_ = value;
}
inline void TfStatsRecord::set_measured_flop_rate(double value) {
  _internal_set_measured_flop_rate(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.measured_flop_rate)
}

// double measured_memory_bw = 15;
inline void TfStatsRecord::clear_measured_memory_bw() {
  measured_memory_bw_ = 0;
}
inline double TfStatsRecord::_internal_measured_memory_bw() const {
  return measured_memory_bw_;
}
inline double TfStatsRecord::measured_memory_bw() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.measured_memory_bw)
  return _internal_measured_memory_bw();
}
inline void TfStatsRecord::_internal_set_measured_memory_bw(double value) {
  
  measured_memory_bw_ = value;
}
inline void TfStatsRecord::set_measured_memory_bw(double value) {
  _internal_set_measured_memory_bw(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.measured_memory_bw)
}

// double operational_intensity = 16;
inline void TfStatsRecord::clear_operational_intensity() {
  operational_intensity_ = 0;
}
inline double TfStatsRecord::_internal_operational_intensity() const {
  return operational_intensity_;
}
inline double TfStatsRecord::operational_intensity() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.operational_intensity)
  return _internal_operational_intensity();
}
inline void TfStatsRecord::_internal_set_operational_intensity(double value) {
  
  operational_intensity_ = value;
}
inline void TfStatsRecord::set_operational_intensity(double value) {
  _internal_set_operational_intensity(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.operational_intensity)
}

// string bound_by = 17;
inline void TfStatsRecord::clear_bound_by() {
  bound_by_.ClearToEmpty();
}
inline const std::string& TfStatsRecord::bound_by() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.bound_by)
  return _internal_bound_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TfStatsRecord::set_bound_by(ArgT0&& arg0, ArgT... args) {
 
 bound_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.bound_by)
}
inline std::string* TfStatsRecord::mutable_bound_by() {
  std::string* _s = _internal_mutable_bound_by();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsRecord.bound_by)
  return _s;
}
inline const std::string& TfStatsRecord::_internal_bound_by() const {
  return bound_by_.Get();
}
inline void TfStatsRecord::_internal_set_bound_by(const std::string& value) {
  
  bound_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TfStatsRecord::_internal_mutable_bound_by() {
  
  return bound_by_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TfStatsRecord::release_bound_by() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsRecord.bound_by)
  return bound_by_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TfStatsRecord::set_allocated_bound_by(std::string* bound_by) {
  if (bound_by != nullptr) {
    
  } else {
    
  }
  bound_by_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bound_by,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bound_by_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bound_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsRecord.bound_by)
}

// bool is_eager = 18;
inline void TfStatsRecord::clear_is_eager() {
  is_eager_ = false;
}
inline bool TfStatsRecord::_internal_is_eager() const {
  return is_eager_;
}
inline bool TfStatsRecord::is_eager() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.is_eager)
  return _internal_is_eager();
}
inline void TfStatsRecord::_internal_set_is_eager(bool value) {
  
  is_eager_ = value;
}
inline void TfStatsRecord::set_is_eager(bool value) {
  _internal_set_is_eager(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.is_eager)
}

// double gpu_tensorcore_utilization = 19;
inline void TfStatsRecord::clear_gpu_tensorcore_utilization() {
  gpu_tensorcore_utilization_ = 0;
}
inline double TfStatsRecord::_internal_gpu_tensorcore_utilization() const {
  return gpu_tensorcore_utilization_;
}
inline double TfStatsRecord::gpu_tensorcore_utilization() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.gpu_tensorcore_utilization)
  return _internal_gpu_tensorcore_utilization();
}
inline void TfStatsRecord::_internal_set_gpu_tensorcore_utilization(double value) {
  
  gpu_tensorcore_utilization_ = value;
}
inline void TfStatsRecord::set_gpu_tensorcore_utilization(double value) {
  _internal_set_gpu_tensorcore_utilization(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.gpu_tensorcore_utilization)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto
