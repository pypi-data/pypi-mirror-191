// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/op_metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
namespace tensorflow {
namespace profiler {
class LayoutAnalysis;
struct LayoutAnalysisDefaultTypeInternal;
extern LayoutAnalysisDefaultTypeInternal _LayoutAnalysis_default_instance_;
class LayoutAnalysis_Dimension;
struct LayoutAnalysis_DimensionDefaultTypeInternal;
extern LayoutAnalysis_DimensionDefaultTypeInternal _LayoutAnalysis_Dimension_default_instance_;
class OpMetrics;
struct OpMetricsDefaultTypeInternal;
extern OpMetricsDefaultTypeInternal _OpMetrics_default_instance_;
class OpMetricsDb;
struct OpMetricsDbDefaultTypeInternal;
extern OpMetricsDbDefaultTypeInternal _OpMetricsDb_default_instance_;
class OpMetrics_MemoryAccessed;
struct OpMetrics_MemoryAccessedDefaultTypeInternal;
extern OpMetrics_MemoryAccessedDefaultTypeInternal _OpMetrics_MemoryAccessed_default_instance_;
class PrecisionStats;
struct PrecisionStatsDefaultTypeInternal;
extern PrecisionStatsDefaultTypeInternal _PrecisionStats_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::profiler::LayoutAnalysis* Arena::CreateMaybeMessage<::tensorflow::profiler::LayoutAnalysis>(Arena*);
template<> ::tensorflow::profiler::LayoutAnalysis_Dimension* Arena::CreateMaybeMessage<::tensorflow::profiler::LayoutAnalysis_Dimension>(Arena*);
template<> ::tensorflow::profiler::OpMetrics* Arena::CreateMaybeMessage<::tensorflow::profiler::OpMetrics>(Arena*);
template<> ::tensorflow::profiler::OpMetricsDb* Arena::CreateMaybeMessage<::tensorflow::profiler::OpMetricsDb>(Arena*);
template<> ::tensorflow::profiler::OpMetrics_MemoryAccessed* Arena::CreateMaybeMessage<::tensorflow::profiler::OpMetrics_MemoryAccessed>(Arena*);
template<> ::tensorflow::profiler::PrecisionStats* Arena::CreateMaybeMessage<::tensorflow::profiler::PrecisionStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace profiler {

enum OpMetrics_MemoryAccessed_OperationType : int {
  OpMetrics_MemoryAccessed_OperationType_UNKNOWN = 0,
  OpMetrics_MemoryAccessed_OperationType_READ = 1,
  OpMetrics_MemoryAccessed_OperationType_WRITE = 2,
  OpMetrics_MemoryAccessed_OperationType_OpMetrics_MemoryAccessed_OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OpMetrics_MemoryAccessed_OperationType_OpMetrics_MemoryAccessed_OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OpMetrics_MemoryAccessed_OperationType_IsValid(int value);
constexpr OpMetrics_MemoryAccessed_OperationType OpMetrics_MemoryAccessed_OperationType_OperationType_MIN = OpMetrics_MemoryAccessed_OperationType_UNKNOWN;
constexpr OpMetrics_MemoryAccessed_OperationType OpMetrics_MemoryAccessed_OperationType_OperationType_MAX = OpMetrics_MemoryAccessed_OperationType_WRITE;
constexpr int OpMetrics_MemoryAccessed_OperationType_OperationType_ARRAYSIZE = OpMetrics_MemoryAccessed_OperationType_OperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpMetrics_MemoryAccessed_OperationType_descriptor();
template<typename T>
inline const std::string& OpMetrics_MemoryAccessed_OperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpMetrics_MemoryAccessed_OperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpMetrics_MemoryAccessed_OperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpMetrics_MemoryAccessed_OperationType_descriptor(), enum_t_value);
}
inline bool OpMetrics_MemoryAccessed_OperationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OpMetrics_MemoryAccessed_OperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpMetrics_MemoryAccessed_OperationType>(
    OpMetrics_MemoryAccessed_OperationType_descriptor(), name, value);
}
enum LayoutDimensionSemantics : int {
  UNKNOWN_SEMANTICS = 0,
  FEATURE = 1,
  BATCH = 2,
  SPATIAL = 3,
  LayoutDimensionSemantics_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LayoutDimensionSemantics_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LayoutDimensionSemantics_IsValid(int value);
constexpr LayoutDimensionSemantics LayoutDimensionSemantics_MIN = UNKNOWN_SEMANTICS;
constexpr LayoutDimensionSemantics LayoutDimensionSemantics_MAX = SPATIAL;
constexpr int LayoutDimensionSemantics_ARRAYSIZE = LayoutDimensionSemantics_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LayoutDimensionSemantics_descriptor();
template<typename T>
inline const std::string& LayoutDimensionSemantics_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayoutDimensionSemantics>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayoutDimensionSemantics_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LayoutDimensionSemantics_descriptor(), enum_t_value);
}
inline bool LayoutDimensionSemantics_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayoutDimensionSemantics* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LayoutDimensionSemantics>(
    LayoutDimensionSemantics_descriptor(), name, value);
}
// ===================================================================

class LayoutAnalysis_Dimension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.LayoutAnalysis.Dimension) */ {
 public:
  inline LayoutAnalysis_Dimension() : LayoutAnalysis_Dimension(nullptr) {}
  ~LayoutAnalysis_Dimension() override;
  explicit constexpr LayoutAnalysis_Dimension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutAnalysis_Dimension(const LayoutAnalysis_Dimension& from);
  LayoutAnalysis_Dimension(LayoutAnalysis_Dimension&& from) noexcept
    : LayoutAnalysis_Dimension() {
    *this = ::std::move(from);
  }

  inline LayoutAnalysis_Dimension& operator=(const LayoutAnalysis_Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutAnalysis_Dimension& operator=(LayoutAnalysis_Dimension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutAnalysis_Dimension& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutAnalysis_Dimension* internal_default_instance() {
    return reinterpret_cast<const LayoutAnalysis_Dimension*>(
               &_LayoutAnalysis_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LayoutAnalysis_Dimension& a, LayoutAnalysis_Dimension& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutAnalysis_Dimension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutAnalysis_Dimension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutAnalysis_Dimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutAnalysis_Dimension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutAnalysis_Dimension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayoutAnalysis_Dimension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutAnalysis_Dimension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.LayoutAnalysis.Dimension";
  }
  protected:
  explicit LayoutAnalysis_Dimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kAlignmentFieldNumber = 2,
    kSemanticsFieldNumber = 3,
  };
  // int32 size = 1;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // int32 alignment = 2;
  void clear_alignment();
  int32_t alignment() const;
  void set_alignment(int32_t value);
  private:
  int32_t _internal_alignment() const;
  void _internal_set_alignment(int32_t value);
  public:

  // .tensorflow.profiler.LayoutDimensionSemantics semantics = 3;
  void clear_semantics();
  ::tensorflow::profiler::LayoutDimensionSemantics semantics() const;
  void set_semantics(::tensorflow::profiler::LayoutDimensionSemantics value);
  private:
  ::tensorflow::profiler::LayoutDimensionSemantics _internal_semantics() const;
  void _internal_set_semantics(::tensorflow::profiler::LayoutDimensionSemantics value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.LayoutAnalysis.Dimension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t size_;
  int32_t alignment_;
  int semantics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class LayoutAnalysis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.LayoutAnalysis) */ {
 public:
  inline LayoutAnalysis() : LayoutAnalysis(nullptr) {}
  ~LayoutAnalysis() override;
  explicit constexpr LayoutAnalysis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutAnalysis(const LayoutAnalysis& from);
  LayoutAnalysis(LayoutAnalysis&& from) noexcept
    : LayoutAnalysis() {
    *this = ::std::move(from);
  }

  inline LayoutAnalysis& operator=(const LayoutAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutAnalysis& operator=(LayoutAnalysis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutAnalysis& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutAnalysis* internal_default_instance() {
    return reinterpret_cast<const LayoutAnalysis*>(
               &_LayoutAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LayoutAnalysis& a, LayoutAnalysis& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutAnalysis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutAnalysis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutAnalysis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutAnalysis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutAnalysis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayoutAnalysis& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutAnalysis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.LayoutAnalysis";
  }
  protected:
  explicit LayoutAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LayoutAnalysis_Dimension Dimension;

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 1,
  };
  // repeated .tensorflow.profiler.LayoutAnalysis.Dimension dimensions = 1;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  ::tensorflow::profiler::LayoutAnalysis_Dimension* mutable_dimensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::LayoutAnalysis_Dimension >*
      mutable_dimensions();
  private:
  const ::tensorflow::profiler::LayoutAnalysis_Dimension& _internal_dimensions(int index) const;
  ::tensorflow::profiler::LayoutAnalysis_Dimension* _internal_add_dimensions();
  public:
  const ::tensorflow::profiler::LayoutAnalysis_Dimension& dimensions(int index) const;
  ::tensorflow::profiler::LayoutAnalysis_Dimension* add_dimensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::LayoutAnalysis_Dimension >&
      dimensions() const;

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.LayoutAnalysis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::LayoutAnalysis_Dimension > dimensions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class OpMetrics_MemoryAccessed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OpMetrics.MemoryAccessed) */ {
 public:
  inline OpMetrics_MemoryAccessed() : OpMetrics_MemoryAccessed(nullptr) {}
  ~OpMetrics_MemoryAccessed() override;
  explicit constexpr OpMetrics_MemoryAccessed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpMetrics_MemoryAccessed(const OpMetrics_MemoryAccessed& from);
  OpMetrics_MemoryAccessed(OpMetrics_MemoryAccessed&& from) noexcept
    : OpMetrics_MemoryAccessed() {
    *this = ::std::move(from);
  }

  inline OpMetrics_MemoryAccessed& operator=(const OpMetrics_MemoryAccessed& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpMetrics_MemoryAccessed& operator=(OpMetrics_MemoryAccessed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpMetrics_MemoryAccessed& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpMetrics_MemoryAccessed* internal_default_instance() {
    return reinterpret_cast<const OpMetrics_MemoryAccessed*>(
               &_OpMetrics_MemoryAccessed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpMetrics_MemoryAccessed& a, OpMetrics_MemoryAccessed& b) {
    a.Swap(&b);
  }
  inline void Swap(OpMetrics_MemoryAccessed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpMetrics_MemoryAccessed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpMetrics_MemoryAccessed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpMetrics_MemoryAccessed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpMetrics_MemoryAccessed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpMetrics_MemoryAccessed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpMetrics_MemoryAccessed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.OpMetrics.MemoryAccessed";
  }
  protected:
  explicit OpMetrics_MemoryAccessed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OpMetrics_MemoryAccessed_OperationType OperationType;
  static constexpr OperationType UNKNOWN =
    OpMetrics_MemoryAccessed_OperationType_UNKNOWN;
  static constexpr OperationType READ =
    OpMetrics_MemoryAccessed_OperationType_READ;
  static constexpr OperationType WRITE =
    OpMetrics_MemoryAccessed_OperationType_WRITE;
  static inline bool OperationType_IsValid(int value) {
    return OpMetrics_MemoryAccessed_OperationType_IsValid(value);
  }
  static constexpr OperationType OperationType_MIN =
    OpMetrics_MemoryAccessed_OperationType_OperationType_MIN;
  static constexpr OperationType OperationType_MAX =
    OpMetrics_MemoryAccessed_OperationType_OperationType_MAX;
  static constexpr int OperationType_ARRAYSIZE =
    OpMetrics_MemoryAccessed_OperationType_OperationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperationType_descriptor() {
    return OpMetrics_MemoryAccessed_OperationType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperationType_Name.");
    return OpMetrics_MemoryAccessed_OperationType_Name(enum_t_value);
  }
  static inline bool OperationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperationType* value) {
    return OpMetrics_MemoryAccessed_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemorySpaceFieldNumber = 2,
    kBytesAccessedFieldNumber = 3,
    kOperationTypeFieldNumber = 1,
  };
  // uint64 memory_space = 2;
  void clear_memory_space();
  uint64_t memory_space() const;
  void set_memory_space(uint64_t value);
  private:
  uint64_t _internal_memory_space() const;
  void _internal_set_memory_space(uint64_t value);
  public:

  // uint64 bytes_accessed = 3;
  void clear_bytes_accessed();
  uint64_t bytes_accessed() const;
  void set_bytes_accessed(uint64_t value);
  private:
  uint64_t _internal_bytes_accessed() const;
  void _internal_set_bytes_accessed(uint64_t value);
  public:

  // .tensorflow.profiler.OpMetrics.MemoryAccessed.OperationType operation_type = 1;
  void clear_operation_type();
  ::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType operation_type() const;
  void set_operation_type(::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType value);
  private:
  ::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType _internal_operation_type() const;
  void _internal_set_operation_type(::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OpMetrics.MemoryAccessed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t memory_space_;
  uint64_t bytes_accessed_;
  int operation_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class OpMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OpMetrics) */ {
 public:
  inline OpMetrics() : OpMetrics(nullptr) {}
  ~OpMetrics() override;
  explicit constexpr OpMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpMetrics(const OpMetrics& from);
  OpMetrics(OpMetrics&& from) noexcept
    : OpMetrics() {
    *this = ::std::move(from);
  }

  inline OpMetrics& operator=(const OpMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpMetrics& operator=(OpMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpMetrics* internal_default_instance() {
    return reinterpret_cast<const OpMetrics*>(
               &_OpMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpMetrics& a, OpMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(OpMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpMetrics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.OpMetrics";
  }
  protected:
  explicit OpMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OpMetrics_MemoryAccessed MemoryAccessed;

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryAccessedBreakdownFieldNumber = 19,
    kNameFieldNumber = 6,
    kCategoryFieldNumber = 11,
    kProvenanceFieldNumber = 12,
    kDeduplicatedNameFieldNumber = 15,
    kLongNameFieldNumber = 20,
    kLayoutFieldNumber = 14,
    kChildrenFieldNumber = 16,
    kSelfTimePsFieldNumber = 1,
    kFlopsFieldNumber = 2,
    kBytesAccessedFieldNumber = 5,
    kTimePsFieldNumber = 7,
    kDmaStallPsFieldNumber = 10,
    kOccurrencesFieldNumber = 3,
    kIsEagerFieldNumber = 18,
    kHloModuleIdFieldNumber = 13,
    kMinTimePsFieldNumber = 17,
  };
  // repeated .tensorflow.profiler.OpMetrics.MemoryAccessed memory_accessed_breakdown = 19;
  int memory_accessed_breakdown_size() const;
  private:
  int _internal_memory_accessed_breakdown_size() const;
  public:
  void clear_memory_accessed_breakdown();
  ::tensorflow::profiler::OpMetrics_MemoryAccessed* mutable_memory_accessed_breakdown(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::OpMetrics_MemoryAccessed >*
      mutable_memory_accessed_breakdown();
  private:
  const ::tensorflow::profiler::OpMetrics_MemoryAccessed& _internal_memory_accessed_breakdown(int index) const;
  ::tensorflow::profiler::OpMetrics_MemoryAccessed* _internal_add_memory_accessed_breakdown();
  public:
  const ::tensorflow::profiler::OpMetrics_MemoryAccessed& memory_accessed_breakdown(int index) const;
  ::tensorflow::profiler::OpMetrics_MemoryAccessed* add_memory_accessed_breakdown();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::OpMetrics_MemoryAccessed >&
      memory_accessed_breakdown() const;

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string category = 11;
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string provenance = 12;
  void clear_provenance();
  const std::string& provenance() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provenance(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provenance();
  PROTOBUF_NODISCARD std::string* release_provenance();
  void set_allocated_provenance(std::string* provenance);
  private:
  const std::string& _internal_provenance() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provenance(const std::string& value);
  std::string* _internal_mutable_provenance();
  public:

  // string deduplicated_name = 15;
  void clear_deduplicated_name();
  const std::string& deduplicated_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deduplicated_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deduplicated_name();
  PROTOBUF_NODISCARD std::string* release_deduplicated_name();
  void set_allocated_deduplicated_name(std::string* deduplicated_name);
  private:
  const std::string& _internal_deduplicated_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deduplicated_name(const std::string& value);
  std::string* _internal_mutable_deduplicated_name();
  public:

  // string long_name = 20;
  void clear_long_name();
  const std::string& long_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_long_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_long_name();
  PROTOBUF_NODISCARD std::string* release_long_name();
  void set_allocated_long_name(std::string* long_name);
  private:
  const std::string& _internal_long_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_name(const std::string& value);
  std::string* _internal_mutable_long_name();
  public:

  // .tensorflow.profiler.LayoutAnalysis layout = 14;
  bool has_layout() const;
  private:
  bool _internal_has_layout() const;
  public:
  void clear_layout();
  const ::tensorflow::profiler::LayoutAnalysis& layout() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::LayoutAnalysis* release_layout();
  ::tensorflow::profiler::LayoutAnalysis* mutable_layout();
  void set_allocated_layout(::tensorflow::profiler::LayoutAnalysis* layout);
  private:
  const ::tensorflow::profiler::LayoutAnalysis& _internal_layout() const;
  ::tensorflow::profiler::LayoutAnalysis* _internal_mutable_layout();
  public:
  void unsafe_arena_set_allocated_layout(
      ::tensorflow::profiler::LayoutAnalysis* layout);
  ::tensorflow::profiler::LayoutAnalysis* unsafe_arena_release_layout();

  // .tensorflow.profiler.OpMetricsDb children = 16;
  bool has_children() const;
  private:
  bool _internal_has_children() const;
  public:
  void clear_children();
  const ::tensorflow::profiler::OpMetricsDb& children() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::OpMetricsDb* release_children();
  ::tensorflow::profiler::OpMetricsDb* mutable_children();
  void set_allocated_children(::tensorflow::profiler::OpMetricsDb* children);
  private:
  const ::tensorflow::profiler::OpMetricsDb& _internal_children() const;
  ::tensorflow::profiler::OpMetricsDb* _internal_mutable_children();
  public:
  void unsafe_arena_set_allocated_children(
      ::tensorflow::profiler::OpMetricsDb* children);
  ::tensorflow::profiler::OpMetricsDb* unsafe_arena_release_children();

  // uint64 self_time_ps = 1;
  void clear_self_time_ps();
  uint64_t self_time_ps() const;
  void set_self_time_ps(uint64_t value);
  private:
  uint64_t _internal_self_time_ps() const;
  void _internal_set_self_time_ps(uint64_t value);
  public:

  // uint64 flops = 2;
  void clear_flops();
  uint64_t flops() const;
  void set_flops(uint64_t value);
  private:
  uint64_t _internal_flops() const;
  void _internal_set_flops(uint64_t value);
  public:

  // uint64 bytes_accessed = 5;
  void clear_bytes_accessed();
  uint64_t bytes_accessed() const;
  void set_bytes_accessed(uint64_t value);
  private:
  uint64_t _internal_bytes_accessed() const;
  void _internal_set_bytes_accessed(uint64_t value);
  public:

  // uint64 time_ps = 7;
  void clear_time_ps();
  uint64_t time_ps() const;
  void set_time_ps(uint64_t value);
  private:
  uint64_t _internal_time_ps() const;
  void _internal_set_time_ps(uint64_t value);
  public:

  // uint64 dma_stall_ps = 10;
  void clear_dma_stall_ps();
  uint64_t dma_stall_ps() const;
  void set_dma_stall_ps(uint64_t value);
  private:
  uint64_t _internal_dma_stall_ps() const;
  void _internal_set_dma_stall_ps(uint64_t value);
  public:

  // uint32 occurrences = 3;
  void clear_occurrences();
  uint32_t occurrences() const;
  void set_occurrences(uint32_t value);
  private:
  uint32_t _internal_occurrences() const;
  void _internal_set_occurrences(uint32_t value);
  public:

  // bool is_eager = 18;
  void clear_is_eager();
  bool is_eager() const;
  void set_is_eager(bool value);
  private:
  bool _internal_is_eager() const;
  void _internal_set_is_eager(bool value);
  public:

  // uint64 hlo_module_id = 13;
  void clear_hlo_module_id();
  uint64_t hlo_module_id() const;
  void set_hlo_module_id(uint64_t value);
  private:
  uint64_t _internal_hlo_module_id() const;
  void _internal_set_hlo_module_id(uint64_t value);
  public:

  // uint64 min_time_ps = 17;
  void clear_min_time_ps();
  uint64_t min_time_ps() const;
  void set_min_time_ps(uint64_t value);
  private:
  uint64_t _internal_min_time_ps() const;
  void _internal_set_min_time_ps(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OpMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::OpMetrics_MemoryAccessed > memory_accessed_breakdown_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provenance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deduplicated_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_name_;
  ::tensorflow::profiler::LayoutAnalysis* layout_;
  ::tensorflow::profiler::OpMetricsDb* children_;
  uint64_t self_time_ps_;
  uint64_t flops_;
  uint64_t bytes_accessed_;
  uint64_t time_ps_;
  uint64_t dma_stall_ps_;
  uint32_t occurrences_;
  bool is_eager_;
  uint64_t hlo_module_id_;
  uint64_t min_time_ps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class PrecisionStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.PrecisionStats) */ {
 public:
  inline PrecisionStats() : PrecisionStats(nullptr) {}
  ~PrecisionStats() override;
  explicit constexpr PrecisionStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrecisionStats(const PrecisionStats& from);
  PrecisionStats(PrecisionStats&& from) noexcept
    : PrecisionStats() {
    *this = ::std::move(from);
  }

  inline PrecisionStats& operator=(const PrecisionStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrecisionStats& operator=(PrecisionStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrecisionStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrecisionStats* internal_default_instance() {
    return reinterpret_cast<const PrecisionStats*>(
               &_PrecisionStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrecisionStats& a, PrecisionStats& b) {
    a.Swap(&b);
  }
  inline void Swap(PrecisionStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrecisionStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrecisionStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrecisionStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrecisionStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PrecisionStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrecisionStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.PrecisionStats";
  }
  protected:
  explicit PrecisionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompute16BitPsFieldNumber = 1,
    kCompute32BitPsFieldNumber = 2,
  };
  // uint64 compute_16bit_ps = 1;
  void clear_compute_16bit_ps();
  uint64_t compute_16bit_ps() const;
  void set_compute_16bit_ps(uint64_t value);
  private:
  uint64_t _internal_compute_16bit_ps() const;
  void _internal_set_compute_16bit_ps(uint64_t value);
  public:

  // uint64 compute_32bit_ps = 2;
  void clear_compute_32bit_ps();
  uint64_t compute_32bit_ps() const;
  void set_compute_32bit_ps(uint64_t value);
  private:
  uint64_t _internal_compute_32bit_ps() const;
  void _internal_set_compute_32bit_ps(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.PrecisionStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t compute_16bit_ps_;
  uint64_t compute_32bit_ps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class OpMetricsDb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OpMetricsDb) */ {
 public:
  inline OpMetricsDb() : OpMetricsDb(nullptr) {}
  ~OpMetricsDb() override;
  explicit constexpr OpMetricsDb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpMetricsDb(const OpMetricsDb& from);
  OpMetricsDb(OpMetricsDb&& from) noexcept
    : OpMetricsDb() {
    *this = ::std::move(from);
  }

  inline OpMetricsDb& operator=(const OpMetricsDb& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpMetricsDb& operator=(OpMetricsDb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpMetricsDb& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpMetricsDb* internal_default_instance() {
    return reinterpret_cast<const OpMetricsDb*>(
               &_OpMetricsDb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OpMetricsDb& a, OpMetricsDb& b) {
    a.Swap(&b);
  }
  inline void Swap(OpMetricsDb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpMetricsDb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpMetricsDb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpMetricsDb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpMetricsDb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpMetricsDb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpMetricsDb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.OpMetricsDb";
  }
  protected:
  explicit OpMetricsDb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsDbFieldNumber = 10,
    kPrecisionStatsFieldNumber = 13,
    kTotalHostInfeedEnqDurationPsFieldNumber = 2,
    kTotalHostInfeedEnqStartTimestampPsDiffFieldNumber = 3,
    kTotalTimePsFieldNumber = 11,
    kTotalOpTimePsFieldNumber = 12,
  };
  // repeated .tensorflow.profiler.OpMetrics metrics_db = 10;
  int metrics_db_size() const;
  private:
  int _internal_metrics_db_size() const;
  public:
  void clear_metrics_db();
  ::tensorflow::profiler::OpMetrics* mutable_metrics_db(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::OpMetrics >*
      mutable_metrics_db();
  private:
  const ::tensorflow::profiler::OpMetrics& _internal_metrics_db(int index) const;
  ::tensorflow::profiler::OpMetrics* _internal_add_metrics_db();
  public:
  const ::tensorflow::profiler::OpMetrics& metrics_db(int index) const;
  ::tensorflow::profiler::OpMetrics* add_metrics_db();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::OpMetrics >&
      metrics_db() const;

  // .tensorflow.profiler.PrecisionStats precision_stats = 13;
  bool has_precision_stats() const;
  private:
  bool _internal_has_precision_stats() const;
  public:
  void clear_precision_stats();
  const ::tensorflow::profiler::PrecisionStats& precision_stats() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::PrecisionStats* release_precision_stats();
  ::tensorflow::profiler::PrecisionStats* mutable_precision_stats();
  void set_allocated_precision_stats(::tensorflow::profiler::PrecisionStats* precision_stats);
  private:
  const ::tensorflow::profiler::PrecisionStats& _internal_precision_stats() const;
  ::tensorflow::profiler::PrecisionStats* _internal_mutable_precision_stats();
  public:
  void unsafe_arena_set_allocated_precision_stats(
      ::tensorflow::profiler::PrecisionStats* precision_stats);
  ::tensorflow::profiler::PrecisionStats* unsafe_arena_release_precision_stats();

  // uint64 total_host_infeed_enq_duration_ps = 2;
  void clear_total_host_infeed_enq_duration_ps();
  uint64_t total_host_infeed_enq_duration_ps() const;
  void set_total_host_infeed_enq_duration_ps(uint64_t value);
  private:
  uint64_t _internal_total_host_infeed_enq_duration_ps() const;
  void _internal_set_total_host_infeed_enq_duration_ps(uint64_t value);
  public:

  // uint64 total_host_infeed_enq_start_timestamp_ps_diff = 3;
  void clear_total_host_infeed_enq_start_timestamp_ps_diff();
  uint64_t total_host_infeed_enq_start_timestamp_ps_diff() const;
  void set_total_host_infeed_enq_start_timestamp_ps_diff(uint64_t value);
  private:
  uint64_t _internal_total_host_infeed_enq_start_timestamp_ps_diff() const;
  void _internal_set_total_host_infeed_enq_start_timestamp_ps_diff(uint64_t value);
  public:

  // uint64 total_time_ps = 11;
  void clear_total_time_ps();
  uint64_t total_time_ps() const;
  void set_total_time_ps(uint64_t value);
  private:
  uint64_t _internal_total_time_ps() const;
  void _internal_set_total_time_ps(uint64_t value);
  public:

  // uint64 total_op_time_ps = 12;
  void clear_total_op_time_ps();
  uint64_t total_op_time_ps() const;
  void set_total_op_time_ps(uint64_t value);
  private:
  uint64_t _internal_total_op_time_ps() const;
  void _internal_set_total_op_time_ps(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OpMetricsDb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::OpMetrics > metrics_db_;
  ::tensorflow::profiler::PrecisionStats* precision_stats_;
  uint64_t total_host_infeed_enq_duration_ps_;
  uint64_t total_host_infeed_enq_start_timestamp_ps_diff_;
  uint64_t total_time_ps_;
  uint64_t total_op_time_ps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LayoutAnalysis_Dimension

// int32 size = 1;
inline void LayoutAnalysis_Dimension::clear_size() {
  size_ = 0;
}
inline int32_t LayoutAnalysis_Dimension::_internal_size() const {
  return size_;
}
inline int32_t LayoutAnalysis_Dimension::size() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.LayoutAnalysis.Dimension.size)
  return _internal_size();
}
inline void LayoutAnalysis_Dimension::_internal_set_size(int32_t value) {
  
  size_ = value;
}
inline void LayoutAnalysis_Dimension::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.LayoutAnalysis.Dimension.size)
}

// int32 alignment = 2;
inline void LayoutAnalysis_Dimension::clear_alignment() {
  alignment_ = 0;
}
inline int32_t LayoutAnalysis_Dimension::_internal_alignment() const {
  return alignment_;
}
inline int32_t LayoutAnalysis_Dimension::alignment() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.LayoutAnalysis.Dimension.alignment)
  return _internal_alignment();
}
inline void LayoutAnalysis_Dimension::_internal_set_alignment(int32_t value) {
  
  alignment_ = value;
}
inline void LayoutAnalysis_Dimension::set_alignment(int32_t value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.LayoutAnalysis.Dimension.alignment)
}

// .tensorflow.profiler.LayoutDimensionSemantics semantics = 3;
inline void LayoutAnalysis_Dimension::clear_semantics() {
  semantics_ = 0;
}
inline ::tensorflow::profiler::LayoutDimensionSemantics LayoutAnalysis_Dimension::_internal_semantics() const {
  return static_cast< ::tensorflow::profiler::LayoutDimensionSemantics >(semantics_);
}
inline ::tensorflow::profiler::LayoutDimensionSemantics LayoutAnalysis_Dimension::semantics() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.LayoutAnalysis.Dimension.semantics)
  return _internal_semantics();
}
inline void LayoutAnalysis_Dimension::_internal_set_semantics(::tensorflow::profiler::LayoutDimensionSemantics value) {
  
  semantics_ = value;
}
inline void LayoutAnalysis_Dimension::set_semantics(::tensorflow::profiler::LayoutDimensionSemantics value) {
  _internal_set_semantics(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.LayoutAnalysis.Dimension.semantics)
}

// -------------------------------------------------------------------

// LayoutAnalysis

// repeated .tensorflow.profiler.LayoutAnalysis.Dimension dimensions = 1;
inline int LayoutAnalysis::_internal_dimensions_size() const {
  return dimensions_.size();
}
inline int LayoutAnalysis::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void LayoutAnalysis::clear_dimensions() {
  dimensions_.Clear();
}
inline ::tensorflow::profiler::LayoutAnalysis_Dimension* LayoutAnalysis::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.LayoutAnalysis.dimensions)
  return dimensions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::LayoutAnalysis_Dimension >*
LayoutAnalysis::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.LayoutAnalysis.dimensions)
  return &dimensions_;
}
inline const ::tensorflow::profiler::LayoutAnalysis_Dimension& LayoutAnalysis::_internal_dimensions(int index) const {
  return dimensions_.Get(index);
}
inline const ::tensorflow::profiler::LayoutAnalysis_Dimension& LayoutAnalysis::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.LayoutAnalysis.dimensions)
  return _internal_dimensions(index);
}
inline ::tensorflow::profiler::LayoutAnalysis_Dimension* LayoutAnalysis::_internal_add_dimensions() {
  return dimensions_.Add();
}
inline ::tensorflow::profiler::LayoutAnalysis_Dimension* LayoutAnalysis::add_dimensions() {
  ::tensorflow::profiler::LayoutAnalysis_Dimension* _add = _internal_add_dimensions();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.LayoutAnalysis.dimensions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::LayoutAnalysis_Dimension >&
LayoutAnalysis::dimensions() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.LayoutAnalysis.dimensions)
  return dimensions_;
}

// -------------------------------------------------------------------

// OpMetrics_MemoryAccessed

// .tensorflow.profiler.OpMetrics.MemoryAccessed.OperationType operation_type = 1;
inline void OpMetrics_MemoryAccessed::clear_operation_type() {
  operation_type_ = 0;
}
inline ::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType OpMetrics_MemoryAccessed::_internal_operation_type() const {
  return static_cast< ::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType >(operation_type_);
}
inline ::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType OpMetrics_MemoryAccessed::operation_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.MemoryAccessed.operation_type)
  return _internal_operation_type();
}
inline void OpMetrics_MemoryAccessed::_internal_set_operation_type(::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType value) {
  
  operation_type_ = value;
}
inline void OpMetrics_MemoryAccessed::set_operation_type(::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType value) {
  _internal_set_operation_type(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.MemoryAccessed.operation_type)
}

// uint64 memory_space = 2;
inline void OpMetrics_MemoryAccessed::clear_memory_space() {
  memory_space_ = uint64_t{0u};
}
inline uint64_t OpMetrics_MemoryAccessed::_internal_memory_space() const {
  return memory_space_;
}
inline uint64_t OpMetrics_MemoryAccessed::memory_space() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.MemoryAccessed.memory_space)
  return _internal_memory_space();
}
inline void OpMetrics_MemoryAccessed::_internal_set_memory_space(uint64_t value) {
  
  memory_space_ = value;
}
inline void OpMetrics_MemoryAccessed::set_memory_space(uint64_t value) {
  _internal_set_memory_space(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.MemoryAccessed.memory_space)
}

// uint64 bytes_accessed = 3;
inline void OpMetrics_MemoryAccessed::clear_bytes_accessed() {
  bytes_accessed_ = uint64_t{0u};
}
inline uint64_t OpMetrics_MemoryAccessed::_internal_bytes_accessed() const {
  return bytes_accessed_;
}
inline uint64_t OpMetrics_MemoryAccessed::bytes_accessed() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.MemoryAccessed.bytes_accessed)
  return _internal_bytes_accessed();
}
inline void OpMetrics_MemoryAccessed::_internal_set_bytes_accessed(uint64_t value) {
  
  bytes_accessed_ = value;
}
inline void OpMetrics_MemoryAccessed::set_bytes_accessed(uint64_t value) {
  _internal_set_bytes_accessed(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.MemoryAccessed.bytes_accessed)
}

// -------------------------------------------------------------------

// OpMetrics

// uint64 hlo_module_id = 13;
inline void OpMetrics::clear_hlo_module_id() {
  hlo_module_id_ = uint64_t{0u};
}
inline uint64_t OpMetrics::_internal_hlo_module_id() const {
  return hlo_module_id_;
}
inline uint64_t OpMetrics::hlo_module_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.hlo_module_id)
  return _internal_hlo_module_id();
}
inline void OpMetrics::_internal_set_hlo_module_id(uint64_t value) {
  
  hlo_module_id_ = value;
}
inline void OpMetrics::set_hlo_module_id(uint64_t value) {
  _internal_set_hlo_module_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.hlo_module_id)
}

// string name = 6;
inline void OpMetrics::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OpMetrics::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpMetrics::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.name)
}
inline std::string* OpMetrics::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpMetrics.name)
  return _s;
}
inline const std::string& OpMetrics::_internal_name() const {
  return name_.Get();
}
inline void OpMetrics::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpMetrics::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpMetrics::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpMetrics.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpMetrics::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpMetrics.name)
}

// string long_name = 20;
inline void OpMetrics::clear_long_name() {
  long_name_.ClearToEmpty();
}
inline const std::string& OpMetrics::long_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.long_name)
  return _internal_long_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpMetrics::set_long_name(ArgT0&& arg0, ArgT... args) {
 
 long_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.long_name)
}
inline std::string* OpMetrics::mutable_long_name() {
  std::string* _s = _internal_mutable_long_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpMetrics.long_name)
  return _s;
}
inline const std::string& OpMetrics::_internal_long_name() const {
  return long_name_.Get();
}
inline void OpMetrics::_internal_set_long_name(const std::string& value) {
  
  long_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpMetrics::_internal_mutable_long_name() {
  
  return long_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpMetrics::release_long_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpMetrics.long_name)
  return long_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpMetrics::set_allocated_long_name(std::string* long_name) {
  if (long_name != nullptr) {
    
  } else {
    
  }
  long_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), long_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (long_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    long_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpMetrics.long_name)
}

// string category = 11;
inline void OpMetrics::clear_category() {
  category_.ClearToEmpty();
}
inline const std::string& OpMetrics::category() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpMetrics::set_category(ArgT0&& arg0, ArgT... args) {
 
 category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.category)
}
inline std::string* OpMetrics::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpMetrics.category)
  return _s;
}
inline const std::string& OpMetrics::_internal_category() const {
  return category_.Get();
}
inline void OpMetrics::_internal_set_category(const std::string& value) {
  
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpMetrics::_internal_mutable_category() {
  
  return category_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpMetrics::release_category() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpMetrics.category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpMetrics::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (category_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpMetrics.category)
}

// string provenance = 12;
inline void OpMetrics::clear_provenance() {
  provenance_.ClearToEmpty();
}
inline const std::string& OpMetrics::provenance() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.provenance)
  return _internal_provenance();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpMetrics::set_provenance(ArgT0&& arg0, ArgT... args) {
 
 provenance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.provenance)
}
inline std::string* OpMetrics::mutable_provenance() {
  std::string* _s = _internal_mutable_provenance();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpMetrics.provenance)
  return _s;
}
inline const std::string& OpMetrics::_internal_provenance() const {
  return provenance_.Get();
}
inline void OpMetrics::_internal_set_provenance(const std::string& value) {
  
  provenance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpMetrics::_internal_mutable_provenance() {
  
  return provenance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpMetrics::release_provenance() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpMetrics.provenance)
  return provenance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpMetrics::set_allocated_provenance(std::string* provenance) {
  if (provenance != nullptr) {
    
  } else {
    
  }
  provenance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provenance,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (provenance_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    provenance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpMetrics.provenance)
}

// bool is_eager = 18;
inline void OpMetrics::clear_is_eager() {
  is_eager_ = false;
}
inline bool OpMetrics::_internal_is_eager() const {
  return is_eager_;
}
inline bool OpMetrics::is_eager() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.is_eager)
  return _internal_is_eager();
}
inline void OpMetrics::_internal_set_is_eager(bool value) {
  
  is_eager_ = value;
}
inline void OpMetrics::set_is_eager(bool value) {
  _internal_set_is_eager(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.is_eager)
}

// uint32 occurrences = 3;
inline void OpMetrics::clear_occurrences() {
  occurrences_ = 0u;
}
inline uint32_t OpMetrics::_internal_occurrences() const {
  return occurrences_;
}
inline uint32_t OpMetrics::occurrences() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.occurrences)
  return _internal_occurrences();
}
inline void OpMetrics::_internal_set_occurrences(uint32_t value) {
  
  occurrences_ = value;
}
inline void OpMetrics::set_occurrences(uint32_t value) {
  _internal_set_occurrences(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.occurrences)
}

// uint64 time_ps = 7;
inline void OpMetrics::clear_time_ps() {
  time_ps_ = uint64_t{0u};
}
inline uint64_t OpMetrics::_internal_time_ps() const {
  return time_ps_;
}
inline uint64_t OpMetrics::time_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.time_ps)
  return _internal_time_ps();
}
inline void OpMetrics::_internal_set_time_ps(uint64_t value) {
  
  time_ps_ = value;
}
inline void OpMetrics::set_time_ps(uint64_t value) {
  _internal_set_time_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.time_ps)
}

// uint64 min_time_ps = 17;
inline void OpMetrics::clear_min_time_ps() {
  min_time_ps_ = uint64_t{0u};
}
inline uint64_t OpMetrics::_internal_min_time_ps() const {
  return min_time_ps_;
}
inline uint64_t OpMetrics::min_time_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.min_time_ps)
  return _internal_min_time_ps();
}
inline void OpMetrics::_internal_set_min_time_ps(uint64_t value) {
  
  min_time_ps_ = value;
}
inline void OpMetrics::set_min_time_ps(uint64_t value) {
  _internal_set_min_time_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.min_time_ps)
}

// uint64 self_time_ps = 1;
inline void OpMetrics::clear_self_time_ps() {
  self_time_ps_ = uint64_t{0u};
}
inline uint64_t OpMetrics::_internal_self_time_ps() const {
  return self_time_ps_;
}
inline uint64_t OpMetrics::self_time_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.self_time_ps)
  return _internal_self_time_ps();
}
inline void OpMetrics::_internal_set_self_time_ps(uint64_t value) {
  
  self_time_ps_ = value;
}
inline void OpMetrics::set_self_time_ps(uint64_t value) {
  _internal_set_self_time_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.self_time_ps)
}

// uint64 flops = 2;
inline void OpMetrics::clear_flops() {
  flops_ = uint64_t{0u};
}
inline uint64_t OpMetrics::_internal_flops() const {
  return flops_;
}
inline uint64_t OpMetrics::flops() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.flops)
  return _internal_flops();
}
inline void OpMetrics::_internal_set_flops(uint64_t value) {
  
  flops_ = value;
}
inline void OpMetrics::set_flops(uint64_t value) {
  _internal_set_flops(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.flops)
}

// uint64 bytes_accessed = 5;
inline void OpMetrics::clear_bytes_accessed() {
  bytes_accessed_ = uint64_t{0u};
}
inline uint64_t OpMetrics::_internal_bytes_accessed() const {
  return bytes_accessed_;
}
inline uint64_t OpMetrics::bytes_accessed() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.bytes_accessed)
  return _internal_bytes_accessed();
}
inline void OpMetrics::_internal_set_bytes_accessed(uint64_t value) {
  
  bytes_accessed_ = value;
}
inline void OpMetrics::set_bytes_accessed(uint64_t value) {
  _internal_set_bytes_accessed(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.bytes_accessed)
}

// repeated .tensorflow.profiler.OpMetrics.MemoryAccessed memory_accessed_breakdown = 19;
inline int OpMetrics::_internal_memory_accessed_breakdown_size() const {
  return memory_accessed_breakdown_.size();
}
inline int OpMetrics::memory_accessed_breakdown_size() const {
  return _internal_memory_accessed_breakdown_size();
}
inline void OpMetrics::clear_memory_accessed_breakdown() {
  memory_accessed_breakdown_.Clear();
}
inline ::tensorflow::profiler::OpMetrics_MemoryAccessed* OpMetrics::mutable_memory_accessed_breakdown(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpMetrics.memory_accessed_breakdown)
  return memory_accessed_breakdown_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::OpMetrics_MemoryAccessed >*
OpMetrics::mutable_memory_accessed_breakdown() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.OpMetrics.memory_accessed_breakdown)
  return &memory_accessed_breakdown_;
}
inline const ::tensorflow::profiler::OpMetrics_MemoryAccessed& OpMetrics::_internal_memory_accessed_breakdown(int index) const {
  return memory_accessed_breakdown_.Get(index);
}
inline const ::tensorflow::profiler::OpMetrics_MemoryAccessed& OpMetrics::memory_accessed_breakdown(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.memory_accessed_breakdown)
  return _internal_memory_accessed_breakdown(index);
}
inline ::tensorflow::profiler::OpMetrics_MemoryAccessed* OpMetrics::_internal_add_memory_accessed_breakdown() {
  return memory_accessed_breakdown_.Add();
}
inline ::tensorflow::profiler::OpMetrics_MemoryAccessed* OpMetrics::add_memory_accessed_breakdown() {
  ::tensorflow::profiler::OpMetrics_MemoryAccessed* _add = _internal_add_memory_accessed_breakdown();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.OpMetrics.memory_accessed_breakdown)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::OpMetrics_MemoryAccessed >&
OpMetrics::memory_accessed_breakdown() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.OpMetrics.memory_accessed_breakdown)
  return memory_accessed_breakdown_;
}

// uint64 dma_stall_ps = 10;
inline void OpMetrics::clear_dma_stall_ps() {
  dma_stall_ps_ = uint64_t{0u};
}
inline uint64_t OpMetrics::_internal_dma_stall_ps() const {
  return dma_stall_ps_;
}
inline uint64_t OpMetrics::dma_stall_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.dma_stall_ps)
  return _internal_dma_stall_ps();
}
inline void OpMetrics::_internal_set_dma_stall_ps(uint64_t value) {
  
  dma_stall_ps_ = value;
}
inline void OpMetrics::set_dma_stall_ps(uint64_t value) {
  _internal_set_dma_stall_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.dma_stall_ps)
}

// .tensorflow.profiler.LayoutAnalysis layout = 14;
inline bool OpMetrics::_internal_has_layout() const {
  return this != internal_default_instance() && layout_ != nullptr;
}
inline bool OpMetrics::has_layout() const {
  return _internal_has_layout();
}
inline void OpMetrics::clear_layout() {
  if (GetArenaForAllocation() == nullptr && layout_ != nullptr) {
    delete layout_;
  }
  layout_ = nullptr;
}
inline const ::tensorflow::profiler::LayoutAnalysis& OpMetrics::_internal_layout() const {
  const ::tensorflow::profiler::LayoutAnalysis* p = layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::LayoutAnalysis&>(
      ::tensorflow::profiler::_LayoutAnalysis_default_instance_);
}
inline const ::tensorflow::profiler::LayoutAnalysis& OpMetrics::layout() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.layout)
  return _internal_layout();
}
inline void OpMetrics::unsafe_arena_set_allocated_layout(
    ::tensorflow::profiler::LayoutAnalysis* layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_);
  }
  layout_ = layout;
  if (layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpMetrics.layout)
}
inline ::tensorflow::profiler::LayoutAnalysis* OpMetrics::release_layout() {
  
  ::tensorflow::profiler::LayoutAnalysis* temp = layout_;
  layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::LayoutAnalysis* OpMetrics::unsafe_arena_release_layout() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpMetrics.layout)
  
  ::tensorflow::profiler::LayoutAnalysis* temp = layout_;
  layout_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::LayoutAnalysis* OpMetrics::_internal_mutable_layout() {
  
  if (layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::LayoutAnalysis>(GetArenaForAllocation());
    layout_ = p;
  }
  return layout_;
}
inline ::tensorflow::profiler::LayoutAnalysis* OpMetrics::mutable_layout() {
  ::tensorflow::profiler::LayoutAnalysis* _msg = _internal_mutable_layout();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpMetrics.layout)
  return _msg;
}
inline void OpMetrics::set_allocated_layout(::tensorflow::profiler::LayoutAnalysis* layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete layout_;
  }
  if (layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::LayoutAnalysis>::GetOwningArena(layout);
    if (message_arena != submessage_arena) {
      layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layout, submessage_arena);
    }
    
  } else {
    
  }
  layout_ = layout;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpMetrics.layout)
}

// string deduplicated_name = 15;
inline void OpMetrics::clear_deduplicated_name() {
  deduplicated_name_.ClearToEmpty();
}
inline const std::string& OpMetrics::deduplicated_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.deduplicated_name)
  return _internal_deduplicated_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpMetrics::set_deduplicated_name(ArgT0&& arg0, ArgT... args) {
 
 deduplicated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetrics.deduplicated_name)
}
inline std::string* OpMetrics::mutable_deduplicated_name() {
  std::string* _s = _internal_mutable_deduplicated_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpMetrics.deduplicated_name)
  return _s;
}
inline const std::string& OpMetrics::_internal_deduplicated_name() const {
  return deduplicated_name_.Get();
}
inline void OpMetrics::_internal_set_deduplicated_name(const std::string& value) {
  
  deduplicated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpMetrics::_internal_mutable_deduplicated_name() {
  
  return deduplicated_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpMetrics::release_deduplicated_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpMetrics.deduplicated_name)
  return deduplicated_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpMetrics::set_allocated_deduplicated_name(std::string* deduplicated_name) {
  if (deduplicated_name != nullptr) {
    
  } else {
    
  }
  deduplicated_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deduplicated_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deduplicated_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deduplicated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpMetrics.deduplicated_name)
}

// .tensorflow.profiler.OpMetricsDb children = 16;
inline bool OpMetrics::_internal_has_children() const {
  return this != internal_default_instance() && children_ != nullptr;
}
inline bool OpMetrics::has_children() const {
  return _internal_has_children();
}
inline void OpMetrics::clear_children() {
  if (GetArenaForAllocation() == nullptr && children_ != nullptr) {
    delete children_;
  }
  children_ = nullptr;
}
inline const ::tensorflow::profiler::OpMetricsDb& OpMetrics::_internal_children() const {
  const ::tensorflow::profiler::OpMetricsDb* p = children_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::OpMetricsDb&>(
      ::tensorflow::profiler::_OpMetricsDb_default_instance_);
}
inline const ::tensorflow::profiler::OpMetricsDb& OpMetrics::children() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetrics.children)
  return _internal_children();
}
inline void OpMetrics::unsafe_arena_set_allocated_children(
    ::tensorflow::profiler::OpMetricsDb* children) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(children_);
  }
  children_ = children;
  if (children) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpMetrics.children)
}
inline ::tensorflow::profiler::OpMetricsDb* OpMetrics::release_children() {
  
  ::tensorflow::profiler::OpMetricsDb* temp = children_;
  children_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::OpMetricsDb* OpMetrics::unsafe_arena_release_children() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpMetrics.children)
  
  ::tensorflow::profiler::OpMetricsDb* temp = children_;
  children_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::OpMetricsDb* OpMetrics::_internal_mutable_children() {
  
  if (children_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::OpMetricsDb>(GetArenaForAllocation());
    children_ = p;
  }
  return children_;
}
inline ::tensorflow::profiler::OpMetricsDb* OpMetrics::mutable_children() {
  ::tensorflow::profiler::OpMetricsDb* _msg = _internal_mutable_children();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpMetrics.children)
  return _msg;
}
inline void OpMetrics::set_allocated_children(::tensorflow::profiler::OpMetricsDb* children) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete children_;
  }
  if (children) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::OpMetricsDb>::GetOwningArena(children);
    if (message_arena != submessage_arena) {
      children = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, children, submessage_arena);
    }
    
  } else {
    
  }
  children_ = children;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpMetrics.children)
}

// -------------------------------------------------------------------

// PrecisionStats

// uint64 compute_16bit_ps = 1;
inline void PrecisionStats::clear_compute_16bit_ps() {
  compute_16bit_ps_ = uint64_t{0u};
}
inline uint64_t PrecisionStats::_internal_compute_16bit_ps() const {
  return compute_16bit_ps_;
}
inline uint64_t PrecisionStats::compute_16bit_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PrecisionStats.compute_16bit_ps)
  return _internal_compute_16bit_ps();
}
inline void PrecisionStats::_internal_set_compute_16bit_ps(uint64_t value) {
  
  compute_16bit_ps_ = value;
}
inline void PrecisionStats::set_compute_16bit_ps(uint64_t value) {
  _internal_set_compute_16bit_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PrecisionStats.compute_16bit_ps)
}

// uint64 compute_32bit_ps = 2;
inline void PrecisionStats::clear_compute_32bit_ps() {
  compute_32bit_ps_ = uint64_t{0u};
}
inline uint64_t PrecisionStats::_internal_compute_32bit_ps() const {
  return compute_32bit_ps_;
}
inline uint64_t PrecisionStats::compute_32bit_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PrecisionStats.compute_32bit_ps)
  return _internal_compute_32bit_ps();
}
inline void PrecisionStats::_internal_set_compute_32bit_ps(uint64_t value) {
  
  compute_32bit_ps_ = value;
}
inline void PrecisionStats::set_compute_32bit_ps(uint64_t value) {
  _internal_set_compute_32bit_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PrecisionStats.compute_32bit_ps)
}

// -------------------------------------------------------------------

// OpMetricsDb

// repeated .tensorflow.profiler.OpMetrics metrics_db = 10;
inline int OpMetricsDb::_internal_metrics_db_size() const {
  return metrics_db_.size();
}
inline int OpMetricsDb::metrics_db_size() const {
  return _internal_metrics_db_size();
}
inline void OpMetricsDb::clear_metrics_db() {
  metrics_db_.Clear();
}
inline ::tensorflow::profiler::OpMetrics* OpMetricsDb::mutable_metrics_db(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpMetricsDb.metrics_db)
  return metrics_db_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::OpMetrics >*
OpMetricsDb::mutable_metrics_db() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.OpMetricsDb.metrics_db)
  return &metrics_db_;
}
inline const ::tensorflow::profiler::OpMetrics& OpMetricsDb::_internal_metrics_db(int index) const {
  return metrics_db_.Get(index);
}
inline const ::tensorflow::profiler::OpMetrics& OpMetricsDb::metrics_db(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetricsDb.metrics_db)
  return _internal_metrics_db(index);
}
inline ::tensorflow::profiler::OpMetrics* OpMetricsDb::_internal_add_metrics_db() {
  return metrics_db_.Add();
}
inline ::tensorflow::profiler::OpMetrics* OpMetricsDb::add_metrics_db() {
  ::tensorflow::profiler::OpMetrics* _add = _internal_add_metrics_db();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.OpMetricsDb.metrics_db)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::OpMetrics >&
OpMetricsDb::metrics_db() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.OpMetricsDb.metrics_db)
  return metrics_db_;
}

// uint64 total_host_infeed_enq_duration_ps = 2;
inline void OpMetricsDb::clear_total_host_infeed_enq_duration_ps() {
  total_host_infeed_enq_duration_ps_ = uint64_t{0u};
}
inline uint64_t OpMetricsDb::_internal_total_host_infeed_enq_duration_ps() const {
  return total_host_infeed_enq_duration_ps_;
}
inline uint64_t OpMetricsDb::total_host_infeed_enq_duration_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetricsDb.total_host_infeed_enq_duration_ps)
  return _internal_total_host_infeed_enq_duration_ps();
}
inline void OpMetricsDb::_internal_set_total_host_infeed_enq_duration_ps(uint64_t value) {
  
  total_host_infeed_enq_duration_ps_ = value;
}
inline void OpMetricsDb::set_total_host_infeed_enq_duration_ps(uint64_t value) {
  _internal_set_total_host_infeed_enq_duration_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetricsDb.total_host_infeed_enq_duration_ps)
}

// uint64 total_host_infeed_enq_start_timestamp_ps_diff = 3;
inline void OpMetricsDb::clear_total_host_infeed_enq_start_timestamp_ps_diff() {
  total_host_infeed_enq_start_timestamp_ps_diff_ = uint64_t{0u};
}
inline uint64_t OpMetricsDb::_internal_total_host_infeed_enq_start_timestamp_ps_diff() const {
  return total_host_infeed_enq_start_timestamp_ps_diff_;
}
inline uint64_t OpMetricsDb::total_host_infeed_enq_start_timestamp_ps_diff() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetricsDb.total_host_infeed_enq_start_timestamp_ps_diff)
  return _internal_total_host_infeed_enq_start_timestamp_ps_diff();
}
inline void OpMetricsDb::_internal_set_total_host_infeed_enq_start_timestamp_ps_diff(uint64_t value) {
  
  total_host_infeed_enq_start_timestamp_ps_diff_ = value;
}
inline void OpMetricsDb::set_total_host_infeed_enq_start_timestamp_ps_diff(uint64_t value) {
  _internal_set_total_host_infeed_enq_start_timestamp_ps_diff(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetricsDb.total_host_infeed_enq_start_timestamp_ps_diff)
}

// uint64 total_time_ps = 11;
inline void OpMetricsDb::clear_total_time_ps() {
  total_time_ps_ = uint64_t{0u};
}
inline uint64_t OpMetricsDb::_internal_total_time_ps() const {
  return total_time_ps_;
}
inline uint64_t OpMetricsDb::total_time_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetricsDb.total_time_ps)
  return _internal_total_time_ps();
}
inline void OpMetricsDb::_internal_set_total_time_ps(uint64_t value) {
  
  total_time_ps_ = value;
}
inline void OpMetricsDb::set_total_time_ps(uint64_t value) {
  _internal_set_total_time_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetricsDb.total_time_ps)
}

// uint64 total_op_time_ps = 12;
inline void OpMetricsDb::clear_total_op_time_ps() {
  total_op_time_ps_ = uint64_t{0u};
}
inline uint64_t OpMetricsDb::_internal_total_op_time_ps() const {
  return total_op_time_ps_;
}
inline uint64_t OpMetricsDb::total_op_time_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetricsDb.total_op_time_ps)
  return _internal_total_op_time_ps();
}
inline void OpMetricsDb::_internal_set_total_op_time_ps(uint64_t value) {
  
  total_op_time_ps_ = value;
}
inline void OpMetricsDb::set_total_op_time_ps(uint64_t value) {
  _internal_set_total_op_time_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OpMetricsDb.total_op_time_ps)
}

// .tensorflow.profiler.PrecisionStats precision_stats = 13;
inline bool OpMetricsDb::_internal_has_precision_stats() const {
  return this != internal_default_instance() && precision_stats_ != nullptr;
}
inline bool OpMetricsDb::has_precision_stats() const {
  return _internal_has_precision_stats();
}
inline void OpMetricsDb::clear_precision_stats() {
  if (GetArenaForAllocation() == nullptr && precision_stats_ != nullptr) {
    delete precision_stats_;
  }
  precision_stats_ = nullptr;
}
inline const ::tensorflow::profiler::PrecisionStats& OpMetricsDb::_internal_precision_stats() const {
  const ::tensorflow::profiler::PrecisionStats* p = precision_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::PrecisionStats&>(
      ::tensorflow::profiler::_PrecisionStats_default_instance_);
}
inline const ::tensorflow::profiler::PrecisionStats& OpMetricsDb::precision_stats() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpMetricsDb.precision_stats)
  return _internal_precision_stats();
}
inline void OpMetricsDb::unsafe_arena_set_allocated_precision_stats(
    ::tensorflow::profiler::PrecisionStats* precision_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precision_stats_);
  }
  precision_stats_ = precision_stats;
  if (precision_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpMetricsDb.precision_stats)
}
inline ::tensorflow::profiler::PrecisionStats* OpMetricsDb::release_precision_stats() {
  
  ::tensorflow::profiler::PrecisionStats* temp = precision_stats_;
  precision_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::PrecisionStats* OpMetricsDb::unsafe_arena_release_precision_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpMetricsDb.precision_stats)
  
  ::tensorflow::profiler::PrecisionStats* temp = precision_stats_;
  precision_stats_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::PrecisionStats* OpMetricsDb::_internal_mutable_precision_stats() {
  
  if (precision_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::PrecisionStats>(GetArenaForAllocation());
    precision_stats_ = p;
  }
  return precision_stats_;
}
inline ::tensorflow::profiler::PrecisionStats* OpMetricsDb::mutable_precision_stats() {
  ::tensorflow::profiler::PrecisionStats* _msg = _internal_mutable_precision_stats();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpMetricsDb.precision_stats)
  return _msg;
}
inline void OpMetricsDb::set_allocated_precision_stats(::tensorflow::profiler::PrecisionStats* precision_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete precision_stats_;
  }
  if (precision_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::PrecisionStats>::GetOwningArena(precision_stats);
    if (message_arena != submessage_arena) {
      precision_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, precision_stats, submessage_arena);
    }
    
  } else {
    
  }
  precision_stats_ = precision_stats;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpMetricsDb.precision_stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType>() {
  return ::tensorflow::profiler::OpMetrics_MemoryAccessed_OperationType_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::profiler::LayoutDimensionSemantics> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::profiler::LayoutDimensionSemantics>() {
  return ::tensorflow::profiler::LayoutDimensionSemantics_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto
