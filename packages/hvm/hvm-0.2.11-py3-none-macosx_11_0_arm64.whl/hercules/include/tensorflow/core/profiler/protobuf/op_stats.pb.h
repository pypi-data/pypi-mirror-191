// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/op_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/profiler/protobuf/diagnostics.pb.h"
#include "tensorflow/core/profiler/protobuf/kernel_stats.pb.h"
#include "tensorflow/core/profiler/protobuf/op_metrics.pb.h"
#include "tensorflow/core/profiler/protobuf/steps_db.pb.h"
#include "tensorflow/core/profiler/protobuf/tf_function.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
namespace tensorflow {
namespace profiler {
class CoreDetails;
struct CoreDetailsDefaultTypeInternal;
extern CoreDetailsDefaultTypeInternal _CoreDetails_default_instance_;
class HostDependentJobInfoResult;
struct HostDependentJobInfoResultDefaultTypeInternal;
extern HostDependentJobInfoResultDefaultTypeInternal _HostDependentJobInfoResult_default_instance_;
class HostIndependentJobInfoResult;
struct HostIndependentJobInfoResultDefaultTypeInternal;
extern HostIndependentJobInfoResultDefaultTypeInternal _HostIndependentJobInfoResult_default_instance_;
class OpStats;
struct OpStatsDefaultTypeInternal;
extern OpStatsDefaultTypeInternal _OpStats_default_instance_;
class OpStats_CoreIdToDetailsEntry_DoNotUse;
struct OpStats_CoreIdToDetailsEntry_DoNotUseDefaultTypeInternal;
extern OpStats_CoreIdToDetailsEntry_DoNotUseDefaultTypeInternal _OpStats_CoreIdToDetailsEntry_DoNotUse_default_instance_;
class PerfEnv;
struct PerfEnvDefaultTypeInternal;
extern PerfEnvDefaultTypeInternal _PerfEnv_default_instance_;
class RunEnvironment;
struct RunEnvironmentDefaultTypeInternal;
extern RunEnvironmentDefaultTypeInternal _RunEnvironment_default_instance_;
class RunEnvironment_HostnamesEntry_DoNotUse;
struct RunEnvironment_HostnamesEntry_DoNotUseDefaultTypeInternal;
extern RunEnvironment_HostnamesEntry_DoNotUseDefaultTypeInternal _RunEnvironment_HostnamesEntry_DoNotUse_default_instance_;
class SystemTopology;
struct SystemTopologyDefaultTypeInternal;
extern SystemTopologyDefaultTypeInternal _SystemTopology_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::profiler::CoreDetails* Arena::CreateMaybeMessage<::tensorflow::profiler::CoreDetails>(Arena*);
template<> ::tensorflow::profiler::HostDependentJobInfoResult* Arena::CreateMaybeMessage<::tensorflow::profiler::HostDependentJobInfoResult>(Arena*);
template<> ::tensorflow::profiler::HostIndependentJobInfoResult* Arena::CreateMaybeMessage<::tensorflow::profiler::HostIndependentJobInfoResult>(Arena*);
template<> ::tensorflow::profiler::OpStats* Arena::CreateMaybeMessage<::tensorflow::profiler::OpStats>(Arena*);
template<> ::tensorflow::profiler::OpStats_CoreIdToDetailsEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::profiler::OpStats_CoreIdToDetailsEntry_DoNotUse>(Arena*);
template<> ::tensorflow::profiler::PerfEnv* Arena::CreateMaybeMessage<::tensorflow::profiler::PerfEnv>(Arena*);
template<> ::tensorflow::profiler::RunEnvironment* Arena::CreateMaybeMessage<::tensorflow::profiler::RunEnvironment>(Arena*);
template<> ::tensorflow::profiler::RunEnvironment_HostnamesEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::profiler::RunEnvironment_HostnamesEntry_DoNotUse>(Arena*);
template<> ::tensorflow::profiler::SystemTopology* Arena::CreateMaybeMessage<::tensorflow::profiler::SystemTopology>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace profiler {

// ===================================================================

class PerfEnv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.PerfEnv) */ {
 public:
  inline PerfEnv() : PerfEnv(nullptr) {}
  ~PerfEnv() override;
  explicit constexpr PerfEnv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfEnv(const PerfEnv& from);
  PerfEnv(PerfEnv&& from) noexcept
    : PerfEnv() {
    *this = ::std::move(from);
  }

  inline PerfEnv& operator=(const PerfEnv& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEnv& operator=(PerfEnv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerfEnv& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfEnv* internal_default_instance() {
    return reinterpret_cast<const PerfEnv*>(
               &_PerfEnv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfEnv& a, PerfEnv& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEnv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfEnv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfEnv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfEnv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerfEnv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerfEnv& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfEnv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.PerfEnv";
  }
  protected:
  explicit PerfEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeakTeraFlopsPerSecondFieldNumber = 1,
    kPeakHbmBwGigaBytesPerSecondFieldNumber = 2,
    kRidgePointFieldNumber = 3,
  };
  // double peak_tera_flops_per_second = 1;
  void clear_peak_tera_flops_per_second();
  double peak_tera_flops_per_second() const;
  void set_peak_tera_flops_per_second(double value);
  private:
  double _internal_peak_tera_flops_per_second() const;
  void _internal_set_peak_tera_flops_per_second(double value);
  public:

  // double peak_hbm_bw_giga_bytes_per_second = 2;
  void clear_peak_hbm_bw_giga_bytes_per_second();
  double peak_hbm_bw_giga_bytes_per_second() const;
  void set_peak_hbm_bw_giga_bytes_per_second(double value);
  private:
  double _internal_peak_hbm_bw_giga_bytes_per_second() const;
  void _internal_set_peak_hbm_bw_giga_bytes_per_second(double value);
  public:

  // double ridge_point = 3;
  void clear_ridge_point();
  double ridge_point() const;
  void set_ridge_point(double value);
  private:
  double _internal_ridge_point() const;
  void _internal_set_ridge_point(double value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.PerfEnv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double peak_tera_flops_per_second_;
  double peak_hbm_bw_giga_bytes_per_second_;
  double ridge_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
};
// -------------------------------------------------------------------

class HostIndependentJobInfoResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.HostIndependentJobInfoResult) */ {
 public:
  inline HostIndependentJobInfoResult() : HostIndependentJobInfoResult(nullptr) {}
  ~HostIndependentJobInfoResult() override;
  explicit constexpr HostIndependentJobInfoResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostIndependentJobInfoResult(const HostIndependentJobInfoResult& from);
  HostIndependentJobInfoResult(HostIndependentJobInfoResult&& from) noexcept
    : HostIndependentJobInfoResult() {
    *this = ::std::move(from);
  }

  inline HostIndependentJobInfoResult& operator=(const HostIndependentJobInfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostIndependentJobInfoResult& operator=(HostIndependentJobInfoResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostIndependentJobInfoResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostIndependentJobInfoResult* internal_default_instance() {
    return reinterpret_cast<const HostIndependentJobInfoResult*>(
               &_HostIndependentJobInfoResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HostIndependentJobInfoResult& a, HostIndependentJobInfoResult& b) {
    a.Swap(&b);
  }
  inline void Swap(HostIndependentJobInfoResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostIndependentJobInfoResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostIndependentJobInfoResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostIndependentJobInfoResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostIndependentJobInfoResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HostIndependentJobInfoResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostIndependentJobInfoResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.HostIndependentJobInfoResult";
  }
  protected:
  explicit HostIndependentJobInfoResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildTargetFieldNumber = 3,
    kChangeListFieldNumber = 1,
    kBuildTimeFieldNumber = 2,
    kProfileDurationMsFieldNumber = 4,
  };
  // string build_target = 3;
  void clear_build_target();
  const std::string& build_target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_build_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_build_target();
  PROTOBUF_NODISCARD std::string* release_build_target();
  void set_allocated_build_target(std::string* build_target);
  private:
  const std::string& _internal_build_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build_target(const std::string& value);
  std::string* _internal_mutable_build_target();
  public:

  // int64 change_list = 1;
  void clear_change_list();
  int64_t change_list() const;
  void set_change_list(int64_t value);
  private:
  int64_t _internal_change_list() const;
  void _internal_set_change_list(int64_t value);
  public:

  // int64 build_time = 2;
  void clear_build_time();
  int64_t build_time() const;
  void set_build_time(int64_t value);
  private:
  int64_t _internal_build_time() const;
  void _internal_set_build_time(int64_t value);
  public:

  // uint32 profile_duration_ms = 4;
  void clear_profile_duration_ms();
  uint32_t profile_duration_ms() const;
  void set_profile_duration_ms(uint32_t value);
  private:
  uint32_t _internal_profile_duration_ms() const;
  void _internal_set_profile_duration_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.HostIndependentJobInfoResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_target_;
  int64_t change_list_;
  int64_t build_time_;
  uint32_t profile_duration_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
};
// -------------------------------------------------------------------

class HostDependentJobInfoResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.HostDependentJobInfoResult) */ {
 public:
  inline HostDependentJobInfoResult() : HostDependentJobInfoResult(nullptr) {}
  ~HostDependentJobInfoResult() override;
  explicit constexpr HostDependentJobInfoResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostDependentJobInfoResult(const HostDependentJobInfoResult& from);
  HostDependentJobInfoResult(HostDependentJobInfoResult&& from) noexcept
    : HostDependentJobInfoResult() {
    *this = ::std::move(from);
  }

  inline HostDependentJobInfoResult& operator=(const HostDependentJobInfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostDependentJobInfoResult& operator=(HostDependentJobInfoResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostDependentJobInfoResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostDependentJobInfoResult* internal_default_instance() {
    return reinterpret_cast<const HostDependentJobInfoResult*>(
               &_HostDependentJobInfoResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HostDependentJobInfoResult& a, HostDependentJobInfoResult& b) {
    a.Swap(&b);
  }
  inline void Swap(HostDependentJobInfoResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostDependentJobInfoResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostDependentJobInfoResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostDependentJobInfoResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostDependentJobInfoResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HostDependentJobInfoResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostDependentJobInfoResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.HostDependentJobInfoResult";
  }
  protected:
  explicit HostDependentJobInfoResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostIdFieldNumber = 1,
    kCommandLineFieldNumber = 2,
    kBnsAddressFieldNumber = 4,
    kStartTimeFieldNumber = 3,
    kProfileTimeNsFieldNumber = 5,
  };
  // string host_id = 1;
  void clear_host_id();
  const std::string& host_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_id();
  PROTOBUF_NODISCARD std::string* release_host_id();
  void set_allocated_host_id(std::string* host_id);
  private:
  const std::string& _internal_host_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_id(const std::string& value);
  std::string* _internal_mutable_host_id();
  public:

  // string command_line = 2;
  void clear_command_line();
  const std::string& command_line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command_line();
  PROTOBUF_NODISCARD std::string* release_command_line();
  void set_allocated_command_line(std::string* command_line);
  private:
  const std::string& _internal_command_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command_line(const std::string& value);
  std::string* _internal_mutable_command_line();
  public:

  // string bns_address = 4;
  void clear_bns_address();
  const std::string& bns_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bns_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bns_address();
  PROTOBUF_NODISCARD std::string* release_bns_address();
  void set_allocated_bns_address(std::string* bns_address);
  private:
  const std::string& _internal_bns_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bns_address(const std::string& value);
  std::string* _internal_mutable_bns_address();
  public:

  // int64 start_time = 3;
  void clear_start_time();
  int64_t start_time() const;
  void set_start_time(int64_t value);
  private:
  int64_t _internal_start_time() const;
  void _internal_set_start_time(int64_t value);
  public:

  // uint64 profile_time_ns = 5;
  void clear_profile_time_ns();
  uint64_t profile_time_ns() const;
  void set_profile_time_ns(uint64_t value);
  private:
  uint64_t _internal_profile_time_ns() const;
  void _internal_set_profile_time_ns(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.HostDependentJobInfoResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_line_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bns_address_;
  int64_t start_time_;
  uint64_t profile_time_ns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SystemTopology final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.SystemTopology) */ {
 public:
  inline SystemTopology() : SystemTopology(nullptr) {}
  ~SystemTopology() override;
  explicit constexpr SystemTopology(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemTopology(const SystemTopology& from);
  SystemTopology(SystemTopology&& from) noexcept
    : SystemTopology() {
    *this = ::std::move(from);
  }

  inline SystemTopology& operator=(const SystemTopology& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemTopology& operator=(SystemTopology&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemTopology& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemTopology* internal_default_instance() {
    return reinterpret_cast<const SystemTopology*>(
               &_SystemTopology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SystemTopology& a, SystemTopology& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemTopology* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemTopology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemTopology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemTopology>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemTopology& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SystemTopology& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemTopology* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.SystemTopology";
  }
  protected:
  explicit SystemTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXDimensionFieldNumber = 1,
    kYDimensionFieldNumber = 2,
    kZDimensionFieldNumber = 3,
    kNumExpectedReducedChipsFieldNumber = 4,
  };
  // int64 x_dimension = 1;
  void clear_x_dimension();
  int64_t x_dimension() const;
  void set_x_dimension(int64_t value);
  private:
  int64_t _internal_x_dimension() const;
  void _internal_set_x_dimension(int64_t value);
  public:

  // int64 y_dimension = 2;
  void clear_y_dimension();
  int64_t y_dimension() const;
  void set_y_dimension(int64_t value);
  private:
  int64_t _internal_y_dimension() const;
  void _internal_set_y_dimension(int64_t value);
  public:

  // int64 z_dimension = 3;
  void clear_z_dimension();
  int64_t z_dimension() const;
  void set_z_dimension(int64_t value);
  private:
  int64_t _internal_z_dimension() const;
  void _internal_set_z_dimension(int64_t value);
  public:

  // int64 num_expected_reduced_chips = 4;
  void clear_num_expected_reduced_chips();
  int64_t num_expected_reduced_chips() const;
  void set_num_expected_reduced_chips(int64_t value);
  private:
  int64_t _internal_num_expected_reduced_chips() const;
  void _internal_set_num_expected_reduced_chips(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.SystemTopology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t x_dimension_;
  int64_t y_dimension_;
  int64_t z_dimension_;
  int64_t num_expected_reduced_chips_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
};
// -------------------------------------------------------------------

class RunEnvironment_HostnamesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RunEnvironment_HostnamesEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RunEnvironment_HostnamesEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  RunEnvironment_HostnamesEntry_DoNotUse();
  explicit constexpr RunEnvironment_HostnamesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RunEnvironment_HostnamesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RunEnvironment_HostnamesEntry_DoNotUse& other);
  static const RunEnvironment_HostnamesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RunEnvironment_HostnamesEntry_DoNotUse*>(&_RunEnvironment_HostnamesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tensorflow.profiler.RunEnvironment.HostnamesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class RunEnvironment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.RunEnvironment) */ {
 public:
  inline RunEnvironment() : RunEnvironment(nullptr) {}
  ~RunEnvironment() override;
  explicit constexpr RunEnvironment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunEnvironment(const RunEnvironment& from);
  RunEnvironment(RunEnvironment&& from) noexcept
    : RunEnvironment() {
    *this = ::std::move(from);
  }

  inline RunEnvironment& operator=(const RunEnvironment& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunEnvironment& operator=(RunEnvironment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunEnvironment& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunEnvironment* internal_default_instance() {
    return reinterpret_cast<const RunEnvironment*>(
               &_RunEnvironment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RunEnvironment& a, RunEnvironment& b) {
    a.Swap(&b);
  }
  inline void Swap(RunEnvironment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunEnvironment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunEnvironment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunEnvironment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunEnvironment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RunEnvironment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunEnvironment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.RunEnvironment";
  }
  protected:
  explicit RunEnvironment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHostnamesFieldNumber = 3,
    kHostDependentJobInfoFieldNumber = 8,
    kDeviceTypeFieldNumber = 4,
    kHostIndependentJobInfoFieldNumber = 7,
    kTopologyFieldNumber = 11,
    kHostCountFieldNumber = 1,
    kTaskCountFieldNumber = 2,
    kDeviceCoreCountFieldNumber = 5,
    kPerCoreBatchSizeFieldNumber = 6,
    kReplicaCountFieldNumber = 9,
    kNumCoresPerReplicaFieldNumber = 10,
    kHostTraceLevelFieldNumber = 12,
  };
  // map<string, bool> hostnames = 3;
  int hostnames_size() const;
  private:
  int _internal_hostnames_size() const;
  public:
  void clear_hostnames();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      _internal_hostnames() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      _internal_mutable_hostnames();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      hostnames() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      mutable_hostnames();

  // repeated .tensorflow.profiler.HostDependentJobInfoResult host_dependent_job_info = 8;
  int host_dependent_job_info_size() const;
  private:
  int _internal_host_dependent_job_info_size() const;
  public:
  void clear_host_dependent_job_info();
  ::tensorflow::profiler::HostDependentJobInfoResult* mutable_host_dependent_job_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::HostDependentJobInfoResult >*
      mutable_host_dependent_job_info();
  private:
  const ::tensorflow::profiler::HostDependentJobInfoResult& _internal_host_dependent_job_info(int index) const;
  ::tensorflow::profiler::HostDependentJobInfoResult* _internal_add_host_dependent_job_info();
  public:
  const ::tensorflow::profiler::HostDependentJobInfoResult& host_dependent_job_info(int index) const;
  ::tensorflow::profiler::HostDependentJobInfoResult* add_host_dependent_job_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::HostDependentJobInfoResult >&
      host_dependent_job_info() const;

  // string device_type = 4;
  void clear_device_type();
  const std::string& device_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_type();
  PROTOBUF_NODISCARD std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // .tensorflow.profiler.HostIndependentJobInfoResult host_independent_job_info = 7;
  bool has_host_independent_job_info() const;
  private:
  bool _internal_has_host_independent_job_info() const;
  public:
  void clear_host_independent_job_info();
  const ::tensorflow::profiler::HostIndependentJobInfoResult& host_independent_job_info() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::HostIndependentJobInfoResult* release_host_independent_job_info();
  ::tensorflow::profiler::HostIndependentJobInfoResult* mutable_host_independent_job_info();
  void set_allocated_host_independent_job_info(::tensorflow::profiler::HostIndependentJobInfoResult* host_independent_job_info);
  private:
  const ::tensorflow::profiler::HostIndependentJobInfoResult& _internal_host_independent_job_info() const;
  ::tensorflow::profiler::HostIndependentJobInfoResult* _internal_mutable_host_independent_job_info();
  public:
  void unsafe_arena_set_allocated_host_independent_job_info(
      ::tensorflow::profiler::HostIndependentJobInfoResult* host_independent_job_info);
  ::tensorflow::profiler::HostIndependentJobInfoResult* unsafe_arena_release_host_independent_job_info();

  // .tensorflow.profiler.SystemTopology topology = 11;
  bool has_topology() const;
  private:
  bool _internal_has_topology() const;
  public:
  void clear_topology();
  const ::tensorflow::profiler::SystemTopology& topology() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::SystemTopology* release_topology();
  ::tensorflow::profiler::SystemTopology* mutable_topology();
  void set_allocated_topology(::tensorflow::profiler::SystemTopology* topology);
  private:
  const ::tensorflow::profiler::SystemTopology& _internal_topology() const;
  ::tensorflow::profiler::SystemTopology* _internal_mutable_topology();
  public:
  void unsafe_arena_set_allocated_topology(
      ::tensorflow::profiler::SystemTopology* topology);
  ::tensorflow::profiler::SystemTopology* unsafe_arena_release_topology();

  // int32 host_count = 1;
  void clear_host_count();
  int32_t host_count() const;
  void set_host_count(int32_t value);
  private:
  int32_t _internal_host_count() const;
  void _internal_set_host_count(int32_t value);
  public:

  // int32 task_count = 2;
  void clear_task_count();
  int32_t task_count() const;
  void set_task_count(int32_t value);
  private:
  int32_t _internal_task_count() const;
  void _internal_set_task_count(int32_t value);
  public:

  // int32 device_core_count = 5;
  void clear_device_core_count();
  int32_t device_core_count() const;
  void set_device_core_count(int32_t value);
  private:
  int32_t _internal_device_core_count() const;
  void _internal_set_device_core_count(int32_t value);
  public:

  // int32 per_core_batch_size = 6;
  void clear_per_core_batch_size();
  int32_t per_core_batch_size() const;
  void set_per_core_batch_size(int32_t value);
  private:
  int32_t _internal_per_core_batch_size() const;
  void _internal_set_per_core_batch_size(int32_t value);
  public:

  // int32 replica_count = 9;
  void clear_replica_count();
  int32_t replica_count() const;
  void set_replica_count(int32_t value);
  private:
  int32_t _internal_replica_count() const;
  void _internal_set_replica_count(int32_t value);
  public:

  // int32 num_cores_per_replica = 10;
  void clear_num_cores_per_replica();
  int32_t num_cores_per_replica() const;
  void set_num_cores_per_replica(int32_t value);
  private:
  int32_t _internal_num_cores_per_replica() const;
  void _internal_set_num_cores_per_replica(int32_t value);
  public:

  // uint32 host_trace_level = 12;
  void clear_host_trace_level();
  uint32_t host_trace_level() const;
  void set_host_trace_level(uint32_t value);
  private:
  uint32_t _internal_host_trace_level() const;
  void _internal_set_host_trace_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.RunEnvironment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RunEnvironment_HostnamesEntry_DoNotUse,
      std::string, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> hostnames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::HostDependentJobInfoResult > host_dependent_job_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
  ::tensorflow::profiler::HostIndependentJobInfoResult* host_independent_job_info_;
  ::tensorflow::profiler::SystemTopology* topology_;
  int32_t host_count_;
  int32_t task_count_;
  int32_t device_core_count_;
  int32_t per_core_batch_size_;
  int32_t replica_count_;
  int32_t num_cores_per_replica_;
  uint32_t host_trace_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
};
// -------------------------------------------------------------------

class CoreDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.CoreDetails) */ {
 public:
  inline CoreDetails() : CoreDetails(nullptr) {}
  ~CoreDetails() override;
  explicit constexpr CoreDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoreDetails(const CoreDetails& from);
  CoreDetails(CoreDetails&& from) noexcept
    : CoreDetails() {
    *this = ::std::move(from);
  }

  inline CoreDetails& operator=(const CoreDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoreDetails& operator=(CoreDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoreDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoreDetails* internal_default_instance() {
    return reinterpret_cast<const CoreDetails*>(
               &_CoreDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CoreDetails& a, CoreDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CoreDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoreDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoreDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CoreDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoreDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CoreDetails& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoreDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.CoreDetails";
  }
  protected:
  explicit CoreDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kDeviceOrdinalFieldNumber = 2,
    kCoreNumFieldNumber = 3,
    kLocalChipIdFieldNumber = 4,
    kGlobalChipIdFieldNumber = 5,
    kGlobalCoreIdFieldNumber = 6,
  };
  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // uint32 device_ordinal = 2;
  void clear_device_ordinal();
  uint32_t device_ordinal() const;
  void set_device_ordinal(uint32_t value);
  private:
  uint32_t _internal_device_ordinal() const;
  void _internal_set_device_ordinal(uint32_t value);
  public:

  // uint32 core_num = 3;
  void clear_core_num();
  uint32_t core_num() const;
  void set_core_num(uint32_t value);
  private:
  uint32_t _internal_core_num() const;
  void _internal_set_core_num(uint32_t value);
  public:

  // uint32 local_chip_id = 4;
  void clear_local_chip_id();
  uint32_t local_chip_id() const;
  void set_local_chip_id(uint32_t value);
  private:
  uint32_t _internal_local_chip_id() const;
  void _internal_set_local_chip_id(uint32_t value);
  public:

  // uint32 global_chip_id = 5;
  void clear_global_chip_id();
  uint32_t global_chip_id() const;
  void set_global_chip_id(uint32_t value);
  private:
  uint32_t _internal_global_chip_id() const;
  void _internal_set_global_chip_id(uint32_t value);
  public:

  // uint32 global_core_id = 6;
  void clear_global_core_id();
  uint32_t global_core_id() const;
  void set_global_core_id(uint32_t value);
  private:
  uint32_t _internal_global_core_id() const;
  void _internal_set_global_core_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.CoreDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  uint32_t device_ordinal_;
  uint32_t core_num_;
  uint32_t local_chip_id_;
  uint32_t global_chip_id_;
  uint32_t global_core_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
};
// -------------------------------------------------------------------

class OpStats_CoreIdToDetailsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpStats_CoreIdToDetailsEntry_DoNotUse, 
    uint32_t, ::tensorflow::profiler::CoreDetails,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpStats_CoreIdToDetailsEntry_DoNotUse, 
    uint32_t, ::tensorflow::profiler::CoreDetails,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  OpStats_CoreIdToDetailsEntry_DoNotUse();
  explicit constexpr OpStats_CoreIdToDetailsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OpStats_CoreIdToDetailsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OpStats_CoreIdToDetailsEntry_DoNotUse& other);
  static const OpStats_CoreIdToDetailsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OpStats_CoreIdToDetailsEntry_DoNotUse*>(&_OpStats_CoreIdToDetailsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class OpStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OpStats) */ {
 public:
  inline OpStats() : OpStats(nullptr) {}
  ~OpStats() override;
  explicit constexpr OpStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpStats(const OpStats& from);
  OpStats(OpStats&& from) noexcept
    : OpStats() {
    *this = ::std::move(from);
  }

  inline OpStats& operator=(const OpStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpStats& operator=(OpStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpStats* internal_default_instance() {
    return reinterpret_cast<const OpStats*>(
               &_OpStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OpStats& a, OpStats& b) {
    a.Swap(&b);
  }
  inline void Swap(OpStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.OpStats";
  }
  protected:
  explicit OpStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCoreIdToDetailsFieldNumber = 11,
    kHostOpMetricsDbFieldNumber = 1,
    kDeviceOpMetricsDbFieldNumber = 2,
    kPerfEnvFieldNumber = 3,
    kStepDbFieldNumber = 4,
    kRunEnvironmentFieldNumber = 5,
    kKernelStatsDbFieldNumber = 6,
    kTfFunctionDbFieldNumber = 8,
    kDiagnosticsFieldNumber = 9,
    kHloMetricsDbCompleteStepsOnlyFieldNumber = 10,
  };
  // map<uint32, .tensorflow.profiler.CoreDetails> core_id_to_details = 11;
  int core_id_to_details_size() const;
  private:
  int _internal_core_id_to_details_size() const;
  public:
  void clear_core_id_to_details();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tensorflow::profiler::CoreDetails >&
      _internal_core_id_to_details() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tensorflow::profiler::CoreDetails >*
      _internal_mutable_core_id_to_details();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tensorflow::profiler::CoreDetails >&
      core_id_to_details() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tensorflow::profiler::CoreDetails >*
      mutable_core_id_to_details();

  // .tensorflow.profiler.OpMetricsDb host_op_metrics_db = 1;
  bool has_host_op_metrics_db() const;
  private:
  bool _internal_has_host_op_metrics_db() const;
  public:
  void clear_host_op_metrics_db();
  const ::tensorflow::profiler::OpMetricsDb& host_op_metrics_db() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::OpMetricsDb* release_host_op_metrics_db();
  ::tensorflow::profiler::OpMetricsDb* mutable_host_op_metrics_db();
  void set_allocated_host_op_metrics_db(::tensorflow::profiler::OpMetricsDb* host_op_metrics_db);
  private:
  const ::tensorflow::profiler::OpMetricsDb& _internal_host_op_metrics_db() const;
  ::tensorflow::profiler::OpMetricsDb* _internal_mutable_host_op_metrics_db();
  public:
  void unsafe_arena_set_allocated_host_op_metrics_db(
      ::tensorflow::profiler::OpMetricsDb* host_op_metrics_db);
  ::tensorflow::profiler::OpMetricsDb* unsafe_arena_release_host_op_metrics_db();

  // .tensorflow.profiler.OpMetricsDb device_op_metrics_db = 2;
  bool has_device_op_metrics_db() const;
  private:
  bool _internal_has_device_op_metrics_db() const;
  public:
  void clear_device_op_metrics_db();
  const ::tensorflow::profiler::OpMetricsDb& device_op_metrics_db() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::OpMetricsDb* release_device_op_metrics_db();
  ::tensorflow::profiler::OpMetricsDb* mutable_device_op_metrics_db();
  void set_allocated_device_op_metrics_db(::tensorflow::profiler::OpMetricsDb* device_op_metrics_db);
  private:
  const ::tensorflow::profiler::OpMetricsDb& _internal_device_op_metrics_db() const;
  ::tensorflow::profiler::OpMetricsDb* _internal_mutable_device_op_metrics_db();
  public:
  void unsafe_arena_set_allocated_device_op_metrics_db(
      ::tensorflow::profiler::OpMetricsDb* device_op_metrics_db);
  ::tensorflow::profiler::OpMetricsDb* unsafe_arena_release_device_op_metrics_db();

  // .tensorflow.profiler.PerfEnv perf_env = 3;
  bool has_perf_env() const;
  private:
  bool _internal_has_perf_env() const;
  public:
  void clear_perf_env();
  const ::tensorflow::profiler::PerfEnv& perf_env() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::PerfEnv* release_perf_env();
  ::tensorflow::profiler::PerfEnv* mutable_perf_env();
  void set_allocated_perf_env(::tensorflow::profiler::PerfEnv* perf_env);
  private:
  const ::tensorflow::profiler::PerfEnv& _internal_perf_env() const;
  ::tensorflow::profiler::PerfEnv* _internal_mutable_perf_env();
  public:
  void unsafe_arena_set_allocated_perf_env(
      ::tensorflow::profiler::PerfEnv* perf_env);
  ::tensorflow::profiler::PerfEnv* unsafe_arena_release_perf_env();

  // .tensorflow.profiler.StepDatabaseResult step_db = 4;
  bool has_step_db() const;
  private:
  bool _internal_has_step_db() const;
  public:
  void clear_step_db();
  const ::tensorflow::profiler::StepDatabaseResult& step_db() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::StepDatabaseResult* release_step_db();
  ::tensorflow::profiler::StepDatabaseResult* mutable_step_db();
  void set_allocated_step_db(::tensorflow::profiler::StepDatabaseResult* step_db);
  private:
  const ::tensorflow::profiler::StepDatabaseResult& _internal_step_db() const;
  ::tensorflow::profiler::StepDatabaseResult* _internal_mutable_step_db();
  public:
  void unsafe_arena_set_allocated_step_db(
      ::tensorflow::profiler::StepDatabaseResult* step_db);
  ::tensorflow::profiler::StepDatabaseResult* unsafe_arena_release_step_db();

  // .tensorflow.profiler.RunEnvironment run_environment = 5;
  bool has_run_environment() const;
  private:
  bool _internal_has_run_environment() const;
  public:
  void clear_run_environment();
  const ::tensorflow::profiler::RunEnvironment& run_environment() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::RunEnvironment* release_run_environment();
  ::tensorflow::profiler::RunEnvironment* mutable_run_environment();
  void set_allocated_run_environment(::tensorflow::profiler::RunEnvironment* run_environment);
  private:
  const ::tensorflow::profiler::RunEnvironment& _internal_run_environment() const;
  ::tensorflow::profiler::RunEnvironment* _internal_mutable_run_environment();
  public:
  void unsafe_arena_set_allocated_run_environment(
      ::tensorflow::profiler::RunEnvironment* run_environment);
  ::tensorflow::profiler::RunEnvironment* unsafe_arena_release_run_environment();

  // .tensorflow.profiler.KernelStatsDb kernel_stats_db = 6;
  bool has_kernel_stats_db() const;
  private:
  bool _internal_has_kernel_stats_db() const;
  public:
  void clear_kernel_stats_db();
  const ::tensorflow::profiler::KernelStatsDb& kernel_stats_db() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::KernelStatsDb* release_kernel_stats_db();
  ::tensorflow::profiler::KernelStatsDb* mutable_kernel_stats_db();
  void set_allocated_kernel_stats_db(::tensorflow::profiler::KernelStatsDb* kernel_stats_db);
  private:
  const ::tensorflow::profiler::KernelStatsDb& _internal_kernel_stats_db() const;
  ::tensorflow::profiler::KernelStatsDb* _internal_mutable_kernel_stats_db();
  public:
  void unsafe_arena_set_allocated_kernel_stats_db(
      ::tensorflow::profiler::KernelStatsDb* kernel_stats_db);
  ::tensorflow::profiler::KernelStatsDb* unsafe_arena_release_kernel_stats_db();

  // .tensorflow.profiler.TfFunctionDb tf_function_db = 8;
  bool has_tf_function_db() const;
  private:
  bool _internal_has_tf_function_db() const;
  public:
  void clear_tf_function_db();
  const ::tensorflow::profiler::TfFunctionDb& tf_function_db() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::TfFunctionDb* release_tf_function_db();
  ::tensorflow::profiler::TfFunctionDb* mutable_tf_function_db();
  void set_allocated_tf_function_db(::tensorflow::profiler::TfFunctionDb* tf_function_db);
  private:
  const ::tensorflow::profiler::TfFunctionDb& _internal_tf_function_db() const;
  ::tensorflow::profiler::TfFunctionDb* _internal_mutable_tf_function_db();
  public:
  void unsafe_arena_set_allocated_tf_function_db(
      ::tensorflow::profiler::TfFunctionDb* tf_function_db);
  ::tensorflow::profiler::TfFunctionDb* unsafe_arena_release_tf_function_db();

  // .tensorflow.profiler.Diagnostics diagnostics = 9;
  bool has_diagnostics() const;
  private:
  bool _internal_has_diagnostics() const;
  public:
  void clear_diagnostics();
  const ::tensorflow::profiler::Diagnostics& diagnostics() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::Diagnostics* release_diagnostics();
  ::tensorflow::profiler::Diagnostics* mutable_diagnostics();
  void set_allocated_diagnostics(::tensorflow::profiler::Diagnostics* diagnostics);
  private:
  const ::tensorflow::profiler::Diagnostics& _internal_diagnostics() const;
  ::tensorflow::profiler::Diagnostics* _internal_mutable_diagnostics();
  public:
  void unsafe_arena_set_allocated_diagnostics(
      ::tensorflow::profiler::Diagnostics* diagnostics);
  ::tensorflow::profiler::Diagnostics* unsafe_arena_release_diagnostics();

  // .tensorflow.profiler.OpMetricsDb hlo_metrics_db_complete_steps_only = 10;
  bool has_hlo_metrics_db_complete_steps_only() const;
  private:
  bool _internal_has_hlo_metrics_db_complete_steps_only() const;
  public:
  void clear_hlo_metrics_db_complete_steps_only();
  const ::tensorflow::profiler::OpMetricsDb& hlo_metrics_db_complete_steps_only() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::OpMetricsDb* release_hlo_metrics_db_complete_steps_only();
  ::tensorflow::profiler::OpMetricsDb* mutable_hlo_metrics_db_complete_steps_only();
  void set_allocated_hlo_metrics_db_complete_steps_only(::tensorflow::profiler::OpMetricsDb* hlo_metrics_db_complete_steps_only);
  private:
  const ::tensorflow::profiler::OpMetricsDb& _internal_hlo_metrics_db_complete_steps_only() const;
  ::tensorflow::profiler::OpMetricsDb* _internal_mutable_hlo_metrics_db_complete_steps_only();
  public:
  void unsafe_arena_set_allocated_hlo_metrics_db_complete_steps_only(
      ::tensorflow::profiler::OpMetricsDb* hlo_metrics_db_complete_steps_only);
  ::tensorflow::profiler::OpMetricsDb* unsafe_arena_release_hlo_metrics_db_complete_steps_only();

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OpStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OpStats_CoreIdToDetailsEntry_DoNotUse,
      uint32_t, ::tensorflow::profiler::CoreDetails,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> core_id_to_details_;
  ::tensorflow::profiler::OpMetricsDb* host_op_metrics_db_;
  ::tensorflow::profiler::OpMetricsDb* device_op_metrics_db_;
  ::tensorflow::profiler::PerfEnv* perf_env_;
  ::tensorflow::profiler::StepDatabaseResult* step_db_;
  ::tensorflow::profiler::RunEnvironment* run_environment_;
  ::tensorflow::profiler::KernelStatsDb* kernel_stats_db_;
  ::tensorflow::profiler::TfFunctionDb* tf_function_db_;
  ::tensorflow::profiler::Diagnostics* diagnostics_;
  ::tensorflow::profiler::OpMetricsDb* hlo_metrics_db_complete_steps_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerfEnv

// double peak_tera_flops_per_second = 1;
inline void PerfEnv::clear_peak_tera_flops_per_second() {
  peak_tera_flops_per_second_ = 0;
}
inline double PerfEnv::_internal_peak_tera_flops_per_second() const {
  return peak_tera_flops_per_second_;
}
inline double PerfEnv::peak_tera_flops_per_second() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerfEnv.peak_tera_flops_per_second)
  return _internal_peak_tera_flops_per_second();
}
inline void PerfEnv::_internal_set_peak_tera_flops_per_second(double value) {
  
  peak_tera_flops_per_second_ = value;
}
inline void PerfEnv::set_peak_tera_flops_per_second(double value) {
  _internal_set_peak_tera_flops_per_second(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PerfEnv.peak_tera_flops_per_second)
}

// double peak_hbm_bw_giga_bytes_per_second = 2;
inline void PerfEnv::clear_peak_hbm_bw_giga_bytes_per_second() {
  peak_hbm_bw_giga_bytes_per_second_ = 0;
}
inline double PerfEnv::_internal_peak_hbm_bw_giga_bytes_per_second() const {
  return peak_hbm_bw_giga_bytes_per_second_;
}
inline double PerfEnv::peak_hbm_bw_giga_bytes_per_second() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerfEnv.peak_hbm_bw_giga_bytes_per_second)
  return _internal_peak_hbm_bw_giga_bytes_per_second();
}
inline void PerfEnv::_internal_set_peak_hbm_bw_giga_bytes_per_second(double value) {
  
  peak_hbm_bw_giga_bytes_per_second_ = value;
}
inline void PerfEnv::set_peak_hbm_bw_giga_bytes_per_second(double value) {
  _internal_set_peak_hbm_bw_giga_bytes_per_second(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PerfEnv.peak_hbm_bw_giga_bytes_per_second)
}

// double ridge_point = 3;
inline void PerfEnv::clear_ridge_point() {
  ridge_point_ = 0;
}
inline double PerfEnv::_internal_ridge_point() const {
  return ridge_point_;
}
inline double PerfEnv::ridge_point() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerfEnv.ridge_point)
  return _internal_ridge_point();
}
inline void PerfEnv::_internal_set_ridge_point(double value) {
  
  ridge_point_ = value;
}
inline void PerfEnv::set_ridge_point(double value) {
  _internal_set_ridge_point(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PerfEnv.ridge_point)
}

// -------------------------------------------------------------------

// HostIndependentJobInfoResult

// int64 change_list = 1;
inline void HostIndependentJobInfoResult::clear_change_list() {
  change_list_ = int64_t{0};
}
inline int64_t HostIndependentJobInfoResult::_internal_change_list() const {
  return change_list_;
}
inline int64_t HostIndependentJobInfoResult::change_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.HostIndependentJobInfoResult.change_list)
  return _internal_change_list();
}
inline void HostIndependentJobInfoResult::_internal_set_change_list(int64_t value) {
  
  change_list_ = value;
}
inline void HostIndependentJobInfoResult::set_change_list(int64_t value) {
  _internal_set_change_list(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.HostIndependentJobInfoResult.change_list)
}

// int64 build_time = 2;
inline void HostIndependentJobInfoResult::clear_build_time() {
  build_time_ = int64_t{0};
}
inline int64_t HostIndependentJobInfoResult::_internal_build_time() const {
  return build_time_;
}
inline int64_t HostIndependentJobInfoResult::build_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.HostIndependentJobInfoResult.build_time)
  return _internal_build_time();
}
inline void HostIndependentJobInfoResult::_internal_set_build_time(int64_t value) {
  
  build_time_ = value;
}
inline void HostIndependentJobInfoResult::set_build_time(int64_t value) {
  _internal_set_build_time(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.HostIndependentJobInfoResult.build_time)
}

// string build_target = 3;
inline void HostIndependentJobInfoResult::clear_build_target() {
  build_target_.ClearToEmpty();
}
inline const std::string& HostIndependentJobInfoResult::build_target() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.HostIndependentJobInfoResult.build_target)
  return _internal_build_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostIndependentJobInfoResult::set_build_target(ArgT0&& arg0, ArgT... args) {
 
 build_target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.HostIndependentJobInfoResult.build_target)
}
inline std::string* HostIndependentJobInfoResult::mutable_build_target() {
  std::string* _s = _internal_mutable_build_target();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.HostIndependentJobInfoResult.build_target)
  return _s;
}
inline const std::string& HostIndependentJobInfoResult::_internal_build_target() const {
  return build_target_.Get();
}
inline void HostIndependentJobInfoResult::_internal_set_build_target(const std::string& value) {
  
  build_target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HostIndependentJobInfoResult::_internal_mutable_build_target() {
  
  return build_target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HostIndependentJobInfoResult::release_build_target() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.HostIndependentJobInfoResult.build_target)
  return build_target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HostIndependentJobInfoResult::set_allocated_build_target(std::string* build_target) {
  if (build_target != nullptr) {
    
  } else {
    
  }
  build_target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_target,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (build_target_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    build_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.HostIndependentJobInfoResult.build_target)
}

// uint32 profile_duration_ms = 4;
inline void HostIndependentJobInfoResult::clear_profile_duration_ms() {
  profile_duration_ms_ = 0u;
}
inline uint32_t HostIndependentJobInfoResult::_internal_profile_duration_ms() const {
  return profile_duration_ms_;
}
inline uint32_t HostIndependentJobInfoResult::profile_duration_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.HostIndependentJobInfoResult.profile_duration_ms)
  return _internal_profile_duration_ms();
}
inline void HostIndependentJobInfoResult::_internal_set_profile_duration_ms(uint32_t value) {
  
  profile_duration_ms_ = value;
}
inline void HostIndependentJobInfoResult::set_profile_duration_ms(uint32_t value) {
  _internal_set_profile_duration_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.HostIndependentJobInfoResult.profile_duration_ms)
}

// -------------------------------------------------------------------

// HostDependentJobInfoResult

// string host_id = 1;
inline void HostDependentJobInfoResult::clear_host_id() {
  host_id_.ClearToEmpty();
}
inline const std::string& HostDependentJobInfoResult::host_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.HostDependentJobInfoResult.host_id)
  return _internal_host_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostDependentJobInfoResult::set_host_id(ArgT0&& arg0, ArgT... args) {
 
 host_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.HostDependentJobInfoResult.host_id)
}
inline std::string* HostDependentJobInfoResult::mutable_host_id() {
  std::string* _s = _internal_mutable_host_id();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.HostDependentJobInfoResult.host_id)
  return _s;
}
inline const std::string& HostDependentJobInfoResult::_internal_host_id() const {
  return host_id_.Get();
}
inline void HostDependentJobInfoResult::_internal_set_host_id(const std::string& value) {
  
  host_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HostDependentJobInfoResult::_internal_mutable_host_id() {
  
  return host_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HostDependentJobInfoResult::release_host_id() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.HostDependentJobInfoResult.host_id)
  return host_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HostDependentJobInfoResult::set_allocated_host_id(std::string* host_id) {
  if (host_id != nullptr) {
    
  } else {
    
  }
  host_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.HostDependentJobInfoResult.host_id)
}

// string command_line = 2;
inline void HostDependentJobInfoResult::clear_command_line() {
  command_line_.ClearToEmpty();
}
inline const std::string& HostDependentJobInfoResult::command_line() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.HostDependentJobInfoResult.command_line)
  return _internal_command_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostDependentJobInfoResult::set_command_line(ArgT0&& arg0, ArgT... args) {
 
 command_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.HostDependentJobInfoResult.command_line)
}
inline std::string* HostDependentJobInfoResult::mutable_command_line() {
  std::string* _s = _internal_mutable_command_line();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.HostDependentJobInfoResult.command_line)
  return _s;
}
inline const std::string& HostDependentJobInfoResult::_internal_command_line() const {
  return command_line_.Get();
}
inline void HostDependentJobInfoResult::_internal_set_command_line(const std::string& value) {
  
  command_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HostDependentJobInfoResult::_internal_mutable_command_line() {
  
  return command_line_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HostDependentJobInfoResult::release_command_line() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.HostDependentJobInfoResult.command_line)
  return command_line_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HostDependentJobInfoResult::set_allocated_command_line(std::string* command_line) {
  if (command_line != nullptr) {
    
  } else {
    
  }
  command_line_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_line,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_line_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.HostDependentJobInfoResult.command_line)
}

// int64 start_time = 3;
inline void HostDependentJobInfoResult::clear_start_time() {
  start_time_ = int64_t{0};
}
inline int64_t HostDependentJobInfoResult::_internal_start_time() const {
  return start_time_;
}
inline int64_t HostDependentJobInfoResult::start_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.HostDependentJobInfoResult.start_time)
  return _internal_start_time();
}
inline void HostDependentJobInfoResult::_internal_set_start_time(int64_t value) {
  
  start_time_ = value;
}
inline void HostDependentJobInfoResult::set_start_time(int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.HostDependentJobInfoResult.start_time)
}

// string bns_address = 4;
inline void HostDependentJobInfoResult::clear_bns_address() {
  bns_address_.ClearToEmpty();
}
inline const std::string& HostDependentJobInfoResult::bns_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.HostDependentJobInfoResult.bns_address)
  return _internal_bns_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostDependentJobInfoResult::set_bns_address(ArgT0&& arg0, ArgT... args) {
 
 bns_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.HostDependentJobInfoResult.bns_address)
}
inline std::string* HostDependentJobInfoResult::mutable_bns_address() {
  std::string* _s = _internal_mutable_bns_address();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.HostDependentJobInfoResult.bns_address)
  return _s;
}
inline const std::string& HostDependentJobInfoResult::_internal_bns_address() const {
  return bns_address_.Get();
}
inline void HostDependentJobInfoResult::_internal_set_bns_address(const std::string& value) {
  
  bns_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HostDependentJobInfoResult::_internal_mutable_bns_address() {
  
  return bns_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HostDependentJobInfoResult::release_bns_address() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.HostDependentJobInfoResult.bns_address)
  return bns_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HostDependentJobInfoResult::set_allocated_bns_address(std::string* bns_address) {
  if (bns_address != nullptr) {
    
  } else {
    
  }
  bns_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bns_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bns_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bns_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.HostDependentJobInfoResult.bns_address)
}

// uint64 profile_time_ns = 5;
inline void HostDependentJobInfoResult::clear_profile_time_ns() {
  profile_time_ns_ = uint64_t{0u};
}
inline uint64_t HostDependentJobInfoResult::_internal_profile_time_ns() const {
  return profile_time_ns_;
}
inline uint64_t HostDependentJobInfoResult::profile_time_ns() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.HostDependentJobInfoResult.profile_time_ns)
  return _internal_profile_time_ns();
}
inline void HostDependentJobInfoResult::_internal_set_profile_time_ns(uint64_t value) {
  
  profile_time_ns_ = value;
}
inline void HostDependentJobInfoResult::set_profile_time_ns(uint64_t value) {
  _internal_set_profile_time_ns(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.HostDependentJobInfoResult.profile_time_ns)
}

// -------------------------------------------------------------------

// SystemTopology

// int64 x_dimension = 1;
inline void SystemTopology::clear_x_dimension() {
  x_dimension_ = int64_t{0};
}
inline int64_t SystemTopology::_internal_x_dimension() const {
  return x_dimension_;
}
inline int64_t SystemTopology::x_dimension() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.SystemTopology.x_dimension)
  return _internal_x_dimension();
}
inline void SystemTopology::_internal_set_x_dimension(int64_t value) {
  
  x_dimension_ = value;
}
inline void SystemTopology::set_x_dimension(int64_t value) {
  _internal_set_x_dimension(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.SystemTopology.x_dimension)
}

// int64 y_dimension = 2;
inline void SystemTopology::clear_y_dimension() {
  y_dimension_ = int64_t{0};
}
inline int64_t SystemTopology::_internal_y_dimension() const {
  return y_dimension_;
}
inline int64_t SystemTopology::y_dimension() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.SystemTopology.y_dimension)
  return _internal_y_dimension();
}
inline void SystemTopology::_internal_set_y_dimension(int64_t value) {
  
  y_dimension_ = value;
}
inline void SystemTopology::set_y_dimension(int64_t value) {
  _internal_set_y_dimension(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.SystemTopology.y_dimension)
}

// int64 z_dimension = 3;
inline void SystemTopology::clear_z_dimension() {
  z_dimension_ = int64_t{0};
}
inline int64_t SystemTopology::_internal_z_dimension() const {
  return z_dimension_;
}
inline int64_t SystemTopology::z_dimension() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.SystemTopology.z_dimension)
  return _internal_z_dimension();
}
inline void SystemTopology::_internal_set_z_dimension(int64_t value) {
  
  z_dimension_ = value;
}
inline void SystemTopology::set_z_dimension(int64_t value) {
  _internal_set_z_dimension(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.SystemTopology.z_dimension)
}

// int64 num_expected_reduced_chips = 4;
inline void SystemTopology::clear_num_expected_reduced_chips() {
  num_expected_reduced_chips_ = int64_t{0};
}
inline int64_t SystemTopology::_internal_num_expected_reduced_chips() const {
  return num_expected_reduced_chips_;
}
inline int64_t SystemTopology::num_expected_reduced_chips() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.SystemTopology.num_expected_reduced_chips)
  return _internal_num_expected_reduced_chips();
}
inline void SystemTopology::_internal_set_num_expected_reduced_chips(int64_t value) {
  
  num_expected_reduced_chips_ = value;
}
inline void SystemTopology::set_num_expected_reduced_chips(int64_t value) {
  _internal_set_num_expected_reduced_chips(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.SystemTopology.num_expected_reduced_chips)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RunEnvironment

// int32 host_count = 1;
inline void RunEnvironment::clear_host_count() {
  host_count_ = 0;
}
inline int32_t RunEnvironment::_internal_host_count() const {
  return host_count_;
}
inline int32_t RunEnvironment::host_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.host_count)
  return _internal_host_count();
}
inline void RunEnvironment::_internal_set_host_count(int32_t value) {
  
  host_count_ = value;
}
inline void RunEnvironment::set_host_count(int32_t value) {
  _internal_set_host_count(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.RunEnvironment.host_count)
}

// int32 task_count = 2;
inline void RunEnvironment::clear_task_count() {
  task_count_ = 0;
}
inline int32_t RunEnvironment::_internal_task_count() const {
  return task_count_;
}
inline int32_t RunEnvironment::task_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.task_count)
  return _internal_task_count();
}
inline void RunEnvironment::_internal_set_task_count(int32_t value) {
  
  task_count_ = value;
}
inline void RunEnvironment::set_task_count(int32_t value) {
  _internal_set_task_count(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.RunEnvironment.task_count)
}

// map<string, bool> hostnames = 3;
inline int RunEnvironment::_internal_hostnames_size() const {
  return hostnames_.size();
}
inline int RunEnvironment::hostnames_size() const {
  return _internal_hostnames_size();
}
inline void RunEnvironment::clear_hostnames() {
  hostnames_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
RunEnvironment::_internal_hostnames() const {
  return hostnames_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
RunEnvironment::hostnames() const {
  // @@protoc_insertion_point(field_map:tensorflow.profiler.RunEnvironment.hostnames)
  return _internal_hostnames();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
RunEnvironment::_internal_mutable_hostnames() {
  return hostnames_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
RunEnvironment::mutable_hostnames() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.profiler.RunEnvironment.hostnames)
  return _internal_mutable_hostnames();
}

// string device_type = 4;
inline void RunEnvironment::clear_device_type() {
  device_type_.ClearToEmpty();
}
inline const std::string& RunEnvironment::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.device_type)
  return _internal_device_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunEnvironment::set_device_type(ArgT0&& arg0, ArgT... args) {
 
 device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.RunEnvironment.device_type)
}
inline std::string* RunEnvironment::mutable_device_type() {
  std::string* _s = _internal_mutable_device_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.RunEnvironment.device_type)
  return _s;
}
inline const std::string& RunEnvironment::_internal_device_type() const {
  return device_type_.Get();
}
inline void RunEnvironment::_internal_set_device_type(const std::string& value) {
  
  device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RunEnvironment::_internal_mutable_device_type() {
  
  return device_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RunEnvironment::release_device_type() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.RunEnvironment.device_type)
  return device_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RunEnvironment::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.RunEnvironment.device_type)
}

// int32 device_core_count = 5;
inline void RunEnvironment::clear_device_core_count() {
  device_core_count_ = 0;
}
inline int32_t RunEnvironment::_internal_device_core_count() const {
  return device_core_count_;
}
inline int32_t RunEnvironment::device_core_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.device_core_count)
  return _internal_device_core_count();
}
inline void RunEnvironment::_internal_set_device_core_count(int32_t value) {
  
  device_core_count_ = value;
}
inline void RunEnvironment::set_device_core_count(int32_t value) {
  _internal_set_device_core_count(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.RunEnvironment.device_core_count)
}

// int32 per_core_batch_size = 6;
inline void RunEnvironment::clear_per_core_batch_size() {
  per_core_batch_size_ = 0;
}
inline int32_t RunEnvironment::_internal_per_core_batch_size() const {
  return per_core_batch_size_;
}
inline int32_t RunEnvironment::per_core_batch_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.per_core_batch_size)
  return _internal_per_core_batch_size();
}
inline void RunEnvironment::_internal_set_per_core_batch_size(int32_t value) {
  
  per_core_batch_size_ = value;
}
inline void RunEnvironment::set_per_core_batch_size(int32_t value) {
  _internal_set_per_core_batch_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.RunEnvironment.per_core_batch_size)
}

// .tensorflow.profiler.HostIndependentJobInfoResult host_independent_job_info = 7;
inline bool RunEnvironment::_internal_has_host_independent_job_info() const {
  return this != internal_default_instance() && host_independent_job_info_ != nullptr;
}
inline bool RunEnvironment::has_host_independent_job_info() const {
  return _internal_has_host_independent_job_info();
}
inline void RunEnvironment::clear_host_independent_job_info() {
  if (GetArenaForAllocation() == nullptr && host_independent_job_info_ != nullptr) {
    delete host_independent_job_info_;
  }
  host_independent_job_info_ = nullptr;
}
inline const ::tensorflow::profiler::HostIndependentJobInfoResult& RunEnvironment::_internal_host_independent_job_info() const {
  const ::tensorflow::profiler::HostIndependentJobInfoResult* p = host_independent_job_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::HostIndependentJobInfoResult&>(
      ::tensorflow::profiler::_HostIndependentJobInfoResult_default_instance_);
}
inline const ::tensorflow::profiler::HostIndependentJobInfoResult& RunEnvironment::host_independent_job_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.host_independent_job_info)
  return _internal_host_independent_job_info();
}
inline void RunEnvironment::unsafe_arena_set_allocated_host_independent_job_info(
    ::tensorflow::profiler::HostIndependentJobInfoResult* host_independent_job_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_independent_job_info_);
  }
  host_independent_job_info_ = host_independent_job_info;
  if (host_independent_job_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.RunEnvironment.host_independent_job_info)
}
inline ::tensorflow::profiler::HostIndependentJobInfoResult* RunEnvironment::release_host_independent_job_info() {
  
  ::tensorflow::profiler::HostIndependentJobInfoResult* temp = host_independent_job_info_;
  host_independent_job_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::HostIndependentJobInfoResult* RunEnvironment::unsafe_arena_release_host_independent_job_info() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.RunEnvironment.host_independent_job_info)
  
  ::tensorflow::profiler::HostIndependentJobInfoResult* temp = host_independent_job_info_;
  host_independent_job_info_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::HostIndependentJobInfoResult* RunEnvironment::_internal_mutable_host_independent_job_info() {
  
  if (host_independent_job_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::HostIndependentJobInfoResult>(GetArenaForAllocation());
    host_independent_job_info_ = p;
  }
  return host_independent_job_info_;
}
inline ::tensorflow::profiler::HostIndependentJobInfoResult* RunEnvironment::mutable_host_independent_job_info() {
  ::tensorflow::profiler::HostIndependentJobInfoResult* _msg = _internal_mutable_host_independent_job_info();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.RunEnvironment.host_independent_job_info)
  return _msg;
}
inline void RunEnvironment::set_allocated_host_independent_job_info(::tensorflow::profiler::HostIndependentJobInfoResult* host_independent_job_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete host_independent_job_info_;
  }
  if (host_independent_job_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::HostIndependentJobInfoResult>::GetOwningArena(host_independent_job_info);
    if (message_arena != submessage_arena) {
      host_independent_job_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_independent_job_info, submessage_arena);
    }
    
  } else {
    
  }
  host_independent_job_info_ = host_independent_job_info;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.RunEnvironment.host_independent_job_info)
}

// repeated .tensorflow.profiler.HostDependentJobInfoResult host_dependent_job_info = 8;
inline int RunEnvironment::_internal_host_dependent_job_info_size() const {
  return host_dependent_job_info_.size();
}
inline int RunEnvironment::host_dependent_job_info_size() const {
  return _internal_host_dependent_job_info_size();
}
inline void RunEnvironment::clear_host_dependent_job_info() {
  host_dependent_job_info_.Clear();
}
inline ::tensorflow::profiler::HostDependentJobInfoResult* RunEnvironment::mutable_host_dependent_job_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.RunEnvironment.host_dependent_job_info)
  return host_dependent_job_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::HostDependentJobInfoResult >*
RunEnvironment::mutable_host_dependent_job_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.RunEnvironment.host_dependent_job_info)
  return &host_dependent_job_info_;
}
inline const ::tensorflow::profiler::HostDependentJobInfoResult& RunEnvironment::_internal_host_dependent_job_info(int index) const {
  return host_dependent_job_info_.Get(index);
}
inline const ::tensorflow::profiler::HostDependentJobInfoResult& RunEnvironment::host_dependent_job_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.host_dependent_job_info)
  return _internal_host_dependent_job_info(index);
}
inline ::tensorflow::profiler::HostDependentJobInfoResult* RunEnvironment::_internal_add_host_dependent_job_info() {
  return host_dependent_job_info_.Add();
}
inline ::tensorflow::profiler::HostDependentJobInfoResult* RunEnvironment::add_host_dependent_job_info() {
  ::tensorflow::profiler::HostDependentJobInfoResult* _add = _internal_add_host_dependent_job_info();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.RunEnvironment.host_dependent_job_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::HostDependentJobInfoResult >&
RunEnvironment::host_dependent_job_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.RunEnvironment.host_dependent_job_info)
  return host_dependent_job_info_;
}

// int32 replica_count = 9;
inline void RunEnvironment::clear_replica_count() {
  replica_count_ = 0;
}
inline int32_t RunEnvironment::_internal_replica_count() const {
  return replica_count_;
}
inline int32_t RunEnvironment::replica_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.replica_count)
  return _internal_replica_count();
}
inline void RunEnvironment::_internal_set_replica_count(int32_t value) {
  
  replica_count_ = value;
}
inline void RunEnvironment::set_replica_count(int32_t value) {
  _internal_set_replica_count(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.RunEnvironment.replica_count)
}

// int32 num_cores_per_replica = 10;
inline void RunEnvironment::clear_num_cores_per_replica() {
  num_cores_per_replica_ = 0;
}
inline int32_t RunEnvironment::_internal_num_cores_per_replica() const {
  return num_cores_per_replica_;
}
inline int32_t RunEnvironment::num_cores_per_replica() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.num_cores_per_replica)
  return _internal_num_cores_per_replica();
}
inline void RunEnvironment::_internal_set_num_cores_per_replica(int32_t value) {
  
  num_cores_per_replica_ = value;
}
inline void RunEnvironment::set_num_cores_per_replica(int32_t value) {
  _internal_set_num_cores_per_replica(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.RunEnvironment.num_cores_per_replica)
}

// .tensorflow.profiler.SystemTopology topology = 11;
inline bool RunEnvironment::_internal_has_topology() const {
  return this != internal_default_instance() && topology_ != nullptr;
}
inline bool RunEnvironment::has_topology() const {
  return _internal_has_topology();
}
inline void RunEnvironment::clear_topology() {
  if (GetArenaForAllocation() == nullptr && topology_ != nullptr) {
    delete topology_;
  }
  topology_ = nullptr;
}
inline const ::tensorflow::profiler::SystemTopology& RunEnvironment::_internal_topology() const {
  const ::tensorflow::profiler::SystemTopology* p = topology_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::SystemTopology&>(
      ::tensorflow::profiler::_SystemTopology_default_instance_);
}
inline const ::tensorflow::profiler::SystemTopology& RunEnvironment::topology() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.topology)
  return _internal_topology();
}
inline void RunEnvironment::unsafe_arena_set_allocated_topology(
    ::tensorflow::profiler::SystemTopology* topology) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topology_);
  }
  topology_ = topology;
  if (topology) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.RunEnvironment.topology)
}
inline ::tensorflow::profiler::SystemTopology* RunEnvironment::release_topology() {
  
  ::tensorflow::profiler::SystemTopology* temp = topology_;
  topology_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::SystemTopology* RunEnvironment::unsafe_arena_release_topology() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.RunEnvironment.topology)
  
  ::tensorflow::profiler::SystemTopology* temp = topology_;
  topology_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::SystemTopology* RunEnvironment::_internal_mutable_topology() {
  
  if (topology_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::SystemTopology>(GetArenaForAllocation());
    topology_ = p;
  }
  return topology_;
}
inline ::tensorflow::profiler::SystemTopology* RunEnvironment::mutable_topology() {
  ::tensorflow::profiler::SystemTopology* _msg = _internal_mutable_topology();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.RunEnvironment.topology)
  return _msg;
}
inline void RunEnvironment::set_allocated_topology(::tensorflow::profiler::SystemTopology* topology) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete topology_;
  }
  if (topology) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::SystemTopology>::GetOwningArena(topology);
    if (message_arena != submessage_arena) {
      topology = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topology, submessage_arena);
    }
    
  } else {
    
  }
  topology_ = topology;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.RunEnvironment.topology)
}

// uint32 host_trace_level = 12;
inline void RunEnvironment::clear_host_trace_level() {
  host_trace_level_ = 0u;
}
inline uint32_t RunEnvironment::_internal_host_trace_level() const {
  return host_trace_level_;
}
inline uint32_t RunEnvironment::host_trace_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.RunEnvironment.host_trace_level)
  return _internal_host_trace_level();
}
inline void RunEnvironment::_internal_set_host_trace_level(uint32_t value) {
  
  host_trace_level_ = value;
}
inline void RunEnvironment::set_host_trace_level(uint32_t value) {
  _internal_set_host_trace_level(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.RunEnvironment.host_trace_level)
}

// -------------------------------------------------------------------

// CoreDetails

// string hostname = 1;
inline void CoreDetails::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& CoreDetails::hostname() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.CoreDetails.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoreDetails::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.CoreDetails.hostname)
}
inline std::string* CoreDetails::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.CoreDetails.hostname)
  return _s;
}
inline const std::string& CoreDetails::_internal_hostname() const {
  return hostname_.Get();
}
inline void CoreDetails::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CoreDetails::_internal_mutable_hostname() {
  
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CoreDetails::release_hostname() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.CoreDetails.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CoreDetails::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.CoreDetails.hostname)
}

// uint32 device_ordinal = 2;
inline void CoreDetails::clear_device_ordinal() {
  device_ordinal_ = 0u;
}
inline uint32_t CoreDetails::_internal_device_ordinal() const {
  return device_ordinal_;
}
inline uint32_t CoreDetails::device_ordinal() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.CoreDetails.device_ordinal)
  return _internal_device_ordinal();
}
inline void CoreDetails::_internal_set_device_ordinal(uint32_t value) {
  
  device_ordinal_ = value;
}
inline void CoreDetails::set_device_ordinal(uint32_t value) {
  _internal_set_device_ordinal(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.CoreDetails.device_ordinal)
}

// uint32 core_num = 3;
inline void CoreDetails::clear_core_num() {
  core_num_ = 0u;
}
inline uint32_t CoreDetails::_internal_core_num() const {
  return core_num_;
}
inline uint32_t CoreDetails::core_num() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.CoreDetails.core_num)
  return _internal_core_num();
}
inline void CoreDetails::_internal_set_core_num(uint32_t value) {
  
  core_num_ = value;
}
inline void CoreDetails::set_core_num(uint32_t value) {
  _internal_set_core_num(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.CoreDetails.core_num)
}

// uint32 local_chip_id = 4;
inline void CoreDetails::clear_local_chip_id() {
  local_chip_id_ = 0u;
}
inline uint32_t CoreDetails::_internal_local_chip_id() const {
  return local_chip_id_;
}
inline uint32_t CoreDetails::local_chip_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.CoreDetails.local_chip_id)
  return _internal_local_chip_id();
}
inline void CoreDetails::_internal_set_local_chip_id(uint32_t value) {
  
  local_chip_id_ = value;
}
inline void CoreDetails::set_local_chip_id(uint32_t value) {
  _internal_set_local_chip_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.CoreDetails.local_chip_id)
}

// uint32 global_chip_id = 5;
inline void CoreDetails::clear_global_chip_id() {
  global_chip_id_ = 0u;
}
inline uint32_t CoreDetails::_internal_global_chip_id() const {
  return global_chip_id_;
}
inline uint32_t CoreDetails::global_chip_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.CoreDetails.global_chip_id)
  return _internal_global_chip_id();
}
inline void CoreDetails::_internal_set_global_chip_id(uint32_t value) {
  
  global_chip_id_ = value;
}
inline void CoreDetails::set_global_chip_id(uint32_t value) {
  _internal_set_global_chip_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.CoreDetails.global_chip_id)
}

// uint32 global_core_id = 6;
inline void CoreDetails::clear_global_core_id() {
  global_core_id_ = 0u;
}
inline uint32_t CoreDetails::_internal_global_core_id() const {
  return global_core_id_;
}
inline uint32_t CoreDetails::global_core_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.CoreDetails.global_core_id)
  return _internal_global_core_id();
}
inline void CoreDetails::_internal_set_global_core_id(uint32_t value) {
  
  global_core_id_ = value;
}
inline void CoreDetails::set_global_core_id(uint32_t value) {
  _internal_set_global_core_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.CoreDetails.global_core_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OpStats

// .tensorflow.profiler.OpMetricsDb host_op_metrics_db = 1;
inline bool OpStats::_internal_has_host_op_metrics_db() const {
  return this != internal_default_instance() && host_op_metrics_db_ != nullptr;
}
inline bool OpStats::has_host_op_metrics_db() const {
  return _internal_has_host_op_metrics_db();
}
inline const ::tensorflow::profiler::OpMetricsDb& OpStats::_internal_host_op_metrics_db() const {
  const ::tensorflow::profiler::OpMetricsDb* p = host_op_metrics_db_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::OpMetricsDb&>(
      ::tensorflow::profiler::_OpMetricsDb_default_instance_);
}
inline const ::tensorflow::profiler::OpMetricsDb& OpStats::host_op_metrics_db() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.host_op_metrics_db)
  return _internal_host_op_metrics_db();
}
inline void OpStats::unsafe_arena_set_allocated_host_op_metrics_db(
    ::tensorflow::profiler::OpMetricsDb* host_op_metrics_db) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_op_metrics_db_);
  }
  host_op_metrics_db_ = host_op_metrics_db;
  if (host_op_metrics_db) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpStats.host_op_metrics_db)
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::release_host_op_metrics_db() {
  
  ::tensorflow::profiler::OpMetricsDb* temp = host_op_metrics_db_;
  host_op_metrics_db_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::unsafe_arena_release_host_op_metrics_db() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.host_op_metrics_db)
  
  ::tensorflow::profiler::OpMetricsDb* temp = host_op_metrics_db_;
  host_op_metrics_db_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::_internal_mutable_host_op_metrics_db() {
  
  if (host_op_metrics_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::OpMetricsDb>(GetArenaForAllocation());
    host_op_metrics_db_ = p;
  }
  return host_op_metrics_db_;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::mutable_host_op_metrics_db() {
  ::tensorflow::profiler::OpMetricsDb* _msg = _internal_mutable_host_op_metrics_db();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.host_op_metrics_db)
  return _msg;
}
inline void OpStats::set_allocated_host_op_metrics_db(::tensorflow::profiler::OpMetricsDb* host_op_metrics_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_op_metrics_db_);
  }
  if (host_op_metrics_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_op_metrics_db));
    if (message_arena != submessage_arena) {
      host_op_metrics_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_op_metrics_db, submessage_arena);
    }
    
  } else {
    
  }
  host_op_metrics_db_ = host_op_metrics_db;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.host_op_metrics_db)
}

// .tensorflow.profiler.OpMetricsDb device_op_metrics_db = 2;
inline bool OpStats::_internal_has_device_op_metrics_db() const {
  return this != internal_default_instance() && device_op_metrics_db_ != nullptr;
}
inline bool OpStats::has_device_op_metrics_db() const {
  return _internal_has_device_op_metrics_db();
}
inline const ::tensorflow::profiler::OpMetricsDb& OpStats::_internal_device_op_metrics_db() const {
  const ::tensorflow::profiler::OpMetricsDb* p = device_op_metrics_db_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::OpMetricsDb&>(
      ::tensorflow::profiler::_OpMetricsDb_default_instance_);
}
inline const ::tensorflow::profiler::OpMetricsDb& OpStats::device_op_metrics_db() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.device_op_metrics_db)
  return _internal_device_op_metrics_db();
}
inline void OpStats::unsafe_arena_set_allocated_device_op_metrics_db(
    ::tensorflow::profiler::OpMetricsDb* device_op_metrics_db) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_op_metrics_db_);
  }
  device_op_metrics_db_ = device_op_metrics_db;
  if (device_op_metrics_db) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpStats.device_op_metrics_db)
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::release_device_op_metrics_db() {
  
  ::tensorflow::profiler::OpMetricsDb* temp = device_op_metrics_db_;
  device_op_metrics_db_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::unsafe_arena_release_device_op_metrics_db() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.device_op_metrics_db)
  
  ::tensorflow::profiler::OpMetricsDb* temp = device_op_metrics_db_;
  device_op_metrics_db_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::_internal_mutable_device_op_metrics_db() {
  
  if (device_op_metrics_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::OpMetricsDb>(GetArenaForAllocation());
    device_op_metrics_db_ = p;
  }
  return device_op_metrics_db_;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::mutable_device_op_metrics_db() {
  ::tensorflow::profiler::OpMetricsDb* _msg = _internal_mutable_device_op_metrics_db();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.device_op_metrics_db)
  return _msg;
}
inline void OpStats::set_allocated_device_op_metrics_db(::tensorflow::profiler::OpMetricsDb* device_op_metrics_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_op_metrics_db_);
  }
  if (device_op_metrics_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_op_metrics_db));
    if (message_arena != submessage_arena) {
      device_op_metrics_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_op_metrics_db, submessage_arena);
    }
    
  } else {
    
  }
  device_op_metrics_db_ = device_op_metrics_db;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.device_op_metrics_db)
}

// .tensorflow.profiler.OpMetricsDb hlo_metrics_db_complete_steps_only = 10;
inline bool OpStats::_internal_has_hlo_metrics_db_complete_steps_only() const {
  return this != internal_default_instance() && hlo_metrics_db_complete_steps_only_ != nullptr;
}
inline bool OpStats::has_hlo_metrics_db_complete_steps_only() const {
  return _internal_has_hlo_metrics_db_complete_steps_only();
}
inline const ::tensorflow::profiler::OpMetricsDb& OpStats::_internal_hlo_metrics_db_complete_steps_only() const {
  const ::tensorflow::profiler::OpMetricsDb* p = hlo_metrics_db_complete_steps_only_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::OpMetricsDb&>(
      ::tensorflow::profiler::_OpMetricsDb_default_instance_);
}
inline const ::tensorflow::profiler::OpMetricsDb& OpStats::hlo_metrics_db_complete_steps_only() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.hlo_metrics_db_complete_steps_only)
  return _internal_hlo_metrics_db_complete_steps_only();
}
inline void OpStats::unsafe_arena_set_allocated_hlo_metrics_db_complete_steps_only(
    ::tensorflow::profiler::OpMetricsDb* hlo_metrics_db_complete_steps_only) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hlo_metrics_db_complete_steps_only_);
  }
  hlo_metrics_db_complete_steps_only_ = hlo_metrics_db_complete_steps_only;
  if (hlo_metrics_db_complete_steps_only) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpStats.hlo_metrics_db_complete_steps_only)
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::release_hlo_metrics_db_complete_steps_only() {
  
  ::tensorflow::profiler::OpMetricsDb* temp = hlo_metrics_db_complete_steps_only_;
  hlo_metrics_db_complete_steps_only_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::unsafe_arena_release_hlo_metrics_db_complete_steps_only() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.hlo_metrics_db_complete_steps_only)
  
  ::tensorflow::profiler::OpMetricsDb* temp = hlo_metrics_db_complete_steps_only_;
  hlo_metrics_db_complete_steps_only_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::_internal_mutable_hlo_metrics_db_complete_steps_only() {
  
  if (hlo_metrics_db_complete_steps_only_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::OpMetricsDb>(GetArenaForAllocation());
    hlo_metrics_db_complete_steps_only_ = p;
  }
  return hlo_metrics_db_complete_steps_only_;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::mutable_hlo_metrics_db_complete_steps_only() {
  ::tensorflow::profiler::OpMetricsDb* _msg = _internal_mutable_hlo_metrics_db_complete_steps_only();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.hlo_metrics_db_complete_steps_only)
  return _msg;
}
inline void OpStats::set_allocated_hlo_metrics_db_complete_steps_only(::tensorflow::profiler::OpMetricsDb* hlo_metrics_db_complete_steps_only) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hlo_metrics_db_complete_steps_only_);
  }
  if (hlo_metrics_db_complete_steps_only) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hlo_metrics_db_complete_steps_only));
    if (message_arena != submessage_arena) {
      hlo_metrics_db_complete_steps_only = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hlo_metrics_db_complete_steps_only, submessage_arena);
    }
    
  } else {
    
  }
  hlo_metrics_db_complete_steps_only_ = hlo_metrics_db_complete_steps_only;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.hlo_metrics_db_complete_steps_only)
}

// .tensorflow.profiler.PerfEnv perf_env = 3;
inline bool OpStats::_internal_has_perf_env() const {
  return this != internal_default_instance() && perf_env_ != nullptr;
}
inline bool OpStats::has_perf_env() const {
  return _internal_has_perf_env();
}
inline void OpStats::clear_perf_env() {
  if (GetArenaForAllocation() == nullptr && perf_env_ != nullptr) {
    delete perf_env_;
  }
  perf_env_ = nullptr;
}
inline const ::tensorflow::profiler::PerfEnv& OpStats::_internal_perf_env() const {
  const ::tensorflow::profiler::PerfEnv* p = perf_env_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::PerfEnv&>(
      ::tensorflow::profiler::_PerfEnv_default_instance_);
}
inline const ::tensorflow::profiler::PerfEnv& OpStats::perf_env() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.perf_env)
  return _internal_perf_env();
}
inline void OpStats::unsafe_arena_set_allocated_perf_env(
    ::tensorflow::profiler::PerfEnv* perf_env) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_env_);
  }
  perf_env_ = perf_env;
  if (perf_env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpStats.perf_env)
}
inline ::tensorflow::profiler::PerfEnv* OpStats::release_perf_env() {
  
  ::tensorflow::profiler::PerfEnv* temp = perf_env_;
  perf_env_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::PerfEnv* OpStats::unsafe_arena_release_perf_env() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.perf_env)
  
  ::tensorflow::profiler::PerfEnv* temp = perf_env_;
  perf_env_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::PerfEnv* OpStats::_internal_mutable_perf_env() {
  
  if (perf_env_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::PerfEnv>(GetArenaForAllocation());
    perf_env_ = p;
  }
  return perf_env_;
}
inline ::tensorflow::profiler::PerfEnv* OpStats::mutable_perf_env() {
  ::tensorflow::profiler::PerfEnv* _msg = _internal_mutable_perf_env();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.perf_env)
  return _msg;
}
inline void OpStats::set_allocated_perf_env(::tensorflow::profiler::PerfEnv* perf_env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete perf_env_;
  }
  if (perf_env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::PerfEnv>::GetOwningArena(perf_env);
    if (message_arena != submessage_arena) {
      perf_env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_env, submessage_arena);
    }
    
  } else {
    
  }
  perf_env_ = perf_env;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.perf_env)
}

// .tensorflow.profiler.StepDatabaseResult step_db = 4;
inline bool OpStats::_internal_has_step_db() const {
  return this != internal_default_instance() && step_db_ != nullptr;
}
inline bool OpStats::has_step_db() const {
  return _internal_has_step_db();
}
inline const ::tensorflow::profiler::StepDatabaseResult& OpStats::_internal_step_db() const {
  const ::tensorflow::profiler::StepDatabaseResult* p = step_db_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::StepDatabaseResult&>(
      ::tensorflow::profiler::_StepDatabaseResult_default_instance_);
}
inline const ::tensorflow::profiler::StepDatabaseResult& OpStats::step_db() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.step_db)
  return _internal_step_db();
}
inline void OpStats::unsafe_arena_set_allocated_step_db(
    ::tensorflow::profiler::StepDatabaseResult* step_db) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(step_db_);
  }
  step_db_ = step_db;
  if (step_db) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpStats.step_db)
}
inline ::tensorflow::profiler::StepDatabaseResult* OpStats::release_step_db() {
  
  ::tensorflow::profiler::StepDatabaseResult* temp = step_db_;
  step_db_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::StepDatabaseResult* OpStats::unsafe_arena_release_step_db() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.step_db)
  
  ::tensorflow::profiler::StepDatabaseResult* temp = step_db_;
  step_db_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::StepDatabaseResult* OpStats::_internal_mutable_step_db() {
  
  if (step_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::StepDatabaseResult>(GetArenaForAllocation());
    step_db_ = p;
  }
  return step_db_;
}
inline ::tensorflow::profiler::StepDatabaseResult* OpStats::mutable_step_db() {
  ::tensorflow::profiler::StepDatabaseResult* _msg = _internal_mutable_step_db();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.step_db)
  return _msg;
}
inline void OpStats::set_allocated_step_db(::tensorflow::profiler::StepDatabaseResult* step_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(step_db_);
  }
  if (step_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(step_db));
    if (message_arena != submessage_arena) {
      step_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, step_db, submessage_arena);
    }
    
  } else {
    
  }
  step_db_ = step_db;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.step_db)
}

// .tensorflow.profiler.RunEnvironment run_environment = 5;
inline bool OpStats::_internal_has_run_environment() const {
  return this != internal_default_instance() && run_environment_ != nullptr;
}
inline bool OpStats::has_run_environment() const {
  return _internal_has_run_environment();
}
inline void OpStats::clear_run_environment() {
  if (GetArenaForAllocation() == nullptr && run_environment_ != nullptr) {
    delete run_environment_;
  }
  run_environment_ = nullptr;
}
inline const ::tensorflow::profiler::RunEnvironment& OpStats::_internal_run_environment() const {
  const ::tensorflow::profiler::RunEnvironment* p = run_environment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::RunEnvironment&>(
      ::tensorflow::profiler::_RunEnvironment_default_instance_);
}
inline const ::tensorflow::profiler::RunEnvironment& OpStats::run_environment() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.run_environment)
  return _internal_run_environment();
}
inline void OpStats::unsafe_arena_set_allocated_run_environment(
    ::tensorflow::profiler::RunEnvironment* run_environment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_environment_);
  }
  run_environment_ = run_environment;
  if (run_environment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpStats.run_environment)
}
inline ::tensorflow::profiler::RunEnvironment* OpStats::release_run_environment() {
  
  ::tensorflow::profiler::RunEnvironment* temp = run_environment_;
  run_environment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::RunEnvironment* OpStats::unsafe_arena_release_run_environment() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.run_environment)
  
  ::tensorflow::profiler::RunEnvironment* temp = run_environment_;
  run_environment_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::RunEnvironment* OpStats::_internal_mutable_run_environment() {
  
  if (run_environment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::RunEnvironment>(GetArenaForAllocation());
    run_environment_ = p;
  }
  return run_environment_;
}
inline ::tensorflow::profiler::RunEnvironment* OpStats::mutable_run_environment() {
  ::tensorflow::profiler::RunEnvironment* _msg = _internal_mutable_run_environment();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.run_environment)
  return _msg;
}
inline void OpStats::set_allocated_run_environment(::tensorflow::profiler::RunEnvironment* run_environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete run_environment_;
  }
  if (run_environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::RunEnvironment>::GetOwningArena(run_environment);
    if (message_arena != submessage_arena) {
      run_environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_environment, submessage_arena);
    }
    
  } else {
    
  }
  run_environment_ = run_environment;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.run_environment)
}

// .tensorflow.profiler.KernelStatsDb kernel_stats_db = 6;
inline bool OpStats::_internal_has_kernel_stats_db() const {
  return this != internal_default_instance() && kernel_stats_db_ != nullptr;
}
inline bool OpStats::has_kernel_stats_db() const {
  return _internal_has_kernel_stats_db();
}
inline const ::tensorflow::profiler::KernelStatsDb& OpStats::_internal_kernel_stats_db() const {
  const ::tensorflow::profiler::KernelStatsDb* p = kernel_stats_db_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::KernelStatsDb&>(
      ::tensorflow::profiler::_KernelStatsDb_default_instance_);
}
inline const ::tensorflow::profiler::KernelStatsDb& OpStats::kernel_stats_db() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.kernel_stats_db)
  return _internal_kernel_stats_db();
}
inline void OpStats::unsafe_arena_set_allocated_kernel_stats_db(
    ::tensorflow::profiler::KernelStatsDb* kernel_stats_db) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kernel_stats_db_);
  }
  kernel_stats_db_ = kernel_stats_db;
  if (kernel_stats_db) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpStats.kernel_stats_db)
}
inline ::tensorflow::profiler::KernelStatsDb* OpStats::release_kernel_stats_db() {
  
  ::tensorflow::profiler::KernelStatsDb* temp = kernel_stats_db_;
  kernel_stats_db_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::KernelStatsDb* OpStats::unsafe_arena_release_kernel_stats_db() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.kernel_stats_db)
  
  ::tensorflow::profiler::KernelStatsDb* temp = kernel_stats_db_;
  kernel_stats_db_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::KernelStatsDb* OpStats::_internal_mutable_kernel_stats_db() {
  
  if (kernel_stats_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::KernelStatsDb>(GetArenaForAllocation());
    kernel_stats_db_ = p;
  }
  return kernel_stats_db_;
}
inline ::tensorflow::profiler::KernelStatsDb* OpStats::mutable_kernel_stats_db() {
  ::tensorflow::profiler::KernelStatsDb* _msg = _internal_mutable_kernel_stats_db();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.kernel_stats_db)
  return _msg;
}
inline void OpStats::set_allocated_kernel_stats_db(::tensorflow::profiler::KernelStatsDb* kernel_stats_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(kernel_stats_db_);
  }
  if (kernel_stats_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kernel_stats_db));
    if (message_arena != submessage_arena) {
      kernel_stats_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kernel_stats_db, submessage_arena);
    }
    
  } else {
    
  }
  kernel_stats_db_ = kernel_stats_db;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.kernel_stats_db)
}

// .tensorflow.profiler.TfFunctionDb tf_function_db = 8;
inline bool OpStats::_internal_has_tf_function_db() const {
  return this != internal_default_instance() && tf_function_db_ != nullptr;
}
inline bool OpStats::has_tf_function_db() const {
  return _internal_has_tf_function_db();
}
inline const ::tensorflow::profiler::TfFunctionDb& OpStats::_internal_tf_function_db() const {
  const ::tensorflow::profiler::TfFunctionDb* p = tf_function_db_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::TfFunctionDb&>(
      ::tensorflow::profiler::_TfFunctionDb_default_instance_);
}
inline const ::tensorflow::profiler::TfFunctionDb& OpStats::tf_function_db() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.tf_function_db)
  return _internal_tf_function_db();
}
inline void OpStats::unsafe_arena_set_allocated_tf_function_db(
    ::tensorflow::profiler::TfFunctionDb* tf_function_db) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tf_function_db_);
  }
  tf_function_db_ = tf_function_db;
  if (tf_function_db) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpStats.tf_function_db)
}
inline ::tensorflow::profiler::TfFunctionDb* OpStats::release_tf_function_db() {
  
  ::tensorflow::profiler::TfFunctionDb* temp = tf_function_db_;
  tf_function_db_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::TfFunctionDb* OpStats::unsafe_arena_release_tf_function_db() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.tf_function_db)
  
  ::tensorflow::profiler::TfFunctionDb* temp = tf_function_db_;
  tf_function_db_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::TfFunctionDb* OpStats::_internal_mutable_tf_function_db() {
  
  if (tf_function_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::TfFunctionDb>(GetArenaForAllocation());
    tf_function_db_ = p;
  }
  return tf_function_db_;
}
inline ::tensorflow::profiler::TfFunctionDb* OpStats::mutable_tf_function_db() {
  ::tensorflow::profiler::TfFunctionDb* _msg = _internal_mutable_tf_function_db();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.tf_function_db)
  return _msg;
}
inline void OpStats::set_allocated_tf_function_db(::tensorflow::profiler::TfFunctionDb* tf_function_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tf_function_db_);
  }
  if (tf_function_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tf_function_db));
    if (message_arena != submessage_arena) {
      tf_function_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tf_function_db, submessage_arena);
    }
    
  } else {
    
  }
  tf_function_db_ = tf_function_db;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.tf_function_db)
}

// map<uint32, .tensorflow.profiler.CoreDetails> core_id_to_details = 11;
inline int OpStats::_internal_core_id_to_details_size() const {
  return core_id_to_details_.size();
}
inline int OpStats::core_id_to_details_size() const {
  return _internal_core_id_to_details_size();
}
inline void OpStats::clear_core_id_to_details() {
  core_id_to_details_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tensorflow::profiler::CoreDetails >&
OpStats::_internal_core_id_to_details() const {
  return core_id_to_details_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tensorflow::profiler::CoreDetails >&
OpStats::core_id_to_details() const {
  // @@protoc_insertion_point(field_map:tensorflow.profiler.OpStats.core_id_to_details)
  return _internal_core_id_to_details();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tensorflow::profiler::CoreDetails >*
OpStats::_internal_mutable_core_id_to_details() {
  return core_id_to_details_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tensorflow::profiler::CoreDetails >*
OpStats::mutable_core_id_to_details() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.profiler.OpStats.core_id_to_details)
  return _internal_mutable_core_id_to_details();
}

// .tensorflow.profiler.Diagnostics diagnostics = 9;
inline bool OpStats::_internal_has_diagnostics() const {
  return this != internal_default_instance() && diagnostics_ != nullptr;
}
inline bool OpStats::has_diagnostics() const {
  return _internal_has_diagnostics();
}
inline const ::tensorflow::profiler::Diagnostics& OpStats::_internal_diagnostics() const {
  const ::tensorflow::profiler::Diagnostics* p = diagnostics_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::Diagnostics&>(
      ::tensorflow::profiler::_Diagnostics_default_instance_);
}
inline const ::tensorflow::profiler::Diagnostics& OpStats::diagnostics() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.diagnostics)
  return _internal_diagnostics();
}
inline void OpStats::unsafe_arena_set_allocated_diagnostics(
    ::tensorflow::profiler::Diagnostics* diagnostics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostics_);
  }
  diagnostics_ = diagnostics;
  if (diagnostics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.OpStats.diagnostics)
}
inline ::tensorflow::profiler::Diagnostics* OpStats::release_diagnostics() {
  
  ::tensorflow::profiler::Diagnostics* temp = diagnostics_;
  diagnostics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::Diagnostics* OpStats::unsafe_arena_release_diagnostics() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.diagnostics)
  
  ::tensorflow::profiler::Diagnostics* temp = diagnostics_;
  diagnostics_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::Diagnostics* OpStats::_internal_mutable_diagnostics() {
  
  if (diagnostics_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::Diagnostics>(GetArenaForAllocation());
    diagnostics_ = p;
  }
  return diagnostics_;
}
inline ::tensorflow::profiler::Diagnostics* OpStats::mutable_diagnostics() {
  ::tensorflow::profiler::Diagnostics* _msg = _internal_mutable_diagnostics();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.diagnostics)
  return _msg;
}
inline void OpStats::set_allocated_diagnostics(::tensorflow::profiler::Diagnostics* diagnostics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostics_);
  }
  if (diagnostics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostics));
    if (message_arena != submessage_arena) {
      diagnostics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnostics, submessage_arena);
    }
    
  } else {
    
  }
  diagnostics_ = diagnostics;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.diagnostics)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto
