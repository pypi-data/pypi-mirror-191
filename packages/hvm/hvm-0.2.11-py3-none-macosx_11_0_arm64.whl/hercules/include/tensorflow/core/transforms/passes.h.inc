/* Autogenerated by mlir-tblgen; don't manually edit */
#ifdef GEN_PASS_CLASSES

//===----------------------------------------------------------------------===//
// GraphToFunc
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class GraphToFuncBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = GraphToFuncBase;

  GraphToFuncBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  GraphToFuncBase(const GraphToFuncBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tfg-lift-graph-to-func");
  }
  ::llvm::StringRef getArgument() const override { return "tfg-lift-graph-to-func"; }

  ::llvm::StringRef getDescription() const override { return "Turns a graph into a function."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GraphToFunc");
  }
  ::llvm::StringRef getName() const override { return "GraphToFunc"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

protected:
  ::mlir::Pass::ListOption<std::string> feeds_{*this, "feeds", ::llvm::cl::desc("Comma separated list of ops that will be turned into arguments."), llvm::cl::MiscFlags::CommaSeparated};
  ::mlir::Pass::ListOption<std::string> fetches_{*this, "fetches", ::llvm::cl::desc("Comma separated list of ops that will be turned into results."), llvm::cl::MiscFlags::CommaSeparated};
  ::mlir::Pass::ListOption<std::string> control_rets_{*this, "control_rets", ::llvm::cl::desc("Comma separated list of ops that will be turned into control returned."), llvm::cl::MiscFlags::CommaSeparated};
};

//===----------------------------------------------------------------------===//
// TopoSort
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class TopoSortBase : public ::mlir::OperationPass<> {
public:
  using Base = TopoSortBase;

  TopoSortBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  TopoSortBase(const TopoSortBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tfg-toposort");
  }
  ::llvm::StringRef getArgument() const override { return "tfg-toposort"; }

  ::llvm::StringRef getDescription() const override { return "Topologically sort graph and function regions"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TopoSort");
  }
  ::llvm::StringRef getName() const override { return "TopoSort"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// GraphToFunc Registration
//===----------------------------------------------------------------------===//

inline void registerGraphToFuncPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return CreateGraphToFuncPass();
  });
}

//===----------------------------------------------------------------------===//
// TopoSort Registration
//===----------------------------------------------------------------------===//

inline void registerTopoSortPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return CreateTopoSortPass();
  });
}

//===----------------------------------------------------------------------===//
// TFGraph Registration
//===----------------------------------------------------------------------===//

inline void registerTFGraphPasses() {
  registerGraphToFuncPass();
  registerTopoSortPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
