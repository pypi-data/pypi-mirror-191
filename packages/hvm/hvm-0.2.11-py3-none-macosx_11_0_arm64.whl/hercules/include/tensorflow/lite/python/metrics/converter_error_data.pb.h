// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/python/metrics/converter_error_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto;
namespace tflite {
namespace metrics {
class ConverterErrorData;
struct ConverterErrorDataDefaultTypeInternal;
extern ConverterErrorDataDefaultTypeInternal _ConverterErrorData_default_instance_;
class ConverterErrorData_FileLoc;
struct ConverterErrorData_FileLocDefaultTypeInternal;
extern ConverterErrorData_FileLocDefaultTypeInternal _ConverterErrorData_FileLoc_default_instance_;
class ConverterErrorData_Location;
struct ConverterErrorData_LocationDefaultTypeInternal;
extern ConverterErrorData_LocationDefaultTypeInternal _ConverterErrorData_Location_default_instance_;
class ConverterErrorData_Operator;
struct ConverterErrorData_OperatorDefaultTypeInternal;
extern ConverterErrorData_OperatorDefaultTypeInternal _ConverterErrorData_Operator_default_instance_;
class ConverterErrorData_SourceLoc;
struct ConverterErrorData_SourceLocDefaultTypeInternal;
extern ConverterErrorData_SourceLocDefaultTypeInternal _ConverterErrorData_SourceLoc_default_instance_;
}  // namespace metrics
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> ::tflite::metrics::ConverterErrorData* Arena::CreateMaybeMessage<::tflite::metrics::ConverterErrorData>(Arena*);
template<> ::tflite::metrics::ConverterErrorData_FileLoc* Arena::CreateMaybeMessage<::tflite::metrics::ConverterErrorData_FileLoc>(Arena*);
template<> ::tflite::metrics::ConverterErrorData_Location* Arena::CreateMaybeMessage<::tflite::metrics::ConverterErrorData_Location>(Arena*);
template<> ::tflite::metrics::ConverterErrorData_Operator* Arena::CreateMaybeMessage<::tflite::metrics::ConverterErrorData_Operator>(Arena*);
template<> ::tflite::metrics::ConverterErrorData_SourceLoc* Arena::CreateMaybeMessage<::tflite::metrics::ConverterErrorData_SourceLoc>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tflite {
namespace metrics {

enum ConverterErrorData_ErrorCode : int {
  ConverterErrorData_ErrorCode_UNKNOWN = 0,
  ConverterErrorData_ErrorCode_ERROR_NEEDS_FLEX_OPS = 1,
  ConverterErrorData_ErrorCode_ERROR_NEEDS_CUSTOM_OPS = 2,
  ConverterErrorData_ErrorCode_ERROR_UNSUPPORTED_CONTROL_FLOW_V1 = 3,
  ConverterErrorData_ErrorCode_ERROR_GPU_NOT_COMPATIBLE = 200
};
bool ConverterErrorData_ErrorCode_IsValid(int value);
constexpr ConverterErrorData_ErrorCode ConverterErrorData_ErrorCode_ErrorCode_MIN = ConverterErrorData_ErrorCode_UNKNOWN;
constexpr ConverterErrorData_ErrorCode ConverterErrorData_ErrorCode_ErrorCode_MAX = ConverterErrorData_ErrorCode_ERROR_GPU_NOT_COMPATIBLE;
constexpr int ConverterErrorData_ErrorCode_ErrorCode_ARRAYSIZE = ConverterErrorData_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConverterErrorData_ErrorCode_descriptor();
template<typename T>
inline const std::string& ConverterErrorData_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConverterErrorData_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConverterErrorData_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConverterErrorData_ErrorCode_descriptor(), enum_t_value);
}
inline bool ConverterErrorData_ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConverterErrorData_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConverterErrorData_ErrorCode>(
    ConverterErrorData_ErrorCode_descriptor(), name, value);
}
enum ConverterErrorData_LocationType : int {
  ConverterErrorData_LocationType_UNKNOWNLOC = 0,
  ConverterErrorData_LocationType_NAMELOC = 1,
  ConverterErrorData_LocationType_CALLSITELOC = 2,
  ConverterErrorData_LocationType_FUSEDLOC = 3
};
bool ConverterErrorData_LocationType_IsValid(int value);
constexpr ConverterErrorData_LocationType ConverterErrorData_LocationType_LocationType_MIN = ConverterErrorData_LocationType_UNKNOWNLOC;
constexpr ConverterErrorData_LocationType ConverterErrorData_LocationType_LocationType_MAX = ConverterErrorData_LocationType_FUSEDLOC;
constexpr int ConverterErrorData_LocationType_LocationType_ARRAYSIZE = ConverterErrorData_LocationType_LocationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConverterErrorData_LocationType_descriptor();
template<typename T>
inline const std::string& ConverterErrorData_LocationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConverterErrorData_LocationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConverterErrorData_LocationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConverterErrorData_LocationType_descriptor(), enum_t_value);
}
inline bool ConverterErrorData_LocationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConverterErrorData_LocationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConverterErrorData_LocationType>(
    ConverterErrorData_LocationType_descriptor(), name, value);
}
// ===================================================================

class ConverterErrorData_Operator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.metrics.ConverterErrorData.Operator) */ {
 public:
  inline ConverterErrorData_Operator() : ConverterErrorData_Operator(nullptr) {}
  ~ConverterErrorData_Operator() override;
  explicit constexpr ConverterErrorData_Operator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConverterErrorData_Operator(const ConverterErrorData_Operator& from);
  ConverterErrorData_Operator(ConverterErrorData_Operator&& from) noexcept
    : ConverterErrorData_Operator() {
    *this = ::std::move(from);
  }

  inline ConverterErrorData_Operator& operator=(const ConverterErrorData_Operator& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConverterErrorData_Operator& operator=(ConverterErrorData_Operator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConverterErrorData_Operator& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConverterErrorData_Operator* internal_default_instance() {
    return reinterpret_cast<const ConverterErrorData_Operator*>(
               &_ConverterErrorData_Operator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConverterErrorData_Operator& a, ConverterErrorData_Operator& b) {
    a.Swap(&b);
  }
  inline void Swap(ConverterErrorData_Operator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConverterErrorData_Operator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConverterErrorData_Operator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConverterErrorData_Operator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConverterErrorData_Operator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConverterErrorData_Operator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterErrorData_Operator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.metrics.ConverterErrorData.Operator";
  }
  protected:
  explicit ConverterErrorData_Operator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tflite.metrics.ConverterErrorData.Operator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ConverterErrorData_FileLoc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.metrics.ConverterErrorData.FileLoc) */ {
 public:
  inline ConverterErrorData_FileLoc() : ConverterErrorData_FileLoc(nullptr) {}
  ~ConverterErrorData_FileLoc() override;
  explicit constexpr ConverterErrorData_FileLoc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConverterErrorData_FileLoc(const ConverterErrorData_FileLoc& from);
  ConverterErrorData_FileLoc(ConverterErrorData_FileLoc&& from) noexcept
    : ConverterErrorData_FileLoc() {
    *this = ::std::move(from);
  }

  inline ConverterErrorData_FileLoc& operator=(const ConverterErrorData_FileLoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConverterErrorData_FileLoc& operator=(ConverterErrorData_FileLoc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConverterErrorData_FileLoc& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConverterErrorData_FileLoc* internal_default_instance() {
    return reinterpret_cast<const ConverterErrorData_FileLoc*>(
               &_ConverterErrorData_FileLoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConverterErrorData_FileLoc& a, ConverterErrorData_FileLoc& b) {
    a.Swap(&b);
  }
  inline void Swap(ConverterErrorData_FileLoc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConverterErrorData_FileLoc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConverterErrorData_FileLoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConverterErrorData_FileLoc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConverterErrorData_FileLoc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConverterErrorData_FileLoc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterErrorData_FileLoc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.metrics.ConverterErrorData.FileLoc";
  }
  protected:
  explicit ConverterErrorData_FileLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kLineFieldNumber = 2,
    kColumnFieldNumber = 3,
  };
  // optional string filename = 1;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional uint32 line = 2;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  uint32_t line() const;
  void set_line(uint32_t value);
  private:
  uint32_t _internal_line() const;
  void _internal_set_line(uint32_t value);
  public:

  // optional uint32 column = 3;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  uint32_t column() const;
  void set_column(uint32_t value);
  private:
  uint32_t _internal_column() const;
  void _internal_set_column(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.metrics.ConverterErrorData.FileLoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  uint32_t line_;
  uint32_t column_;
  friend struct ::TableStruct_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ConverterErrorData_SourceLoc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.metrics.ConverterErrorData.SourceLoc) */ {
 public:
  inline ConverterErrorData_SourceLoc() : ConverterErrorData_SourceLoc(nullptr) {}
  ~ConverterErrorData_SourceLoc() override;
  explicit constexpr ConverterErrorData_SourceLoc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConverterErrorData_SourceLoc(const ConverterErrorData_SourceLoc& from);
  ConverterErrorData_SourceLoc(ConverterErrorData_SourceLoc&& from) noexcept
    : ConverterErrorData_SourceLoc() {
    *this = ::std::move(from);
  }

  inline ConverterErrorData_SourceLoc& operator=(const ConverterErrorData_SourceLoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConverterErrorData_SourceLoc& operator=(ConverterErrorData_SourceLoc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConverterErrorData_SourceLoc& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConverterErrorData_SourceLoc* internal_default_instance() {
    return reinterpret_cast<const ConverterErrorData_SourceLoc*>(
               &_ConverterErrorData_SourceLoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConverterErrorData_SourceLoc& a, ConverterErrorData_SourceLoc& b) {
    a.Swap(&b);
  }
  inline void Swap(ConverterErrorData_SourceLoc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConverterErrorData_SourceLoc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConverterErrorData_SourceLoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConverterErrorData_SourceLoc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConverterErrorData_SourceLoc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConverterErrorData_SourceLoc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterErrorData_SourceLoc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.metrics.ConverterErrorData.SourceLoc";
  }
  protected:
  explicit ConverterErrorData_SourceLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSourceFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .tflite.metrics.ConverterErrorData.FileLoc source = 2;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::tflite::metrics::ConverterErrorData_FileLoc& source() const;
  PROTOBUF_NODISCARD ::tflite::metrics::ConverterErrorData_FileLoc* release_source();
  ::tflite::metrics::ConverterErrorData_FileLoc* mutable_source();
  void set_allocated_source(::tflite::metrics::ConverterErrorData_FileLoc* source);
  private:
  const ::tflite::metrics::ConverterErrorData_FileLoc& _internal_source() const;
  ::tflite::metrics::ConverterErrorData_FileLoc* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::tflite::metrics::ConverterErrorData_FileLoc* source);
  ::tflite::metrics::ConverterErrorData_FileLoc* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:tflite.metrics.ConverterErrorData.SourceLoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::tflite::metrics::ConverterErrorData_FileLoc* source_;
  friend struct ::TableStruct_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ConverterErrorData_Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.metrics.ConverterErrorData.Location) */ {
 public:
  inline ConverterErrorData_Location() : ConverterErrorData_Location(nullptr) {}
  ~ConverterErrorData_Location() override;
  explicit constexpr ConverterErrorData_Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConverterErrorData_Location(const ConverterErrorData_Location& from);
  ConverterErrorData_Location(ConverterErrorData_Location&& from) noexcept
    : ConverterErrorData_Location() {
    *this = ::std::move(from);
  }

  inline ConverterErrorData_Location& operator=(const ConverterErrorData_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConverterErrorData_Location& operator=(ConverterErrorData_Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConverterErrorData_Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConverterErrorData_Location* internal_default_instance() {
    return reinterpret_cast<const ConverterErrorData_Location*>(
               &_ConverterErrorData_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConverterErrorData_Location& a, ConverterErrorData_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(ConverterErrorData_Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConverterErrorData_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConverterErrorData_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConverterErrorData_Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConverterErrorData_Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConverterErrorData_Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterErrorData_Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.metrics.ConverterErrorData.Location";
  }
  protected:
  explicit ConverterErrorData_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .tflite.metrics.ConverterErrorData.SourceLoc call = 2;
  int call_size() const;
  private:
  int _internal_call_size() const;
  public:
  void clear_call();
  ::tflite::metrics::ConverterErrorData_SourceLoc* mutable_call(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::metrics::ConverterErrorData_SourceLoc >*
      mutable_call();
  private:
  const ::tflite::metrics::ConverterErrorData_SourceLoc& _internal_call(int index) const;
  ::tflite::metrics::ConverterErrorData_SourceLoc* _internal_add_call();
  public:
  const ::tflite::metrics::ConverterErrorData_SourceLoc& call(int index) const;
  ::tflite::metrics::ConverterErrorData_SourceLoc* add_call();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::metrics::ConverterErrorData_SourceLoc >&
      call() const;

  // optional .tflite.metrics.ConverterErrorData.LocationType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::tflite::metrics::ConverterErrorData_LocationType type() const;
  void set_type(::tflite::metrics::ConverterErrorData_LocationType value);
  private:
  ::tflite::metrics::ConverterErrorData_LocationType _internal_type() const;
  void _internal_set_type(::tflite::metrics::ConverterErrorData_LocationType value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.metrics.ConverterErrorData.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::metrics::ConverterErrorData_SourceLoc > call_;
  int type_;
  friend struct ::TableStruct_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ConverterErrorData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.metrics.ConverterErrorData) */ {
 public:
  inline ConverterErrorData() : ConverterErrorData(nullptr) {}
  ~ConverterErrorData() override;
  explicit constexpr ConverterErrorData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConverterErrorData(const ConverterErrorData& from);
  ConverterErrorData(ConverterErrorData&& from) noexcept
    : ConverterErrorData() {
    *this = ::std::move(from);
  }

  inline ConverterErrorData& operator=(const ConverterErrorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConverterErrorData& operator=(ConverterErrorData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConverterErrorData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConverterErrorData* internal_default_instance() {
    return reinterpret_cast<const ConverterErrorData*>(
               &_ConverterErrorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConverterErrorData& a, ConverterErrorData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConverterErrorData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConverterErrorData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConverterErrorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConverterErrorData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConverterErrorData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConverterErrorData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterErrorData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.metrics.ConverterErrorData";
  }
  protected:
  explicit ConverterErrorData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConverterErrorData_Operator Operator;
  typedef ConverterErrorData_FileLoc FileLoc;
  typedef ConverterErrorData_SourceLoc SourceLoc;
  typedef ConverterErrorData_Location Location;

  typedef ConverterErrorData_ErrorCode ErrorCode;
  static constexpr ErrorCode UNKNOWN =
    ConverterErrorData_ErrorCode_UNKNOWN;
  static constexpr ErrorCode ERROR_NEEDS_FLEX_OPS =
    ConverterErrorData_ErrorCode_ERROR_NEEDS_FLEX_OPS;
  static constexpr ErrorCode ERROR_NEEDS_CUSTOM_OPS =
    ConverterErrorData_ErrorCode_ERROR_NEEDS_CUSTOM_OPS;
  static constexpr ErrorCode ERROR_UNSUPPORTED_CONTROL_FLOW_V1 =
    ConverterErrorData_ErrorCode_ERROR_UNSUPPORTED_CONTROL_FLOW_V1;
  static constexpr ErrorCode ERROR_GPU_NOT_COMPATIBLE =
    ConverterErrorData_ErrorCode_ERROR_GPU_NOT_COMPATIBLE;
  static inline bool ErrorCode_IsValid(int value) {
    return ConverterErrorData_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    ConverterErrorData_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    ConverterErrorData_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    ConverterErrorData_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return ConverterErrorData_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return ConverterErrorData_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorCode* value) {
    return ConverterErrorData_ErrorCode_Parse(name, value);
  }

  typedef ConverterErrorData_LocationType LocationType;
  static constexpr LocationType UNKNOWNLOC =
    ConverterErrorData_LocationType_UNKNOWNLOC;
  static constexpr LocationType NAMELOC =
    ConverterErrorData_LocationType_NAMELOC;
  static constexpr LocationType CALLSITELOC =
    ConverterErrorData_LocationType_CALLSITELOC;
  static constexpr LocationType FUSEDLOC =
    ConverterErrorData_LocationType_FUSEDLOC;
  static inline bool LocationType_IsValid(int value) {
    return ConverterErrorData_LocationType_IsValid(value);
  }
  static constexpr LocationType LocationType_MIN =
    ConverterErrorData_LocationType_LocationType_MIN;
  static constexpr LocationType LocationType_MAX =
    ConverterErrorData_LocationType_LocationType_MAX;
  static constexpr int LocationType_ARRAYSIZE =
    ConverterErrorData_LocationType_LocationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LocationType_descriptor() {
    return ConverterErrorData_LocationType_descriptor();
  }
  template<typename T>
  static inline const std::string& LocationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LocationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LocationType_Name.");
    return ConverterErrorData_LocationType_Name(enum_t_value);
  }
  static inline bool LocationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LocationType* value) {
    return ConverterErrorData_LocationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComponentFieldNumber = 1,
    kSubcomponentFieldNumber = 2,
    kErrorMessageFieldNumber = 4,
    kOperatorFieldNumber = 5,
    kLocationFieldNumber = 6,
    kErrorCodeFieldNumber = 3,
  };
  // optional string component = 1;
  bool has_component() const;
  private:
  bool _internal_has_component() const;
  public:
  void clear_component();
  const std::string& component() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* component);
  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(const std::string& value);
  std::string* _internal_mutable_component();
  public:

  // optional string subcomponent = 2;
  bool has_subcomponent() const;
  private:
  bool _internal_has_subcomponent() const;
  public:
  void clear_subcomponent();
  const std::string& subcomponent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subcomponent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subcomponent();
  PROTOBUF_NODISCARD std::string* release_subcomponent();
  void set_allocated_subcomponent(std::string* subcomponent);
  private:
  const std::string& _internal_subcomponent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subcomponent(const std::string& value);
  std::string* _internal_mutable_subcomponent();
  public:

  // optional string error_message = 4;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional .tflite.metrics.ConverterErrorData.Operator operator = 5;
  bool has_operator_() const;
  private:
  bool _internal_has_operator_() const;
  public:
  void clear_operator_();
  const ::tflite::metrics::ConverterErrorData_Operator& operator_() const;
  PROTOBUF_NODISCARD ::tflite::metrics::ConverterErrorData_Operator* release_operator_();
  ::tflite::metrics::ConverterErrorData_Operator* mutable_operator_();
  void set_allocated_operator_(::tflite::metrics::ConverterErrorData_Operator* operator_);
  private:
  const ::tflite::metrics::ConverterErrorData_Operator& _internal_operator_() const;
  ::tflite::metrics::ConverterErrorData_Operator* _internal_mutable_operator_();
  public:
  void unsafe_arena_set_allocated_operator_(
      ::tflite::metrics::ConverterErrorData_Operator* operator_);
  ::tflite::metrics::ConverterErrorData_Operator* unsafe_arena_release_operator_();

  // optional .tflite.metrics.ConverterErrorData.Location location = 6;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::tflite::metrics::ConverterErrorData_Location& location() const;
  PROTOBUF_NODISCARD ::tflite::metrics::ConverterErrorData_Location* release_location();
  ::tflite::metrics::ConverterErrorData_Location* mutable_location();
  void set_allocated_location(::tflite::metrics::ConverterErrorData_Location* location);
  private:
  const ::tflite::metrics::ConverterErrorData_Location& _internal_location() const;
  ::tflite::metrics::ConverterErrorData_Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::tflite::metrics::ConverterErrorData_Location* location);
  ::tflite::metrics::ConverterErrorData_Location* unsafe_arena_release_location();

  // optional .tflite.metrics.ConverterErrorData.ErrorCode error_code = 3;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::tflite::metrics::ConverterErrorData_ErrorCode error_code() const;
  void set_error_code(::tflite::metrics::ConverterErrorData_ErrorCode value);
  private:
  ::tflite::metrics::ConverterErrorData_ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::tflite::metrics::ConverterErrorData_ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.metrics.ConverterErrorData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subcomponent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::tflite::metrics::ConverterErrorData_Operator* operator__;
  ::tflite::metrics::ConverterErrorData_Location* location_;
  int error_code_;
  friend struct ::TableStruct_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConverterErrorData_Operator

// optional string name = 1;
inline bool ConverterErrorData_Operator::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConverterErrorData_Operator::has_name() const {
  return _internal_has_name();
}
inline void ConverterErrorData_Operator::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConverterErrorData_Operator::name() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.Operator.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterErrorData_Operator::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.Operator.name)
}
inline std::string* ConverterErrorData_Operator::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.Operator.name)
  return _s;
}
inline const std::string& ConverterErrorData_Operator::_internal_name() const {
  return name_.Get();
}
inline void ConverterErrorData_Operator::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConverterErrorData_Operator::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConverterErrorData_Operator::release_name() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.Operator.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterErrorData_Operator::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.Operator.name)
}

// -------------------------------------------------------------------

// ConverterErrorData_FileLoc

// optional string filename = 1;
inline bool ConverterErrorData_FileLoc::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConverterErrorData_FileLoc::has_filename() const {
  return _internal_has_filename();
}
inline void ConverterErrorData_FileLoc::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConverterErrorData_FileLoc::filename() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.FileLoc.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterErrorData_FileLoc::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.FileLoc.filename)
}
inline std::string* ConverterErrorData_FileLoc::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.FileLoc.filename)
  return _s;
}
inline const std::string& ConverterErrorData_FileLoc::_internal_filename() const {
  return filename_.Get();
}
inline void ConverterErrorData_FileLoc::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConverterErrorData_FileLoc::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConverterErrorData_FileLoc::release_filename() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.FileLoc.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterErrorData_FileLoc::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.FileLoc.filename)
}

// optional uint32 line = 2;
inline bool ConverterErrorData_FileLoc::_internal_has_line() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConverterErrorData_FileLoc::has_line() const {
  return _internal_has_line();
}
inline void ConverterErrorData_FileLoc::clear_line() {
  line_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ConverterErrorData_FileLoc::_internal_line() const {
  return line_;
}
inline uint32_t ConverterErrorData_FileLoc::line() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.FileLoc.line)
  return _internal_line();
}
inline void ConverterErrorData_FileLoc::_internal_set_line(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  line_ = value;
}
inline void ConverterErrorData_FileLoc::set_line(uint32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.FileLoc.line)
}

// optional uint32 column = 3;
inline bool ConverterErrorData_FileLoc::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConverterErrorData_FileLoc::has_column() const {
  return _internal_has_column();
}
inline void ConverterErrorData_FileLoc::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ConverterErrorData_FileLoc::_internal_column() const {
  return column_;
}
inline uint32_t ConverterErrorData_FileLoc::column() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.FileLoc.column)
  return _internal_column();
}
inline void ConverterErrorData_FileLoc::_internal_set_column(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  column_ = value;
}
inline void ConverterErrorData_FileLoc::set_column(uint32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.FileLoc.column)
}

// -------------------------------------------------------------------

// ConverterErrorData_SourceLoc

// optional string name = 1;
inline bool ConverterErrorData_SourceLoc::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConverterErrorData_SourceLoc::has_name() const {
  return _internal_has_name();
}
inline void ConverterErrorData_SourceLoc::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConverterErrorData_SourceLoc::name() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.SourceLoc.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterErrorData_SourceLoc::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.SourceLoc.name)
}
inline std::string* ConverterErrorData_SourceLoc::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.SourceLoc.name)
  return _s;
}
inline const std::string& ConverterErrorData_SourceLoc::_internal_name() const {
  return name_.Get();
}
inline void ConverterErrorData_SourceLoc::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConverterErrorData_SourceLoc::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConverterErrorData_SourceLoc::release_name() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.SourceLoc.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterErrorData_SourceLoc::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.SourceLoc.name)
}

// optional .tflite.metrics.ConverterErrorData.FileLoc source = 2;
inline bool ConverterErrorData_SourceLoc::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || source_ != nullptr);
  return value;
}
inline bool ConverterErrorData_SourceLoc::has_source() const {
  return _internal_has_source();
}
inline void ConverterErrorData_SourceLoc::clear_source() {
  if (source_ != nullptr) source_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::tflite::metrics::ConverterErrorData_FileLoc& ConverterErrorData_SourceLoc::_internal_source() const {
  const ::tflite::metrics::ConverterErrorData_FileLoc* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::metrics::ConverterErrorData_FileLoc&>(
      ::tflite::metrics::_ConverterErrorData_FileLoc_default_instance_);
}
inline const ::tflite::metrics::ConverterErrorData_FileLoc& ConverterErrorData_SourceLoc::source() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.SourceLoc.source)
  return _internal_source();
}
inline void ConverterErrorData_SourceLoc::unsafe_arena_set_allocated_source(
    ::tflite::metrics::ConverterErrorData_FileLoc* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.metrics.ConverterErrorData.SourceLoc.source)
}
inline ::tflite::metrics::ConverterErrorData_FileLoc* ConverterErrorData_SourceLoc::release_source() {
  _has_bits_[0] &= ~0x00000002u;
  ::tflite::metrics::ConverterErrorData_FileLoc* temp = source_;
  source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::metrics::ConverterErrorData_FileLoc* ConverterErrorData_SourceLoc::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.SourceLoc.source)
  _has_bits_[0] &= ~0x00000002u;
  ::tflite::metrics::ConverterErrorData_FileLoc* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::tflite::metrics::ConverterErrorData_FileLoc* ConverterErrorData_SourceLoc::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000002u;
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::metrics::ConverterErrorData_FileLoc>(GetArenaForAllocation());
    source_ = p;
  }
  return source_;
}
inline ::tflite::metrics::ConverterErrorData_FileLoc* ConverterErrorData_SourceLoc::mutable_source() {
  ::tflite::metrics::ConverterErrorData_FileLoc* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.SourceLoc.source)
  return _msg;
}
inline void ConverterErrorData_SourceLoc::set_allocated_source(::tflite::metrics::ConverterErrorData_FileLoc* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tflite::metrics::ConverterErrorData_FileLoc>::GetOwningArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.SourceLoc.source)
}

// -------------------------------------------------------------------

// ConverterErrorData_Location

// optional .tflite.metrics.ConverterErrorData.LocationType type = 1;
inline bool ConverterErrorData_Location::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConverterErrorData_Location::has_type() const {
  return _internal_has_type();
}
inline void ConverterErrorData_Location::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::tflite::metrics::ConverterErrorData_LocationType ConverterErrorData_Location::_internal_type() const {
  return static_cast< ::tflite::metrics::ConverterErrorData_LocationType >(type_);
}
inline ::tflite::metrics::ConverterErrorData_LocationType ConverterErrorData_Location::type() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.Location.type)
  return _internal_type();
}
inline void ConverterErrorData_Location::_internal_set_type(::tflite::metrics::ConverterErrorData_LocationType value) {
  assert(::tflite::metrics::ConverterErrorData_LocationType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void ConverterErrorData_Location::set_type(::tflite::metrics::ConverterErrorData_LocationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.Location.type)
}

// repeated .tflite.metrics.ConverterErrorData.SourceLoc call = 2;
inline int ConverterErrorData_Location::_internal_call_size() const {
  return call_.size();
}
inline int ConverterErrorData_Location::call_size() const {
  return _internal_call_size();
}
inline void ConverterErrorData_Location::clear_call() {
  call_.Clear();
}
inline ::tflite::metrics::ConverterErrorData_SourceLoc* ConverterErrorData_Location::mutable_call(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.Location.call)
  return call_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::metrics::ConverterErrorData_SourceLoc >*
ConverterErrorData_Location::mutable_call() {
  // @@protoc_insertion_point(field_mutable_list:tflite.metrics.ConverterErrorData.Location.call)
  return &call_;
}
inline const ::tflite::metrics::ConverterErrorData_SourceLoc& ConverterErrorData_Location::_internal_call(int index) const {
  return call_.Get(index);
}
inline const ::tflite::metrics::ConverterErrorData_SourceLoc& ConverterErrorData_Location::call(int index) const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.Location.call)
  return _internal_call(index);
}
inline ::tflite::metrics::ConverterErrorData_SourceLoc* ConverterErrorData_Location::_internal_add_call() {
  return call_.Add();
}
inline ::tflite::metrics::ConverterErrorData_SourceLoc* ConverterErrorData_Location::add_call() {
  ::tflite::metrics::ConverterErrorData_SourceLoc* _add = _internal_add_call();
  // @@protoc_insertion_point(field_add:tflite.metrics.ConverterErrorData.Location.call)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::metrics::ConverterErrorData_SourceLoc >&
ConverterErrorData_Location::call() const {
  // @@protoc_insertion_point(field_list:tflite.metrics.ConverterErrorData.Location.call)
  return call_;
}

// -------------------------------------------------------------------

// ConverterErrorData

// optional string component = 1;
inline bool ConverterErrorData::_internal_has_component() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConverterErrorData::has_component() const {
  return _internal_has_component();
}
inline void ConverterErrorData::clear_component() {
  component_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConverterErrorData::component() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.component)
  return _internal_component();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterErrorData::set_component(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.component)
}
inline std::string* ConverterErrorData::mutable_component() {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.component)
  return _s;
}
inline const std::string& ConverterErrorData::_internal_component() const {
  return component_.Get();
}
inline void ConverterErrorData::_internal_set_component(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConverterErrorData::_internal_mutable_component() {
  _has_bits_[0] |= 0x00000001u;
  return component_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConverterErrorData::release_component() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.component)
  if (!_internal_has_component()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = component_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterErrorData::set_allocated_component(std::string* component) {
  if (component != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.component)
}

// optional string subcomponent = 2;
inline bool ConverterErrorData::_internal_has_subcomponent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConverterErrorData::has_subcomponent() const {
  return _internal_has_subcomponent();
}
inline void ConverterErrorData::clear_subcomponent() {
  subcomponent_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConverterErrorData::subcomponent() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.subcomponent)
  return _internal_subcomponent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterErrorData::set_subcomponent(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 subcomponent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.subcomponent)
}
inline std::string* ConverterErrorData::mutable_subcomponent() {
  std::string* _s = _internal_mutable_subcomponent();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.subcomponent)
  return _s;
}
inline const std::string& ConverterErrorData::_internal_subcomponent() const {
  return subcomponent_.Get();
}
inline void ConverterErrorData::_internal_set_subcomponent(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  subcomponent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConverterErrorData::_internal_mutable_subcomponent() {
  _has_bits_[0] |= 0x00000002u;
  return subcomponent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConverterErrorData::release_subcomponent() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.subcomponent)
  if (!_internal_has_subcomponent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = subcomponent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subcomponent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subcomponent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterErrorData::set_allocated_subcomponent(std::string* subcomponent) {
  if (subcomponent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  subcomponent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subcomponent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subcomponent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subcomponent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.subcomponent)
}

// optional .tflite.metrics.ConverterErrorData.ErrorCode error_code = 3;
inline bool ConverterErrorData::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConverterErrorData::has_error_code() const {
  return _internal_has_error_code();
}
inline void ConverterErrorData::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::tflite::metrics::ConverterErrorData_ErrorCode ConverterErrorData::_internal_error_code() const {
  return static_cast< ::tflite::metrics::ConverterErrorData_ErrorCode >(error_code_);
}
inline ::tflite::metrics::ConverterErrorData_ErrorCode ConverterErrorData::error_code() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.error_code)
  return _internal_error_code();
}
inline void ConverterErrorData::_internal_set_error_code(::tflite::metrics::ConverterErrorData_ErrorCode value) {
  assert(::tflite::metrics::ConverterErrorData_ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  error_code_ = value;
}
inline void ConverterErrorData::set_error_code(::tflite::metrics::ConverterErrorData_ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.error_code)
}

// optional string error_message = 4;
inline bool ConverterErrorData::_internal_has_error_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConverterErrorData::has_error_message() const {
  return _internal_has_error_message();
}
inline void ConverterErrorData::clear_error_message() {
  error_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConverterErrorData::error_message() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterErrorData::set_error_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.error_message)
}
inline std::string* ConverterErrorData::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.error_message)
  return _s;
}
inline const std::string& ConverterErrorData::_internal_error_message() const {
  return error_message_.Get();
}
inline void ConverterErrorData::_internal_set_error_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConverterErrorData::_internal_mutable_error_message() {
  _has_bits_[0] |= 0x00000004u;
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConverterErrorData::release_error_message() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = error_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterErrorData::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.error_message)
}

// optional .tflite.metrics.ConverterErrorData.Operator operator = 5;
inline bool ConverterErrorData::_internal_has_operator_() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || operator__ != nullptr);
  return value;
}
inline bool ConverterErrorData::has_operator_() const {
  return _internal_has_operator_();
}
inline void ConverterErrorData::clear_operator_() {
  if (operator__ != nullptr) operator__->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::tflite::metrics::ConverterErrorData_Operator& ConverterErrorData::_internal_operator_() const {
  const ::tflite::metrics::ConverterErrorData_Operator* p = operator__;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::metrics::ConverterErrorData_Operator&>(
      ::tflite::metrics::_ConverterErrorData_Operator_default_instance_);
}
inline const ::tflite::metrics::ConverterErrorData_Operator& ConverterErrorData::operator_() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.operator)
  return _internal_operator_();
}
inline void ConverterErrorData::unsafe_arena_set_allocated_operator_(
    ::tflite::metrics::ConverterErrorData_Operator* operator_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operator__);
  }
  operator__ = operator_;
  if (operator_) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.metrics.ConverterErrorData.operator)
}
inline ::tflite::metrics::ConverterErrorData_Operator* ConverterErrorData::release_operator_() {
  _has_bits_[0] &= ~0x00000008u;
  ::tflite::metrics::ConverterErrorData_Operator* temp = operator__;
  operator__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::metrics::ConverterErrorData_Operator* ConverterErrorData::unsafe_arena_release_operator_() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.operator)
  _has_bits_[0] &= ~0x00000008u;
  ::tflite::metrics::ConverterErrorData_Operator* temp = operator__;
  operator__ = nullptr;
  return temp;
}
inline ::tflite::metrics::ConverterErrorData_Operator* ConverterErrorData::_internal_mutable_operator_() {
  _has_bits_[0] |= 0x00000008u;
  if (operator__ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::metrics::ConverterErrorData_Operator>(GetArenaForAllocation());
    operator__ = p;
  }
  return operator__;
}
inline ::tflite::metrics::ConverterErrorData_Operator* ConverterErrorData::mutable_operator_() {
  ::tflite::metrics::ConverterErrorData_Operator* _msg = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.operator)
  return _msg;
}
inline void ConverterErrorData::set_allocated_operator_(::tflite::metrics::ConverterErrorData_Operator* operator_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete operator__;
  }
  if (operator_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tflite::metrics::ConverterErrorData_Operator>::GetOwningArena(operator_);
    if (message_arena != submessage_arena) {
      operator_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operator_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  operator__ = operator_;
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.operator)
}

// optional .tflite.metrics.ConverterErrorData.Location location = 6;
inline bool ConverterErrorData::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool ConverterErrorData::has_location() const {
  return _internal_has_location();
}
inline void ConverterErrorData::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::tflite::metrics::ConverterErrorData_Location& ConverterErrorData::_internal_location() const {
  const ::tflite::metrics::ConverterErrorData_Location* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::metrics::ConverterErrorData_Location&>(
      ::tflite::metrics::_ConverterErrorData_Location_default_instance_);
}
inline const ::tflite::metrics::ConverterErrorData_Location& ConverterErrorData::location() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.location)
  return _internal_location();
}
inline void ConverterErrorData::unsafe_arena_set_allocated_location(
    ::tflite::metrics::ConverterErrorData_Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.metrics.ConverterErrorData.location)
}
inline ::tflite::metrics::ConverterErrorData_Location* ConverterErrorData::release_location() {
  _has_bits_[0] &= ~0x00000010u;
  ::tflite::metrics::ConverterErrorData_Location* temp = location_;
  location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tflite::metrics::ConverterErrorData_Location* ConverterErrorData::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.location)
  _has_bits_[0] &= ~0x00000010u;
  ::tflite::metrics::ConverterErrorData_Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::tflite::metrics::ConverterErrorData_Location* ConverterErrorData::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000010u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::metrics::ConverterErrorData_Location>(GetArenaForAllocation());
    location_ = p;
  }
  return location_;
}
inline ::tflite::metrics::ConverterErrorData_Location* ConverterErrorData::mutable_location() {
  ::tflite::metrics::ConverterErrorData_Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.location)
  return _msg;
}
inline void ConverterErrorData::set_allocated_location(::tflite::metrics::ConverterErrorData_Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tflite::metrics::ConverterErrorData_Location>::GetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics
}  // namespace tflite

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tflite::metrics::ConverterErrorData_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tflite::metrics::ConverterErrorData_ErrorCode>() {
  return ::tflite::metrics::ConverterErrorData_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::tflite::metrics::ConverterErrorData_LocationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tflite::metrics::ConverterErrorData_LocationType>() {
  return ::tflite::metrics::ConverterErrorData_LocationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto
