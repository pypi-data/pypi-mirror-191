#:schema https://raw.githubusercontent.com/voidei/schemastore/patch-1/src/schemas/json/pyproject.json
[tool.poetry]
  authors     = ["Greg Albrecht <gba@splunk.com>"]
  description = "PyPiRC: .pypirc Manager"
  license     = "Apache-2.0"
  maintainers = ["Dawn Walker <dawniepieuwu@gmail.com>"]
  name        = "pypirc-voidei"
  readme      = "README.md"
  repository  = "https://github.com/voidei/pypirc"
  version     = "1.0.9"

  exclude = ["pypirc_chappers", "pypirc_original"]
  include = ["LICENSE.txt", "README.md"]

  packages = [{ "include" = "pypirc" }]

  [tool.poetry.scripts]
    pypirc = "pypirc.cmd:main"

  [tool.poetry.urls]
    pypirc-chappers = "https://github.com/chappers/pypirc"
    pypirc-original = "https://github.com/ampledata/pypirc"

  [tool.poetry.dependencies]
    python = ">=3.11,<4"
  prettyprinter = "^0.18.0"

  [tool.poetry.group.dev.dependencies]
    black  = "^23.1.0"
    isort  = "^5.12.0"
    mypy   = "^1.0.0"
    pylint = "^2.16.1"
    ruff   = "^0.0.245"

  [tool.poetry.group.test.dependencies]
    bandit          = "^1.7.4"
    coverage        = "^7.1.0"
    pytest          = "^7.2.1"
    pytest-cov      = "^4.0.0"
    pytest-mypy     = "^0.10.3"
    pytest-randomly = "^3.12.0"
    pytest-subtests = "^0.9.0"

[build-system]
  build-backend = "poetry.core.masonry.api"
  requires      = ["poetry-core"]


[tool.black]
  exclude = '''
  (
      __pycache__
      | \.git
      | \.mypy_cache
      | \.pytest_cache
      | \.vscode
      | \.venv
      | \bdist\b
      | \bdoc\b
      | .*\.jinja\.py
  )
  '''
  include = '\.pyi?$'
  line-length = 88
  target-version = "py311"

[tool.isort]
  known_future_library = ["future"]
  multi_line_output    = 3
  profile              = "black"
  py_version           = 311


[tool.mypy]
  exclude = '''(?ix)(
      ^pypirc_.+\/.*\.py$
      | ^.*\.jinja\.py$
      #| ^.*\.pyi$    # .pyi files
      )''' # TOML's single-quoted strings do not require escaping backslashes
  files = ["pypirc"]
  python_version = "3.11"

  check_untyped_defs       = true
  disallow_any_generics    = true
  disallow_incomplete_defs = true
  disallow_untyped_calls   = true
  disallow_untyped_defs    = true
  ignore_missing_imports   = true
  incremental              = false
  no_implicit_optional     = true
  no_implicit_reexport     = true
  no_site_packages         = false
  show_error_codes         = true
  strict                   = true
  strict_equality          = true
  warn_redundant_casts     = true
  warn_return_any          = true
  warn_unreachable         = true
  warn_unused_configs      = true
  warn_unused_ignores      = true


[tool.ruff]
  format = "text"
  ignore = [
    "ANN003", # missing type for kwargs - e.g. **kwargs or **{name}
    "ANN101", # type annotation for `self`
    "ANN102", # type annotation for `cls`
    "COM819", # trailing-comma-prohibited - trailing-comma-missing is enabled
    "D107",   # missing docstring for __init__
    "D203",   # blank line before class docstring
    "D212",   # multi-line docstring summary start on first line
    "D401",   # that imperative mood bullshit
    "ERA001", # commented-out-code
    "FBT",    # boolean trap
    "G004",   # f-string in logging statement
    "I001",   # sort imports - handled by isort
    "ISC002", # implicitly concatenated strings over multiple lines
    "PGH003", # blanket type ignore
    "T201",   # "print found"
    "UP012",  # encoding specification
    "UP035",  # "import from x instead" - has issues w/ typing_extensions
  ]
  line-length = 88
  select = ["ALL"]
  unfixable = [
    "F401", # unused imports
    "F841", # unused variable
    #"ERA001", # commented out code
    #"T201",   # "print found"
  ]

  exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytest_cache",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pycache__",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "pypirc_chappers",
    "pypirc_original",
  ]
  # Allow unused variables when underscore-prefixed
  dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
  # Assume python 3.11
  target-version = "py311"

  mccabe = { max-complexity = 10 }

  per-file-ignores = { "__init__.py" = [
    "E402", # import violations
    #"E501", # line length
    "F401", # unused-imports
  ], "*test*/*.py" = [
    "D",      # pydocstyle
    "INP001", # missing __init__.py
  ], "setup.py" = [
    "D",      # pydocstyle
    "EXE001", # shebang
    "INP001", # missing __init__.py
  ], "testing/*.py" = [
    "ANN401", # dynamic-type for variables and w/e - aka using Any for an arg lmao
    "E501",   # line length
    "PT004",  # prefix no-return functions with underscore
    "S101",   # use of assert
    "TCH002", # third-party into TYPE_CHECKING block
    "TCH003", # standard-library import into TYPE_CHECKING block
  ], "pypirc_*" = [
    "ALL",
  ] }

  #[tool.ruff.isort]
  # black profile
  #    multi-line-output = 3
  #    include-trailing-comma = true
  #    force-grid-wrap = 0
  #    use-parentheses = true
  #    ensure-newline-before-comments = true
  #    line-length = 88
  #    split-on-trailing-comma = true

  [tool.ruff.pylint]
    allow-magic-value-types = ["bytes", "int", "str"]
[tool.pylint]
  [tool.pylint.main]
    # Specify a score threshold under which the program will exit with error.
    fail-under = 10

    # A comma-separated list of package or module names from where C extensions may
    # be loaded. Extensions are loading into the active Python interpreter and may
    # run arbitrary code.
    extension-pkg-allow-list = ["lxml"]


    # Files or directories to be skipped. They should be base names, not paths.
    ignore = [
      ".mypy_cache",
      ".pytest_cache",
      ".venv",
      "CVS",
      "__pycache__",
      "pypirc_chappers",
      "pypirc_original",
      "scoop",
    ]

    # Files or directories matching the regular expression patterns are skipped. The
    # regex matches against base names, not paths. The default value ignores Emacs
    # file locks
    ignore-paths = [
      "^.+/.?venv/.+",
      "^.+/pypirc_.+/.+$",
      "^.+/site-packages/.+",
    ]
    ignore-patterns = ["^.*scoop.*", "^\\.#", "^\\.venv", "^site-packages"]

    # Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
    # number of processors available to use, and will cap the count on Windows to
    # avoid hangs.
    jobs = 1

    # Control the amount of potential inferred values when inferring a single object.
    # This can help the performance when dealing with large functions or complex,
    # nested conditions.
    limit-inference-results = 100

    # List of plugins (as comma separated values of python module names) to load,
    # usually to register additional checkers.
    load-plugins = [
      "pylint.extensions.bad_builtin",
      "pylint.extensions.broad_try_clause",
      "pylint.extensions.check_elif",
      "pylint.extensions.code_style",
      "pylint.extensions.comparetozero",
      "pylint.extensions.comparison_placement",
      "pylint.extensions.confusing_elif",
      "pylint.extensions.consider_ternary_expression",
      "pylint.extensions.docparams",
      "pylint.extensions.docstyle",
      "pylint.extensions.empty_comment",
      "pylint.extensions.emptystring",
      "pylint.extensions.eq_without_hash",
      "pylint.extensions.for_any_all",
      "pylint.extensions.mccabe",
      "pylint.extensions.no_self_use",
      "pylint.extensions.overlapping_exceptions",
      "pylint.extensions.private_import",
      "pylint.extensions.redefined_loop_name",
      "pylint.extensions.redefined_variable_type",
      "pylint.extensions.set_membership",
      "pylint.extensions.typing",
      "pylint.extensions.while_used",
    ]

    # Pickle collected data for later comparisons.
    persistent = true

    # Minimum Python version to use for version dependent checks. Will default to the
    # version used to run pylint.
    py-version = "3.11"

    # When enabled, pylint would attempt to guess common misconfiguration and emit
    # user-friendly hints instead of false-positive error messages.
    suggestion-mode = true

    # Allow loading of arbitrary C extensions. Extensions are imported into the
    # active Python interpreter and may run arbitrary code.
    unsafe-load-any-extension = true
  [tool.pylint.basic]
    # Naming style matching correct argument names.
    argument-naming-style = "snake_case"

    # Naming style matching correct attribute names.
    attr-naming-style = "snake_case"

    # Bad variable names which should always be refused, separated by a comma.
    bad-names = ["bar", "baz", "foo", "tata", "toto", "tutu"]

    # Good variable names which should always be accepted, separated by a comma.
    good-names = ["Run", "_", "a", "b", "e", "ex", "f", "i", "j", "k", "n", "r"]

    # Naming style matching correct class attribute names.
    class-attribute-naming-style = "any"

    # Naming style matching correct class constant names.
    class-const-naming-style = "UPPER_CASE"

    # Naming style matching correct class names.
    class-naming-style = "PascalCase"

    # Naming style matching correct constant names.
    const-naming-style = "UPPER_CASE"

    # Minimum line length for functions/classes that require docstrings, shorter ones
    # are exempt.
    docstring-min-length = -1

    # Naming style matching correct function names.
    function-naming-style = "snake_case"

    # Naming style matching correct inline iteration names.
    inlinevar-naming-style = "any"

    # Naming style matching correct method names.
    method-naming-style = "snake_case"

    # Naming style matching correct module names.
    module-naming-style = "snake_case"


    # Regular expression which should only match function or class names that do not
    # require a docstring.
    no-docstring-rgx = "^_"

    # List of decorators that produce properties, such as abc.abstractproperty. Add
    # to this list to register other decorators that produce valid properties. These
    # decorators are taken in consideration only for invalid-name.
    property-classes = ["abc.abstractproperty"]

    # Regular expression matching correct type variable names. If left empty, type
    # variable names will be checked with the set naming style.
    # typevar-rgx =

    # Naming style matching correct variable names.
    variable-naming-style = "snake_case"

  [tool.pylint.classes]
    # List of method names used to declare (i.e. assign) instance attributes.
    defining-attr-methods = ["__init__", "__new__", "__post_init__", "setUp"]

    # List of member names, which should be excluded from the protected access
    # warning.
    exclude-protected = ["_asdict", "_fields", "_make", "_replace", "_source"]

    # List of valid names for the first argument in a class method.
    valid-classmethod-first-arg = ["cls"]

    # List of valid names for the first argument in a metaclass class method.
    valid-metaclass-classmethod-first-arg = ["cls"]
  [tool.pylint.design]
    # Maximum number of arguments for function / method.
    max-args = 7

    # Maximum number of attributes for a class (see R0902).
    max-attributes = 9

    # Maximum number of boolean expressions in an if statement (see R0916).
    max-bool-expr = 6

    # Maximum number of branch for function / method body.
    max-branches = 12

    # Maximum number of locals for function / method body.
    max-locals = 20

    # Maximum number of parents for a class (see R0901).
    max-parents = 7

    # Maximum number of public methods for a class (see R0904).
    max-public-methods = 20

    # Maximum number of return / yield for function / method body.
    max-returns = 6

    # Maximum number of statements in function / method body.
    max-statements = 50

    # Minimum number of public methods for a class (see R0903).
    min-public-methods = 2

    # McCabe rating
    max-complexity = 16
  [tool.pylint.exceptions]
    # Exceptions that will emit a warning when caught.
    overgeneral-exceptions = ["BaseException", "Exception"]
  [tool.pylint.format]
    # Regexp for a line that is allowed to be longer than the limit.
    ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"

    # Number of spaces of indent required inside a hanging or continued line.
    indent-after-paren = 4

    # String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
    # tab).
    indent-string = "    "

    # Maximum number of characters on a single line.
    max-line-length = 160

    # Maximum number of lines in a module.
    max-module-lines = 1000
  [tool.pylint.imports]
    # Force import order to recognize a module as part of a third party library.
    known-third-party = ["enchant"]

  [tool.pylint.logging]
    # The type of string formatting that logging methods do. `old` means using %
    # formatting, `new` is for `{}` formatting.
    logging-format-style = "old"

    # Logging modules to check that the string format arguments are in logging
    # function parameter format.
    logging-modules = ["logging"]
  [tool.pylint."messages control"]
    # Only show warnings with the listed confidence levels. Leave empty to show all.
    # Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
    confidence = [
      "CONTROL_FLOW",
      "HIGH",
      "INFERENCE",
      "INFERENCE_FAILURE",
      "UNDEFINED",
    ]

    # Disable the message, report, category or checker with the given id(s). You can
    # either give multiple identifiers separated by comma (,) or put this option
    # multiple times (only on the command line, not in the configuration file where
    # it should appear only once). You can also use "--disable=all" to disable
    # everything first and then re-enable specific checks. For example, if you want
    # to run only the similarities checker, you can use "--disable=all
    # --enable=similarities". If you want to run only the classes checker, but have
    # no Warning level messages displayed, use "--disable=all --enable=classes
    # --disable=W".
    disable = [
      "bad-inline-option",
      "deprecated-pragma",
      "empty-comment",
      "file-ignored",
      "locally-disabled",
      "raw-checker-failed",
      "suppressed-message",
      "use-symbolic-message-instead",
      "useless-suppression",

      # shit that fights w/ or is otherwise handled by ruff
      "broad-exception-caught",
      "consider-alternative-union-syntax", # UP007
      "consider-using-f-string",           # UP032
      "docstring-first-line-empty",
      "missing-class-docstring",           # D101
      "missing-function-docstring",        # D103
      "missing-module-docstring",          # D100
      "missing-timeout",                   # S113
      "redefined-builtin",                 # A001,A002,A003
      "too-complex",                       # C90
      "unused-argument",                   # ARG001
      "unused-import",                     # F401
      "unused-variable",                   # F841
      "use-dict-literal",                  # C406
      "wrong-import-order",                # I001
      "wrong-import-position",             # E402
    ]

    # Enable the message, report, category or checker with the given id(s). You can
    # either give multiple identifier separated by comma (,) or put this option
    # multiple time (only on the command line, not in the configuration file where it
    # should appear only once). See also the "--disable" option for examples.
    enable = ["c-extension-no-member"]
  [tool.pylint.method_args]
    # List of qualified names (i.e., library.method) which require a timeout
    # parameter e.g. 'requests.api.get,requests.api.post'
    timeout-methods = [
      "requests.api.delete",
      "requests.api.get",
      "requests.api.head",
      "requests.api.options",
      "requests.api.patch",
      "requests.api.post",
      "requests.api.put",
      "requests.api.request",
    ]
  [tool.pylint.miscellaneous]
    # List of note tags to take in consideration, separated by a comma.
    notes = ["FIXME", "TODO", "XXX"]
  [tool.pylint.refactoring]
    # Maximum number of nested blocks for function / method body
    max-nested-blocks = 5

    # Complete name of functions that never returns. When checking for inconsistent-
    # return-statements if a never returning function is called then it will be
    # considered as an explicit return statement and no message will be printed.
    never-returning-functions = ["argparse.parse_error", "sys.exit"]
  [tool.pylint.reports]
    # Python expression which should return a score less than or equal to 10. You
    # have access to the variables 'fatal', 'error', 'warning', 'refactor',
    # 'convention', and 'info' which contain the number of messages in each category,
    # as well as 'statement' which is the total number of statements analyzed. This
    # score is used by the global evaluation report (RP0004).
    evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

    # Activate the evaluation score.
    score = true
  [tool.pylint.similarities]
    # Comments are removed from the similarity computation
    ignore-comments = true

    # Docstrings are removed from the similarity computation
    ignore-docstrings = true

    # Imports are removed from the similarity computation
    ignore-imports = true

    # Signatures are removed from the similarity computation
    ignore-signatures = true

    # Minimum lines number of a similarity.
    min-similarity-lines = 4
  [tool.pylint.spelling]
    # Limits count of emitted suggestions for spelling mistakes.
    max-spelling-suggestions = 4

    # List of comma separated words that should be considered directives if they
    # appear at the beginning of a comment and should not be checked.
    spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"
  [tool.pylint.string]
  [tool.pylint.typecheck]
    # List of decorators that produce context managers, such as
    # contextlib.contextmanager. Add to this list to register other decorators that
    # produce valid context managers.
    contextmanager-decorators = ["contextlib.contextmanager"]

    # Tells whether missing members accessed in mixin class should be ignored. A
    # class is considered mixin if its name matches the mixin-class-rgx option.
    # Tells whether to warn about missing members when the owner of the attribute is
    # inferred to be None.
    ignore-none = true

    # This flag controls whether pylint should warn about no-member and similar
    # checks whenever an opaque object is returned when inferring. The inference can
    # return multiple potential results while evaluating a Python object, but some
    # branches might not be evaluated, which results in partial inference. In that
    # case, it might be useful to still emit no-member and other checks for the rest
    # of the inferred objects.
    ignore-on-opaque-inference = true

    # List of symbolic message names to ignore for Mixin members.
    ignored-checks-for-mixins = [
      "attribute-defined-outside-init",
      "no-member",
      "not-async-context-manager",
      "not-context-manager",
    ]

    # List of class names for which member attributes should not be checked (useful
    # for classes with dynamically set attributes). This supports the use of
    # qualified names.
    ignored-classes = [
      "_thread._local",
      "argparse.Namespace",
      "optparse.Values",
      "thread._local",
    ]

    # Show a hint with possible names when a member name was not found. The aspect of
    # finding the hint is based on edit distance.
    missing-member-hint = true

    # The minimum edit distance a name should have in order to be considered a
    # similar match for a missing member name.
    missing-member-hint-distance = 1

    # The total number of similar names that should be taken in consideration when
    # showing a hint for a missing member.
    missing-member-max-choices = 1

    # Regex pattern to define which classes are considered mixins.
    mixin-class-rgx = ".*[Mm]ixin"

  # List of decorators that change the signature of a decorated function.
  # signature-mutators =
  [tool.pylint.variables]
    # List of additional names supposed to be defined in builtins. Remember that you
    # should avoid defining new builtins when possible.
    # additional-builtins =

    # Tells whether unused global variables should be treated as a violation.
    allow-global-unused-variables = true

    # List of strings which can identify a callback function by name. A callback name
    # must start or end with one of those strings.
    callbacks = ["_cb", "cb_"]

    # A regular expression matching the name of dummy variables (i.e. expected to not
    # be used).
    dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"

    # Argument names that match this expression will be ignored.
    ignored-argument-names = "_.*|^ignored_|^unused_"

    # Tells whether we should check for unused import in __init__ files.
    init-import = false

    # List of qualified module names which can have objects that can redefine
    # builtins.
    redefining-builtins-modules = [
      "builtins",
      "future.builtins",
      "io",
      "past.builtins",
      "six.moves",
    ]

[tool.bandit]
  exclude_dirs = ["pypirc_chappers", "pypirc_original"]
  skips        = []
  tests        = []
  [tool.bandit.any_other_function_with_shell_equals_true]
    no_shell = [
      "os.execl",
      "os.execle",
      "os.execlp",
      "os.execlpe",
      "os.execv",
      "os.execve",
      "os.execvp",
      "os.execvpe",
      "os.spawnl",
      "os.spawnle",
      "os.spawnlp",
      "os.spawnlpe",
      "os.spawnv",
      "os.spawnve",
      "os.spawnvp",
      "os.spawnvpe",
      "os.startfile",
    ]
    shell = [
      "commands.getoutput",
      "commands.getstatusoutput",
      "os.popen",
      "os.popen2",
      "os.popen3",
      "os.popen4",
      "os.system",
      "popen2.Popen3",
      "popen2.Popen4",
      "popen2.popen2",
      "popen2.popen3",
      "popen2.popen4",
    ]
    subprocess = [
      "subprocess.Popen",
      "subprocess.call",
      "subprocess.check_call",
      "subprocess.check_output",
    ]

  [tool.pytest.ini_options]
    addopts        = "--cov-config=.coveragerc"
    filterwarnings = []
    log_format     = "%(asctime)s - %(levelname)s - %(name)s - %(message)s"
    log_level      = "DEBUG"
    markers        = []
    minversion     = "6.0"
    python_classes = ["*Test", "Test*"]
    python_files   = ["*.test.py", "test_*.py", "testing/*.py"]
    testpaths      = ["testsing"]

[tool.pyright]
