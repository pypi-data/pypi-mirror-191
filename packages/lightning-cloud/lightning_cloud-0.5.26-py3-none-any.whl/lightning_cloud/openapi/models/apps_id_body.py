# coding: utf-8
"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *


class AppsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_instance_run_name': 'str',
        'cluster_id': 'str',
        'entrypoint_file': 'str'
    }

    attribute_map = {
        'app_instance_run_name': 'appInstanceRunName',
        'cluster_id': 'clusterId',
        'entrypoint_file': 'entrypointFile'
    }

    def __init__(self,
                 app_instance_run_name: 'str' = None,
                 cluster_id: 'str' = None,
                 entrypoint_file: 'str' = None):  # noqa: E501
        """AppsIdBody - a model defined in Swagger"""  # noqa: E501
        self._app_instance_run_name = None
        self._cluster_id = None
        self._entrypoint_file = None
        self.discriminator = None
        if app_instance_run_name is not None:
            self.app_instance_run_name = app_instance_run_name
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if entrypoint_file is not None:
            self.entrypoint_file = entrypoint_file

    @property
    def app_instance_run_name(self) -> 'str':
        """Gets the app_instance_run_name of this AppsIdBody.  # noqa: E501


        :return: The app_instance_run_name of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._app_instance_run_name

    @app_instance_run_name.setter
    def app_instance_run_name(self, app_instance_run_name: 'str'):
        """Sets the app_instance_run_name of this AppsIdBody.


        :param app_instance_run_name: The app_instance_run_name of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._app_instance_run_name = app_instance_run_name

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this AppsIdBody.  # noqa: E501


        :return: The cluster_id of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this AppsIdBody.


        :param cluster_id: The cluster_id of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def entrypoint_file(self) -> 'str':
        """Gets the entrypoint_file of this AppsIdBody.  # noqa: E501


        :return: The entrypoint_file of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._entrypoint_file

    @entrypoint_file.setter
    def entrypoint_file(self, entrypoint_file: 'str'):
        """Sets the entrypoint_file of this AppsIdBody.


        :param entrypoint_file: The entrypoint_file of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._entrypoint_file = entrypoint_file

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value
        if issubclass(AppsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'AppsIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, AppsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'AppsIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
