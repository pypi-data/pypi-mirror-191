# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(517, 272)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStatusTip("")
        self.centralwidget.setWhatsThis("")
        self.centralwidget.setObjectName("centralwidget")
        self.flag_adv = QtWidgets.QCheckBox(self.centralwidget)
        self.flag_adv.setEnabled(True)
        self.flag_adv.setGeometry(QtCore.QRect(10, 10, 81, 17))
        self.flag_adv.setObjectName("flag_adv")
        self.flag_gwm = QtWidgets.QCheckBox(self.centralwidget)
        self.flag_gwm.setEnabled(True)
        self.flag_gwm.setGeometry(QtCore.QRect(10, 70, 131, 17))
        self.flag_gwm.setObjectName("flag_gwm")
        self.roll_active = QtWidgets.QPushButton(self.centralwidget)
        self.roll_active.setGeometry(QtCore.QRect(210, 170, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.roll_active.setFont(font)
        self.roll_active.setObjectName("roll_active")
        self.armor_class = QtWidgets.QSpinBox(self.centralwidget)
        self.armor_class.setEnabled(True)
        self.armor_class.setGeometry(QtCore.QRect(10, 130, 49, 22))
        self.armor_class.setMinimum(-1)
        self.armor_class.setMaximum(35)
        self.armor_class.setProperty("value", -1)
        self.armor_class.setObjectName("armor_class")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setEnabled(True)
        self.label.setGeometry(QtCore.QRect(60, 130, 68, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(130, 180, 98, 20))
        self.label_2.setObjectName("label_2")
        self.flag_ins = QtWidgets.QCheckBox(self.centralwidget)
        self.flag_ins.setEnabled(True)
        self.flag_ins.setGeometry(QtCore.QRect(10, 90, 131, 17))
        self.flag_ins.setObjectName("flag_ins")
        self.flag_bls = QtWidgets.QCheckBox(self.centralwidget)
        self.flag_bls.setEnabled(True)
        self.flag_bls.setGeometry(QtCore.QRect(10, 110, 131, 17))
        self.flag_bls.setObjectName("flag_bls")
        self.sim_count = QtWidgets.QLineEdit(self.centralwidget)
        self.sim_count.setEnabled(True)
        self.sim_count.setGeometry(QtCore.QRect(12, 180, 101, 20))
        self.sim_count.setObjectName("sim_count")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setEnabled(True)
        self.label_3.setGeometry(QtCore.QRect(10, 160, 101, 16))
        self.label_3.setObjectName("label_3")
        self.flag_dis = QtWidgets.QCheckBox(self.centralwidget)
        self.flag_dis.setEnabled(True)
        self.flag_dis.setGeometry(QtCore.QRect(10, 30, 101, 17))
        self.flag_dis.setObjectName("flag_dis")
        self.attack_formula = QtWidgets.QLineEdit(self.centralwidget)
        self.attack_formula.setGeometry(QtCore.QRect(130, 210, 161, 20))
        self.attack_formula.setObjectName("attack_formula")
        self.flag_ela = QtWidgets.QCheckBox(self.centralwidget)
        self.flag_ela.setEnabled(True)
        self.flag_ela.setGeometry(QtCore.QRect(10, 50, 101, 17))
        self.flag_ela.setObjectName("flag_ela")
        self.result = QtWidgets.QLineEdit(self.centralwidget)
        self.result.setGeometry(QtCore.QRect(300, 180, 111, 51))
        font = QtGui.QFont()
        font.setFamily("Rubik SemiBold")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.result.setFont(font)
        self.result.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.result.setObjectName("result")
        self.dice_log = QtWidgets.QListView(self.centralwidget)
        self.dice_log.setGeometry(QtCore.QRect(300, 10, 211, 151))
        self.dice_log.setObjectName("dice_log")
        self.formula_log = QtWidgets.QListView(self.centralwidget)
        self.formula_log.setGeometry(QtCore.QRect(140, 10, 151, 151))
        self.formula_log.setObjectName("formula_log")
        self.simulate = QtWidgets.QPushButton(self.centralwidget)
        self.simulate.setEnabled(True)
        self.simulate.setGeometry(QtCore.QRect(10, 200, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.simulate.setFont(font)
        self.simulate.setObjectName("simulate")
        self.hit_chance = QtWidgets.QLineEdit(self.centralwidget)
        self.hit_chance.setGeometry(QtCore.QRect(420, 180, 91, 51))
        font = QtGui.QFont()
        font.setFamily("Rubik SemiBold")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.hit_chance.setFont(font)
        self.hit_chance.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.hit_chance.setObjectName("hit_chance")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(300, 160, 98, 20))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(430, 160, 98, 20))
        self.label_5.setObjectName("label_5")
        self.flag_adv.raise_()
        self.flag_gwm.raise_()
        self.armor_class.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.flag_ins.raise_()
        self.flag_bls.raise_()
        self.sim_count.raise_()
        self.label_3.raise_()
        self.flag_dis.raise_()
        self.attack_formula.raise_()
        self.flag_ela.raise_()
        self.result.raise_()
        self.dice_log.raise_()
        self.formula_log.raise_()
        self.roll_active.raise_()
        self.simulate.raise_()
        self.hit_chance.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 517, 21))
        self.menubar.setObjectName("menubar")
        self.menuModes = QtWidgets.QMenu(self.menubar)
        self.menuModes.setObjectName("menuModes")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menuConfigurations = QtWidgets.QMenu(self.menubar)
        self.menuConfigurations.setEnabled(False)
        self.menuConfigurations.setObjectName("menuConfigurations")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionHit_Chance = QtWidgets.QAction(MainWindow)
        self.actionHit_Chance.setObjectName("actionHit_Chance")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionProject_GitHub = QtWidgets.QAction(MainWindow)
        self.actionProject_GitHub.setObjectName("actionProject_GitHub")
        self.actionChipy_Dev = QtWidgets.QAction(MainWindow)
        self.actionChipy_Dev.setObjectName("actionChipy_Dev")
        self.menuModes.addAction(self.actionHit_Chance)
        self.menuModes.addSeparator()
        self.menuModes.addAction(self.actionExit)
        self.menuAbout.addAction(self.actionProject_GitHub)
        self.menuAbout.addAction(self.actionChipy_Dev)
        self.menubar.addAction(self.menuModes.menuAction())
        self.menubar.addAction(self.menuConfigurations.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.flag_adv.setStatusTip(_translate("MainWindow", "Toggle to roll with Advantage"))
        self.flag_adv.setText(_translate("MainWindow", "Advantage"))
        self.flag_gwm.setStatusTip(_translate("MainWindow", "Toggle to roll with the -5 hit for Great Weapon Master & SharpShooter"))
        self.flag_gwm.setText(_translate("MainWindow", "GWM/SharpShooter"))
        self.roll_active.setText(_translate("MainWindow", "Roll"))
        self.armor_class.setToolTip(_translate("MainWindow", "Select Armor class (or leave on \'-1\' to simular for all classes)"))
        self.armor_class.setStatusTip(_translate("MainWindow", "Select Armor class (or leave on \'-1\' to simular for all classes)"))
        self.label.setText(_translate("MainWindow", "Foe\'s AC"))
        self.label_2.setText(_translate("MainWindow", "Attack Formula"))
        self.flag_ins.setStatusTip(_translate("MainWindow", "Toggle to roll with Ispiration (Advantage)"))
        self.flag_ins.setText(_translate("MainWindow", "Inpiration"))
        self.flag_bls.setStatusTip(_translate("MainWindow", "Toggle to roll with as blessed (+1d4)"))
        self.flag_bls.setText(_translate("MainWindow", "Blessed"))
        self.sim_count.setStatusTip(_translate("MainWindow", "Number of dice roll attempts to simulate"))
        self.sim_count.setText(_translate("MainWindow", "9001"))
        self.label_3.setText(_translate("MainWindow", "Simulation count"))
        self.flag_dis.setStatusTip(_translate("MainWindow", "Toggle to roll with Disadvantage"))
        self.flag_dis.setText(_translate("MainWindow", "Disadvantage"))
        self.attack_formula.setStatusTip(_translate("MainWindow", "Dice Attack formula (your hit dice when attacking) Example: 1d20+1d4+2+1"))
        self.attack_formula.setText(_translate("MainWindow", "1d20+1"))
        self.flag_ela.setStatusTip(_translate("MainWindow", "Toggle to roll with \"double\" advantage when you have Elven Accuracy"))
        self.flag_ela.setText(_translate("MainWindow", "Elven Accuracy"))
        self.result.setStatusTip(_translate("MainWindow", "Final value of the last roll"))
        self.result.setText(_translate("MainWindow", "###"))
        self.dice_log.setStatusTip(_translate("MainWindow", "Quick load formula from recent rolls"))
        self.formula_log.setStatusTip(_translate("MainWindow", "Quick recent roll formulas"))
        self.simulate.setStatusTip(_translate("MainWindow", "Start simulation of current roll configuration"))
        self.simulate.setText(_translate("MainWindow", "Simlulate"))
        self.hit_chance.setStatusTip(_translate("MainWindow", "Avarage hit rate vs current set AC (over the last 8 rolls)"))
        self.hit_chance.setText(_translate("MainWindow", "##"))
        self.label_4.setText(_translate("MainWindow", "Last roll:"))
        self.label_5.setText(_translate("MainWindow", "Hit Rate: "))
        self.menuModes.setTitle(_translate("MainWindow", "Modes"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.menuConfigurations.setTitle(_translate("MainWindow", "Configurations"))
        self.actionHit_Chance.setText(_translate("MainWindow", "Hit Chance"))
        self.actionExit.setText(_translate("MainWindow", "E&xit"))
        self.actionProject_GitHub.setText(_translate("MainWindow", "Project GitHub"))
        self.actionChipy_Dev.setText(_translate("MainWindow", "Chipy.Dev"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
