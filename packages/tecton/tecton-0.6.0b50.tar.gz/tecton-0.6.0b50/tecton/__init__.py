from tecton._internals.find_spark import find_spark as __find_spark

__find_spark()

#  When adding/removing a class here, also mirror them to sdk/docs/index.rst,
#  or they won't be included in the autogenerated docs.
# nopycln: file
# noreorder
from tecton_core import conf

from tecton.features_common.feature_configs import (
    DeltaConfig,
    ParquetConfig,
    DatabricksClusterConfig,
    EMRClusterConfig,
    RedisConfig,
    DynamoConfig,
)
from tecton.declarative.data_source import (
    FileConfig,
    HiveConfig,
    KafkaConfig,
    KinesisConfig,
    RedshiftConfig,
    RequestSource,
    SnowflakeConfig,
    spark_batch_config,
    spark_stream_config,
)
from tecton.declarative.base import FeatureReference
from tecton.declarative.datetime_partition_column import DatetimePartitionColumn
from tecton.declarative.feature_view import (
    Aggregation,
    BatchTriggerType,
    StreamProcessingMode,
)
from tecton.declarative.filtered_source import FilteredSource
from tecton.declarative.logging_config import LoggingConfig
from tecton.declarative.output_stream import KafkaOutputStream, KinesisOutputStream
from tecton.declarative.transformation import (
    ATHENA_MODE,
    const,
    PANDAS_MODE,
    PYSPARK_MODE,
    PYTHON_MODE,
    SNOWFLAKE_SQL_MODE,
    SNOWPARK_MODE,
    SPARK_SQL_MODE,
)

from tecton_core.online_serving_index import OnlineServingIndex
from tecton_core.filter_context import FilterContext
from tecton.interactive.entity import get_entity
from tecton.interactive.data_source import get_data_source
from tecton.interactive.feature_table import get_feature_table  # noqa: F401
from tecton.interactive.feature_view import get_feature_view  # noqa: F401
from tecton.interactive.feature_service import get_feature_service  # noqa: F401
from tecton.interactive.transformation import get_transformation  # noqa: F401
from tecton.interactive.data_frame import DataFrame, FeatureVector, TectonDataFrame  # noqa: F401
from tecton.interactive.workspace import Workspace, get_workspace  # noqa: F401

from tecton_core.materialization_context import materialization_context
from tecton import version as __version_lib

from tecton.interactive.dataset import get_dataset
from tecton.identities.credentials import clear_credentials
from tecton.identities.credentials import set_credentials
from tecton.identities.credentials import test_credentials
from tecton.identities.credentials import who_am_i
from tecton.fco_listers import (
    list_entities,
    list_transformations,
    list_feature_services,
    list_workspaces,
    list_feature_views,
    list_datasets,
    list_data_sources,
    list_feature_tables,
)

if conf.get_bool("UNIFIED_TECTON_OBJECTS_ENABLED"):
    from tecton.unified.data_source import (
        BatchSource,
        PushSource,
        StreamSource,
    )
    from tecton.unified.entity import Entity
    from tecton.unified.feature_service import FeatureService
    from tecton.unified.feature_view import (
        batch_feature_view,
        BatchFeatureView,
        FeatureView,
        on_demand_feature_view,
        OnDemandFeatureView,
        stream_feature_view,
        StreamFeatureView,
        FeatureTable,
    )
    from tecton.unified.transformation import transformation
    from tecton.unified.validations_api import ValidationMode
    from tecton.unified.validations_api import set_validation_mode
else:
    from tecton.declarative.data_source import (
        BatchSource,
        PushSource,
        StreamSource,
    )
    from tecton.declarative.entity import Entity
    from tecton.declarative.feature_service import FeatureService
    from tecton.declarative.feature_table import FeatureTable
    from tecton.declarative.feature_view import (
        batch_feature_view,
        on_demand_feature_view,
        stream_feature_view,
        StreamFeatureView,
    )
    from tecton.declarative.transformation import transformation

__version__ = __version_lib.get_version()
