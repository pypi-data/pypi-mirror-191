Metadata-Version: 2.1
Name: multiversx-sdk-cli
Version: 5.3.2
Summary: MultiversX Smart Contracts Tools
Home-page: https://github.com/multiversx/mx-sdk-py-cli
Author: MultiversX
License: MIT
Keywords: MultiversX
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Operating System :: POSIX :: Linux
Classifier: Intended Audience :: Developers
Classifier: Development Status :: 3 - Alpha
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: toml (>=0.10.2)
Requires-Dist: bottle
Requires-Dist: requests
Requires-Dist: pynacl
Requires-Dist: cryptography (==36.0.2)
Requires-Dist: prettytable
Requires-Dist: ledgercomm[hid]
Requires-Dist: semver
Requires-Dist: requests-cache
Requires-Dist: multiversx-sdk-network-providers (==0.6.*)
Requires-Dist: multiversx-sdk-wallet (==0.4.*)
Requires-Dist: multiversx-sdk-core (==0.3.*)

# Description
Python Command Line Tools for interacting with Multivers<sup>X</sup>.

## Documentation
[docs.multiversx.com](https://docs.multiversx.com/sdk-and-tools/sdk-py/)

## CLI
[CLI](CLI.md)

## Distribution
[mxpy-up](https://docs.multiversx.com/sdk-and-tools/sdk-py/installing-mxpy/) and [PyPi](https://pypi.org/project/multiversx-sdk-cli/#history)

## Development setup

Clone this repository and cd into it:

```
git clone https://github.com/multiversx/mx-sdk-py-cli.git
cd mx-sdk-py-cli
```

### Virtual environment

Create a virtual environment and install the dependencies:

```
python3 -m venv ./.venv
source ./.venv/bin/activate
pip install -r ./requirements.txt --upgrade
```

Install development dependencies, as well:

```
pip install -r ./requirements-dev.txt --upgrade
```

Above, `requirements.txt` should mirror the **dependencies** section of `setup.py`.

If using VSCode, restart it or follow these steps:
 - `Ctrl + Shift + P`
 - _Select Interpreter_
 - Choose `./.venv/bin/python`.

### Using your local `mxpy`

If you want to test the modifications you locally made to `mxpy`, set `PYTHONPATH` with the path to your local repository path.

For example, if you cloned the repository at `~/mx-sdk-py-cli`, run:

```
export PYTHONPATH="~/mx-sdk-py-cli"
```

Then `mxpy` will use the code in your local repository.
