// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/memory_profile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto;
namespace tensorflow {
namespace profiler {
class ActiveAllocation;
struct ActiveAllocationDefaultTypeInternal;
extern ActiveAllocationDefaultTypeInternal _ActiveAllocation_default_instance_;
class MemoryActivityMetadata;
struct MemoryActivityMetadataDefaultTypeInternal;
extern MemoryActivityMetadataDefaultTypeInternal _MemoryActivityMetadata_default_instance_;
class MemoryAggregationStats;
struct MemoryAggregationStatsDefaultTypeInternal;
extern MemoryAggregationStatsDefaultTypeInternal _MemoryAggregationStats_default_instance_;
class MemoryProfile;
struct MemoryProfileDefaultTypeInternal;
extern MemoryProfileDefaultTypeInternal _MemoryProfile_default_instance_;
class MemoryProfileSnapshot;
struct MemoryProfileSnapshotDefaultTypeInternal;
extern MemoryProfileSnapshotDefaultTypeInternal _MemoryProfileSnapshot_default_instance_;
class MemoryProfileSummary;
struct MemoryProfileSummaryDefaultTypeInternal;
extern MemoryProfileSummaryDefaultTypeInternal _MemoryProfileSummary_default_instance_;
class MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse;
struct MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUseDefaultTypeInternal;
extern MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUseDefaultTypeInternal _MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse_default_instance_;
class PerAllocatorMemoryProfile;
struct PerAllocatorMemoryProfileDefaultTypeInternal;
extern PerAllocatorMemoryProfileDefaultTypeInternal _PerAllocatorMemoryProfile_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::profiler::ActiveAllocation* Arena::CreateMaybeMessage<::tensorflow::profiler::ActiveAllocation>(Arena*);
template<> ::tensorflow::profiler::MemoryActivityMetadata* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryActivityMetadata>(Arena*);
template<> ::tensorflow::profiler::MemoryAggregationStats* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryAggregationStats>(Arena*);
template<> ::tensorflow::profiler::MemoryProfile* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryProfile>(Arena*);
template<> ::tensorflow::profiler::MemoryProfileSnapshot* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryProfileSnapshot>(Arena*);
template<> ::tensorflow::profiler::MemoryProfileSummary* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryProfileSummary>(Arena*);
template<> ::tensorflow::profiler::MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse>(Arena*);
template<> ::tensorflow::profiler::PerAllocatorMemoryProfile* Arena::CreateMaybeMessage<::tensorflow::profiler::PerAllocatorMemoryProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace profiler {

enum MemoryActivity : int {
  UNKNOWN_ACTIVITY = 0,
  ALLOCATION = 1,
  DEALLOCATION = 2,
  RESERVATION = 3,
  EXPANSION = 4,
  MemoryActivity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MemoryActivity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MemoryActivity_IsValid(int value);
constexpr MemoryActivity MemoryActivity_MIN = UNKNOWN_ACTIVITY;
constexpr MemoryActivity MemoryActivity_MAX = EXPANSION;
constexpr int MemoryActivity_ARRAYSIZE = MemoryActivity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemoryActivity_descriptor();
template<typename T>
inline const std::string& MemoryActivity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemoryActivity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemoryActivity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MemoryActivity_descriptor(), enum_t_value);
}
inline bool MemoryActivity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MemoryActivity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MemoryActivity>(
    MemoryActivity_descriptor(), name, value);
}
// ===================================================================

class MemoryAggregationStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.MemoryAggregationStats) */ {
 public:
  inline MemoryAggregationStats() : MemoryAggregationStats(nullptr) {}
  ~MemoryAggregationStats() override;
  explicit constexpr MemoryAggregationStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryAggregationStats(const MemoryAggregationStats& from);
  MemoryAggregationStats(MemoryAggregationStats&& from) noexcept
    : MemoryAggregationStats() {
    *this = ::std::move(from);
  }

  inline MemoryAggregationStats& operator=(const MemoryAggregationStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryAggregationStats& operator=(MemoryAggregationStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryAggregationStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryAggregationStats* internal_default_instance() {
    return reinterpret_cast<const MemoryAggregationStats*>(
               &_MemoryAggregationStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemoryAggregationStats& a, MemoryAggregationStats& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryAggregationStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryAggregationStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryAggregationStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryAggregationStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryAggregationStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryAggregationStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryAggregationStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.MemoryAggregationStats";
  }
  protected:
  explicit MemoryAggregationStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackReservedBytesFieldNumber = 1,
    kHeapAllocatedBytesFieldNumber = 2,
    kFreeMemoryBytesFieldNumber = 3,
    kFragmentationFieldNumber = 4,
    kPeakBytesInUseFieldNumber = 5,
  };
  // int64 stack_reserved_bytes = 1;
  void clear_stack_reserved_bytes();
  int64_t stack_reserved_bytes() const;
  void set_stack_reserved_bytes(int64_t value);
  private:
  int64_t _internal_stack_reserved_bytes() const;
  void _internal_set_stack_reserved_bytes(int64_t value);
  public:

  // int64 heap_allocated_bytes = 2;
  void clear_heap_allocated_bytes();
  int64_t heap_allocated_bytes() const;
  void set_heap_allocated_bytes(int64_t value);
  private:
  int64_t _internal_heap_allocated_bytes() const;
  void _internal_set_heap_allocated_bytes(int64_t value);
  public:

  // int64 free_memory_bytes = 3;
  void clear_free_memory_bytes();
  int64_t free_memory_bytes() const;
  void set_free_memory_bytes(int64_t value);
  private:
  int64_t _internal_free_memory_bytes() const;
  void _internal_set_free_memory_bytes(int64_t value);
  public:

  // double fragmentation = 4;
  void clear_fragmentation();
  double fragmentation() const;
  void set_fragmentation(double value);
  private:
  double _internal_fragmentation() const;
  void _internal_set_fragmentation(double value);
  public:

  // int64 peak_bytes_in_use = 5;
  void clear_peak_bytes_in_use();
  int64_t peak_bytes_in_use() const;
  void set_peak_bytes_in_use(int64_t value);
  private:
  int64_t _internal_peak_bytes_in_use() const;
  void _internal_set_peak_bytes_in_use(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.MemoryAggregationStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t stack_reserved_bytes_;
  int64_t heap_allocated_bytes_;
  int64_t free_memory_bytes_;
  double fragmentation_;
  int64_t peak_bytes_in_use_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class MemoryActivityMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.MemoryActivityMetadata) */ {
 public:
  inline MemoryActivityMetadata() : MemoryActivityMetadata(nullptr) {}
  ~MemoryActivityMetadata() override;
  explicit constexpr MemoryActivityMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryActivityMetadata(const MemoryActivityMetadata& from);
  MemoryActivityMetadata(MemoryActivityMetadata&& from) noexcept
    : MemoryActivityMetadata() {
    *this = ::std::move(from);
  }

  inline MemoryActivityMetadata& operator=(const MemoryActivityMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryActivityMetadata& operator=(MemoryActivityMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryActivityMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryActivityMetadata* internal_default_instance() {
    return reinterpret_cast<const MemoryActivityMetadata*>(
               &_MemoryActivityMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemoryActivityMetadata& a, MemoryActivityMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryActivityMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryActivityMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryActivityMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryActivityMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryActivityMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryActivityMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryActivityMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.MemoryActivityMetadata";
  }
  protected:
  explicit MemoryActivityMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTfOpNameFieldNumber = 5,
    kRegionTypeFieldNumber = 7,
    kDataTypeFieldNumber = 8,
    kTensorShapeFieldNumber = 9,
    kRequestedBytesFieldNumber = 2,
    kAllocationBytesFieldNumber = 3,
    kAddressFieldNumber = 4,
    kStepIdFieldNumber = 6,
    kMemoryActivityFieldNumber = 1,
  };
  // string tf_op_name = 5;
  void clear_tf_op_name();
  const std::string& tf_op_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tf_op_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tf_op_name();
  PROTOBUF_NODISCARD std::string* release_tf_op_name();
  void set_allocated_tf_op_name(std::string* tf_op_name);
  private:
  const std::string& _internal_tf_op_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tf_op_name(const std::string& value);
  std::string* _internal_mutable_tf_op_name();
  public:

  // string region_type = 7;
  void clear_region_type();
  const std::string& region_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region_type();
  PROTOBUF_NODISCARD std::string* release_region_type();
  void set_allocated_region_type(std::string* region_type);
  private:
  const std::string& _internal_region_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region_type(const std::string& value);
  std::string* _internal_mutable_region_type();
  public:

  // string data_type = 8;
  void clear_data_type();
  const std::string& data_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_type();
  PROTOBUF_NODISCARD std::string* release_data_type();
  void set_allocated_data_type(std::string* data_type);
  private:
  const std::string& _internal_data_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_type(const std::string& value);
  std::string* _internal_mutable_data_type();
  public:

  // string tensor_shape = 9;
  void clear_tensor_shape();
  const std::string& tensor_shape() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tensor_shape(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tensor_shape();
  PROTOBUF_NODISCARD std::string* release_tensor_shape();
  void set_allocated_tensor_shape(std::string* tensor_shape);
  private:
  const std::string& _internal_tensor_shape() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tensor_shape(const std::string& value);
  std::string* _internal_mutable_tensor_shape();
  public:

  // int64 requested_bytes = 2;
  void clear_requested_bytes();
  int64_t requested_bytes() const;
  void set_requested_bytes(int64_t value);
  private:
  int64_t _internal_requested_bytes() const;
  void _internal_set_requested_bytes(int64_t value);
  public:

  // int64 allocation_bytes = 3;
  void clear_allocation_bytes();
  int64_t allocation_bytes() const;
  void set_allocation_bytes(int64_t value);
  private:
  int64_t _internal_allocation_bytes() const;
  void _internal_set_allocation_bytes(int64_t value);
  public:

  // uint64 address = 4;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // int64 step_id = 6;
  void clear_step_id();
  int64_t step_id() const;
  void set_step_id(int64_t value);
  private:
  int64_t _internal_step_id() const;
  void _internal_set_step_id(int64_t value);
  public:

  // .tensorflow.profiler.MemoryActivity memory_activity = 1;
  void clear_memory_activity();
  ::tensorflow::profiler::MemoryActivity memory_activity() const;
  void set_memory_activity(::tensorflow::profiler::MemoryActivity value);
  private:
  ::tensorflow::profiler::MemoryActivity _internal_memory_activity() const;
  void _internal_set_memory_activity(::tensorflow::profiler::MemoryActivity value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.MemoryActivityMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tf_op_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_shape_;
  int64_t requested_bytes_;
  int64_t allocation_bytes_;
  uint64_t address_;
  int64_t step_id_;
  int memory_activity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class MemoryProfileSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.MemoryProfileSnapshot) */ {
 public:
  inline MemoryProfileSnapshot() : MemoryProfileSnapshot(nullptr) {}
  ~MemoryProfileSnapshot() override;
  explicit constexpr MemoryProfileSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryProfileSnapshot(const MemoryProfileSnapshot& from);
  MemoryProfileSnapshot(MemoryProfileSnapshot&& from) noexcept
    : MemoryProfileSnapshot() {
    *this = ::std::move(from);
  }

  inline MemoryProfileSnapshot& operator=(const MemoryProfileSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryProfileSnapshot& operator=(MemoryProfileSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryProfileSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryProfileSnapshot* internal_default_instance() {
    return reinterpret_cast<const MemoryProfileSnapshot*>(
               &_MemoryProfileSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MemoryProfileSnapshot& a, MemoryProfileSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryProfileSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryProfileSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryProfileSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryProfileSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryProfileSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryProfileSnapshot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryProfileSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.MemoryProfileSnapshot";
  }
  protected:
  explicit MemoryProfileSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggregationStatsFieldNumber = 2,
    kActivityMetadataFieldNumber = 3,
    kTimeOffsetPsFieldNumber = 1,
  };
  // .tensorflow.profiler.MemoryAggregationStats aggregation_stats = 2;
  bool has_aggregation_stats() const;
  private:
  bool _internal_has_aggregation_stats() const;
  public:
  void clear_aggregation_stats();
  const ::tensorflow::profiler::MemoryAggregationStats& aggregation_stats() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::MemoryAggregationStats* release_aggregation_stats();
  ::tensorflow::profiler::MemoryAggregationStats* mutable_aggregation_stats();
  void set_allocated_aggregation_stats(::tensorflow::profiler::MemoryAggregationStats* aggregation_stats);
  private:
  const ::tensorflow::profiler::MemoryAggregationStats& _internal_aggregation_stats() const;
  ::tensorflow::profiler::MemoryAggregationStats* _internal_mutable_aggregation_stats();
  public:
  void unsafe_arena_set_allocated_aggregation_stats(
      ::tensorflow::profiler::MemoryAggregationStats* aggregation_stats);
  ::tensorflow::profiler::MemoryAggregationStats* unsafe_arena_release_aggregation_stats();

  // .tensorflow.profiler.MemoryActivityMetadata activity_metadata = 3;
  bool has_activity_metadata() const;
  private:
  bool _internal_has_activity_metadata() const;
  public:
  void clear_activity_metadata();
  const ::tensorflow::profiler::MemoryActivityMetadata& activity_metadata() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::MemoryActivityMetadata* release_activity_metadata();
  ::tensorflow::profiler::MemoryActivityMetadata* mutable_activity_metadata();
  void set_allocated_activity_metadata(::tensorflow::profiler::MemoryActivityMetadata* activity_metadata);
  private:
  const ::tensorflow::profiler::MemoryActivityMetadata& _internal_activity_metadata() const;
  ::tensorflow::profiler::MemoryActivityMetadata* _internal_mutable_activity_metadata();
  public:
  void unsafe_arena_set_allocated_activity_metadata(
      ::tensorflow::profiler::MemoryActivityMetadata* activity_metadata);
  ::tensorflow::profiler::MemoryActivityMetadata* unsafe_arena_release_activity_metadata();

  // int64 time_offset_ps = 1;
  void clear_time_offset_ps();
  int64_t time_offset_ps() const;
  void set_time_offset_ps(int64_t value);
  private:
  int64_t _internal_time_offset_ps() const;
  void _internal_set_time_offset_ps(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.MemoryProfileSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::profiler::MemoryAggregationStats* aggregation_stats_;
  ::tensorflow::profiler::MemoryActivityMetadata* activity_metadata_;
  int64_t time_offset_ps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class MemoryProfileSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.MemoryProfileSummary) */ {
 public:
  inline MemoryProfileSummary() : MemoryProfileSummary(nullptr) {}
  ~MemoryProfileSummary() override;
  explicit constexpr MemoryProfileSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryProfileSummary(const MemoryProfileSummary& from);
  MemoryProfileSummary(MemoryProfileSummary&& from) noexcept
    : MemoryProfileSummary() {
    *this = ::std::move(from);
  }

  inline MemoryProfileSummary& operator=(const MemoryProfileSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryProfileSummary& operator=(MemoryProfileSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryProfileSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryProfileSummary* internal_default_instance() {
    return reinterpret_cast<const MemoryProfileSummary*>(
               &_MemoryProfileSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MemoryProfileSummary& a, MemoryProfileSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryProfileSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryProfileSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryProfileSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryProfileSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryProfileSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryProfileSummary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryProfileSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.MemoryProfileSummary";
  }
  protected:
  explicit MemoryProfileSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeakStatsFieldNumber = 2,
    kPeakBytesUsageLifetimeFieldNumber = 1,
    kPeakStatsTimePsFieldNumber = 3,
    kMemoryCapacityFieldNumber = 4,
  };
  // .tensorflow.profiler.MemoryAggregationStats peak_stats = 2;
  bool has_peak_stats() const;
  private:
  bool _internal_has_peak_stats() const;
  public:
  void clear_peak_stats();
  const ::tensorflow::profiler::MemoryAggregationStats& peak_stats() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::MemoryAggregationStats* release_peak_stats();
  ::tensorflow::profiler::MemoryAggregationStats* mutable_peak_stats();
  void set_allocated_peak_stats(::tensorflow::profiler::MemoryAggregationStats* peak_stats);
  private:
  const ::tensorflow::profiler::MemoryAggregationStats& _internal_peak_stats() const;
  ::tensorflow::profiler::MemoryAggregationStats* _internal_mutable_peak_stats();
  public:
  void unsafe_arena_set_allocated_peak_stats(
      ::tensorflow::profiler::MemoryAggregationStats* peak_stats);
  ::tensorflow::profiler::MemoryAggregationStats* unsafe_arena_release_peak_stats();

  // int64 peak_bytes_usage_lifetime = 1;
  void clear_peak_bytes_usage_lifetime();
  int64_t peak_bytes_usage_lifetime() const;
  void set_peak_bytes_usage_lifetime(int64_t value);
  private:
  int64_t _internal_peak_bytes_usage_lifetime() const;
  void _internal_set_peak_bytes_usage_lifetime(int64_t value);
  public:

  // int64 peak_stats_time_ps = 3;
  void clear_peak_stats_time_ps();
  int64_t peak_stats_time_ps() const;
  void set_peak_stats_time_ps(int64_t value);
  private:
  int64_t _internal_peak_stats_time_ps() const;
  void _internal_set_peak_stats_time_ps(int64_t value);
  public:

  // int64 memory_capacity = 4;
  void clear_memory_capacity();
  int64_t memory_capacity() const;
  void set_memory_capacity(int64_t value);
  private:
  int64_t _internal_memory_capacity() const;
  void _internal_set_memory_capacity(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.MemoryProfileSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::profiler::MemoryAggregationStats* peak_stats_;
  int64_t peak_bytes_usage_lifetime_;
  int64_t peak_stats_time_ps_;
  int64_t memory_capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class ActiveAllocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.ActiveAllocation) */ {
 public:
  inline ActiveAllocation() : ActiveAllocation(nullptr) {}
  ~ActiveAllocation() override;
  explicit constexpr ActiveAllocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActiveAllocation(const ActiveAllocation& from);
  ActiveAllocation(ActiveAllocation&& from) noexcept
    : ActiveAllocation() {
    *this = ::std::move(from);
  }

  inline ActiveAllocation& operator=(const ActiveAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveAllocation& operator=(ActiveAllocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActiveAllocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActiveAllocation* internal_default_instance() {
    return reinterpret_cast<const ActiveAllocation*>(
               &_ActiveAllocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ActiveAllocation& a, ActiveAllocation& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveAllocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveAllocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActiveAllocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActiveAllocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActiveAllocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActiveAllocation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveAllocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.ActiveAllocation";
  }
  protected:
  explicit ActiveAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotIndexFieldNumber = 1,
    kSpecialIndexFieldNumber = 2,
    kNumOccurrencesFieldNumber = 3,
  };
  // int64 snapshot_index = 1;
  void clear_snapshot_index();
  int64_t snapshot_index() const;
  void set_snapshot_index(int64_t value);
  private:
  int64_t _internal_snapshot_index() const;
  void _internal_set_snapshot_index(int64_t value);
  public:

  // int64 special_index = 2;
  void clear_special_index();
  int64_t special_index() const;
  void set_special_index(int64_t value);
  private:
  int64_t _internal_special_index() const;
  void _internal_set_special_index(int64_t value);
  public:

  // int64 num_occurrences = 3;
  void clear_num_occurrences();
  int64_t num_occurrences() const;
  void set_num_occurrences(int64_t value);
  private:
  int64_t _internal_num_occurrences() const;
  void _internal_set_num_occurrences(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.ActiveAllocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t snapshot_index_;
  int64_t special_index_;
  int64_t num_occurrences_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class PerAllocatorMemoryProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.PerAllocatorMemoryProfile) */ {
 public:
  inline PerAllocatorMemoryProfile() : PerAllocatorMemoryProfile(nullptr) {}
  ~PerAllocatorMemoryProfile() override;
  explicit constexpr PerAllocatorMemoryProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerAllocatorMemoryProfile(const PerAllocatorMemoryProfile& from);
  PerAllocatorMemoryProfile(PerAllocatorMemoryProfile&& from) noexcept
    : PerAllocatorMemoryProfile() {
    *this = ::std::move(from);
  }

  inline PerAllocatorMemoryProfile& operator=(const PerAllocatorMemoryProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerAllocatorMemoryProfile& operator=(PerAllocatorMemoryProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerAllocatorMemoryProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerAllocatorMemoryProfile* internal_default_instance() {
    return reinterpret_cast<const PerAllocatorMemoryProfile*>(
               &_PerAllocatorMemoryProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PerAllocatorMemoryProfile& a, PerAllocatorMemoryProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(PerAllocatorMemoryProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerAllocatorMemoryProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerAllocatorMemoryProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerAllocatorMemoryProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerAllocatorMemoryProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerAllocatorMemoryProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerAllocatorMemoryProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.PerAllocatorMemoryProfile";
  }
  protected:
  explicit PerAllocatorMemoryProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryProfileSnapshotsFieldNumber = 1,
    kActiveAllocationsFieldNumber = 3,
    kSpecialAllocationsFieldNumber = 4,
    kProfileSummaryFieldNumber = 2,
  };
  // repeated .tensorflow.profiler.MemoryProfileSnapshot memory_profile_snapshots = 1;
  int memory_profile_snapshots_size() const;
  private:
  int _internal_memory_profile_snapshots_size() const;
  public:
  void clear_memory_profile_snapshots();
  ::tensorflow::profiler::MemoryProfileSnapshot* mutable_memory_profile_snapshots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >*
      mutable_memory_profile_snapshots();
  private:
  const ::tensorflow::profiler::MemoryProfileSnapshot& _internal_memory_profile_snapshots(int index) const;
  ::tensorflow::profiler::MemoryProfileSnapshot* _internal_add_memory_profile_snapshots();
  public:
  const ::tensorflow::profiler::MemoryProfileSnapshot& memory_profile_snapshots(int index) const;
  ::tensorflow::profiler::MemoryProfileSnapshot* add_memory_profile_snapshots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >&
      memory_profile_snapshots() const;

  // repeated .tensorflow.profiler.ActiveAllocation active_allocations = 3;
  int active_allocations_size() const;
  private:
  int _internal_active_allocations_size() const;
  public:
  void clear_active_allocations();
  ::tensorflow::profiler::ActiveAllocation* mutable_active_allocations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::ActiveAllocation >*
      mutable_active_allocations();
  private:
  const ::tensorflow::profiler::ActiveAllocation& _internal_active_allocations(int index) const;
  ::tensorflow::profiler::ActiveAllocation* _internal_add_active_allocations();
  public:
  const ::tensorflow::profiler::ActiveAllocation& active_allocations(int index) const;
  ::tensorflow::profiler::ActiveAllocation* add_active_allocations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::ActiveAllocation >&
      active_allocations() const;

  // repeated .tensorflow.profiler.MemoryActivityMetadata special_allocations = 4;
  int special_allocations_size() const;
  private:
  int _internal_special_allocations_size() const;
  public:
  void clear_special_allocations();
  ::tensorflow::profiler::MemoryActivityMetadata* mutable_special_allocations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::MemoryActivityMetadata >*
      mutable_special_allocations();
  private:
  const ::tensorflow::profiler::MemoryActivityMetadata& _internal_special_allocations(int index) const;
  ::tensorflow::profiler::MemoryActivityMetadata* _internal_add_special_allocations();
  public:
  const ::tensorflow::profiler::MemoryActivityMetadata& special_allocations(int index) const;
  ::tensorflow::profiler::MemoryActivityMetadata* add_special_allocations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::MemoryActivityMetadata >&
      special_allocations() const;

  // .tensorflow.profiler.MemoryProfileSummary profile_summary = 2;
  bool has_profile_summary() const;
  private:
  bool _internal_has_profile_summary() const;
  public:
  void clear_profile_summary();
  const ::tensorflow::profiler::MemoryProfileSummary& profile_summary() const;
  PROTOBUF_NODISCARD ::tensorflow::profiler::MemoryProfileSummary* release_profile_summary();
  ::tensorflow::profiler::MemoryProfileSummary* mutable_profile_summary();
  void set_allocated_profile_summary(::tensorflow::profiler::MemoryProfileSummary* profile_summary);
  private:
  const ::tensorflow::profiler::MemoryProfileSummary& _internal_profile_summary() const;
  ::tensorflow::profiler::MemoryProfileSummary* _internal_mutable_profile_summary();
  public:
  void unsafe_arena_set_allocated_profile_summary(
      ::tensorflow::profiler::MemoryProfileSummary* profile_summary);
  ::tensorflow::profiler::MemoryProfileSummary* unsafe_arena_release_profile_summary();

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.PerAllocatorMemoryProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot > memory_profile_snapshots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::ActiveAllocation > active_allocations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::MemoryActivityMetadata > special_allocations_;
  ::tensorflow::profiler::MemoryProfileSummary* profile_summary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse, 
    std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse, 
    std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse();
  explicit constexpr MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse& other);
  static const MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse*>(&_MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tensorflow.profiler.MemoryProfile.MemoryProfilePerAllocatorEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class MemoryProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.MemoryProfile) */ {
 public:
  inline MemoryProfile() : MemoryProfile(nullptr) {}
  ~MemoryProfile() override;
  explicit constexpr MemoryProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryProfile(const MemoryProfile& from);
  MemoryProfile(MemoryProfile&& from) noexcept
    : MemoryProfile() {
    *this = ::std::move(from);
  }

  inline MemoryProfile& operator=(const MemoryProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryProfile& operator=(MemoryProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryProfile* internal_default_instance() {
    return reinterpret_cast<const MemoryProfile*>(
               &_MemoryProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MemoryProfile& a, MemoryProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.MemoryProfile";
  }
  protected:
  explicit MemoryProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMemoryProfilePerAllocatorFieldNumber = 1,
    kMemoryIdsFieldNumber = 3,
    kNumHostsFieldNumber = 2,
  };
  // map<string, .tensorflow.profiler.PerAllocatorMemoryProfile> memory_profile_per_allocator = 1;
  int memory_profile_per_allocator_size() const;
  private:
  int _internal_memory_profile_per_allocator_size() const;
  public:
  void clear_memory_profile_per_allocator();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >&
      _internal_memory_profile_per_allocator() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >*
      _internal_mutable_memory_profile_per_allocator();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >&
      memory_profile_per_allocator() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >*
      mutable_memory_profile_per_allocator();

  // repeated string memory_ids = 3;
  int memory_ids_size() const;
  private:
  int _internal_memory_ids_size() const;
  public:
  void clear_memory_ids();
  const std::string& memory_ids(int index) const;
  std::string* mutable_memory_ids(int index);
  void set_memory_ids(int index, const std::string& value);
  void set_memory_ids(int index, std::string&& value);
  void set_memory_ids(int index, const char* value);
  void set_memory_ids(int index, const char* value, size_t size);
  std::string* add_memory_ids();
  void add_memory_ids(const std::string& value);
  void add_memory_ids(std::string&& value);
  void add_memory_ids(const char* value);
  void add_memory_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& memory_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_memory_ids();
  private:
  const std::string& _internal_memory_ids(int index) const;
  std::string* _internal_add_memory_ids();
  public:

  // int32 num_hosts = 2;
  void clear_num_hosts();
  int32_t num_hosts() const;
  void set_num_hosts(int32_t value);
  private:
  int32_t _internal_num_hosts() const;
  void _internal_set_num_hosts(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.MemoryProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse,
      std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> memory_profile_per_allocator_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> memory_ids_;
  int32_t num_hosts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemoryAggregationStats

// int64 stack_reserved_bytes = 1;
inline void MemoryAggregationStats::clear_stack_reserved_bytes() {
  stack_reserved_bytes_ = int64_t{0};
}
inline int64_t MemoryAggregationStats::_internal_stack_reserved_bytes() const {
  return stack_reserved_bytes_;
}
inline int64_t MemoryAggregationStats::stack_reserved_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryAggregationStats.stack_reserved_bytes)
  return _internal_stack_reserved_bytes();
}
inline void MemoryAggregationStats::_internal_set_stack_reserved_bytes(int64_t value) {
  
  stack_reserved_bytes_ = value;
}
inline void MemoryAggregationStats::set_stack_reserved_bytes(int64_t value) {
  _internal_set_stack_reserved_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryAggregationStats.stack_reserved_bytes)
}

// int64 heap_allocated_bytes = 2;
inline void MemoryAggregationStats::clear_heap_allocated_bytes() {
  heap_allocated_bytes_ = int64_t{0};
}
inline int64_t MemoryAggregationStats::_internal_heap_allocated_bytes() const {
  return heap_allocated_bytes_;
}
inline int64_t MemoryAggregationStats::heap_allocated_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryAggregationStats.heap_allocated_bytes)
  return _internal_heap_allocated_bytes();
}
inline void MemoryAggregationStats::_internal_set_heap_allocated_bytes(int64_t value) {
  
  heap_allocated_bytes_ = value;
}
inline void MemoryAggregationStats::set_heap_allocated_bytes(int64_t value) {
  _internal_set_heap_allocated_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryAggregationStats.heap_allocated_bytes)
}

// int64 free_memory_bytes = 3;
inline void MemoryAggregationStats::clear_free_memory_bytes() {
  free_memory_bytes_ = int64_t{0};
}
inline int64_t MemoryAggregationStats::_internal_free_memory_bytes() const {
  return free_memory_bytes_;
}
inline int64_t MemoryAggregationStats::free_memory_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryAggregationStats.free_memory_bytes)
  return _internal_free_memory_bytes();
}
inline void MemoryAggregationStats::_internal_set_free_memory_bytes(int64_t value) {
  
  free_memory_bytes_ = value;
}
inline void MemoryAggregationStats::set_free_memory_bytes(int64_t value) {
  _internal_set_free_memory_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryAggregationStats.free_memory_bytes)
}

// double fragmentation = 4;
inline void MemoryAggregationStats::clear_fragmentation() {
  fragmentation_ = 0;
}
inline double MemoryAggregationStats::_internal_fragmentation() const {
  return fragmentation_;
}
inline double MemoryAggregationStats::fragmentation() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryAggregationStats.fragmentation)
  return _internal_fragmentation();
}
inline void MemoryAggregationStats::_internal_set_fragmentation(double value) {
  
  fragmentation_ = value;
}
inline void MemoryAggregationStats::set_fragmentation(double value) {
  _internal_set_fragmentation(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryAggregationStats.fragmentation)
}

// int64 peak_bytes_in_use = 5;
inline void MemoryAggregationStats::clear_peak_bytes_in_use() {
  peak_bytes_in_use_ = int64_t{0};
}
inline int64_t MemoryAggregationStats::_internal_peak_bytes_in_use() const {
  return peak_bytes_in_use_;
}
inline int64_t MemoryAggregationStats::peak_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryAggregationStats.peak_bytes_in_use)
  return _internal_peak_bytes_in_use();
}
inline void MemoryAggregationStats::_internal_set_peak_bytes_in_use(int64_t value) {
  
  peak_bytes_in_use_ = value;
}
inline void MemoryAggregationStats::set_peak_bytes_in_use(int64_t value) {
  _internal_set_peak_bytes_in_use(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryAggregationStats.peak_bytes_in_use)
}

// -------------------------------------------------------------------

// MemoryActivityMetadata

// .tensorflow.profiler.MemoryActivity memory_activity = 1;
inline void MemoryActivityMetadata::clear_memory_activity() {
  memory_activity_ = 0;
}
inline ::tensorflow::profiler::MemoryActivity MemoryActivityMetadata::_internal_memory_activity() const {
  return static_cast< ::tensorflow::profiler::MemoryActivity >(memory_activity_);
}
inline ::tensorflow::profiler::MemoryActivity MemoryActivityMetadata::memory_activity() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.memory_activity)
  return _internal_memory_activity();
}
inline void MemoryActivityMetadata::_internal_set_memory_activity(::tensorflow::profiler::MemoryActivity value) {
  
  memory_activity_ = value;
}
inline void MemoryActivityMetadata::set_memory_activity(::tensorflow::profiler::MemoryActivity value) {
  _internal_set_memory_activity(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.memory_activity)
}

// int64 requested_bytes = 2;
inline void MemoryActivityMetadata::clear_requested_bytes() {
  requested_bytes_ = int64_t{0};
}
inline int64_t MemoryActivityMetadata::_internal_requested_bytes() const {
  return requested_bytes_;
}
inline int64_t MemoryActivityMetadata::requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.requested_bytes)
  return _internal_requested_bytes();
}
inline void MemoryActivityMetadata::_internal_set_requested_bytes(int64_t value) {
  
  requested_bytes_ = value;
}
inline void MemoryActivityMetadata::set_requested_bytes(int64_t value) {
  _internal_set_requested_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.requested_bytes)
}

// int64 allocation_bytes = 3;
inline void MemoryActivityMetadata::clear_allocation_bytes() {
  allocation_bytes_ = int64_t{0};
}
inline int64_t MemoryActivityMetadata::_internal_allocation_bytes() const {
  return allocation_bytes_;
}
inline int64_t MemoryActivityMetadata::allocation_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.allocation_bytes)
  return _internal_allocation_bytes();
}
inline void MemoryActivityMetadata::_internal_set_allocation_bytes(int64_t value) {
  
  allocation_bytes_ = value;
}
inline void MemoryActivityMetadata::set_allocation_bytes(int64_t value) {
  _internal_set_allocation_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.allocation_bytes)
}

// uint64 address = 4;
inline void MemoryActivityMetadata::clear_address() {
  address_ = uint64_t{0u};
}
inline uint64_t MemoryActivityMetadata::_internal_address() const {
  return address_;
}
inline uint64_t MemoryActivityMetadata::address() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.address)
  return _internal_address();
}
inline void MemoryActivityMetadata::_internal_set_address(uint64_t value) {
  
  address_ = value;
}
inline void MemoryActivityMetadata::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.address)
}

// string tf_op_name = 5;
inline void MemoryActivityMetadata::clear_tf_op_name() {
  tf_op_name_.ClearToEmpty();
}
inline const std::string& MemoryActivityMetadata::tf_op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
  return _internal_tf_op_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryActivityMetadata::set_tf_op_name(ArgT0&& arg0, ArgT... args) {
 
 tf_op_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
}
inline std::string* MemoryActivityMetadata::mutable_tf_op_name() {
  std::string* _s = _internal_mutable_tf_op_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
  return _s;
}
inline const std::string& MemoryActivityMetadata::_internal_tf_op_name() const {
  return tf_op_name_.Get();
}
inline void MemoryActivityMetadata::_internal_set_tf_op_name(const std::string& value) {
  
  tf_op_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemoryActivityMetadata::_internal_mutable_tf_op_name() {
  
  return tf_op_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemoryActivityMetadata::release_tf_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
  return tf_op_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemoryActivityMetadata::set_allocated_tf_op_name(std::string* tf_op_name) {
  if (tf_op_name != nullptr) {
    
  } else {
    
  }
  tf_op_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tf_op_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tf_op_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tf_op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
}

// int64 step_id = 6;
inline void MemoryActivityMetadata::clear_step_id() {
  step_id_ = int64_t{0};
}
inline int64_t MemoryActivityMetadata::_internal_step_id() const {
  return step_id_;
}
inline int64_t MemoryActivityMetadata::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.step_id)
  return _internal_step_id();
}
inline void MemoryActivityMetadata::_internal_set_step_id(int64_t value) {
  
  step_id_ = value;
}
inline void MemoryActivityMetadata::set_step_id(int64_t value) {
  _internal_set_step_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.step_id)
}

// string region_type = 7;
inline void MemoryActivityMetadata::clear_region_type() {
  region_type_.ClearToEmpty();
}
inline const std::string& MemoryActivityMetadata::region_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.region_type)
  return _internal_region_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryActivityMetadata::set_region_type(ArgT0&& arg0, ArgT... args) {
 
 region_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.region_type)
}
inline std::string* MemoryActivityMetadata::mutable_region_type() {
  std::string* _s = _internal_mutable_region_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryActivityMetadata.region_type)
  return _s;
}
inline const std::string& MemoryActivityMetadata::_internal_region_type() const {
  return region_type_.Get();
}
inline void MemoryActivityMetadata::_internal_set_region_type(const std::string& value) {
  
  region_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemoryActivityMetadata::_internal_mutable_region_type() {
  
  return region_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemoryActivityMetadata::release_region_type() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryActivityMetadata.region_type)
  return region_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemoryActivityMetadata::set_allocated_region_type(std::string* region_type) {
  if (region_type != nullptr) {
    
  } else {
    
  }
  region_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (region_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    region_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryActivityMetadata.region_type)
}

// string data_type = 8;
inline void MemoryActivityMetadata::clear_data_type() {
  data_type_.ClearToEmpty();
}
inline const std::string& MemoryActivityMetadata::data_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.data_type)
  return _internal_data_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryActivityMetadata::set_data_type(ArgT0&& arg0, ArgT... args) {
 
 data_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.data_type)
}
inline std::string* MemoryActivityMetadata::mutable_data_type() {
  std::string* _s = _internal_mutable_data_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryActivityMetadata.data_type)
  return _s;
}
inline const std::string& MemoryActivityMetadata::_internal_data_type() const {
  return data_type_.Get();
}
inline void MemoryActivityMetadata::_internal_set_data_type(const std::string& value) {
  
  data_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemoryActivityMetadata::_internal_mutable_data_type() {
  
  return data_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemoryActivityMetadata::release_data_type() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryActivityMetadata.data_type)
  return data_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemoryActivityMetadata::set_allocated_data_type(std::string* data_type) {
  if (data_type != nullptr) {
    
  } else {
    
  }
  data_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryActivityMetadata.data_type)
}

// string tensor_shape = 9;
inline void MemoryActivityMetadata::clear_tensor_shape() {
  tensor_shape_.ClearToEmpty();
}
inline const std::string& MemoryActivityMetadata::tensor_shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
  return _internal_tensor_shape();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryActivityMetadata::set_tensor_shape(ArgT0&& arg0, ArgT... args) {
 
 tensor_shape_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
}
inline std::string* MemoryActivityMetadata::mutable_tensor_shape() {
  std::string* _s = _internal_mutable_tensor_shape();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
  return _s;
}
inline const std::string& MemoryActivityMetadata::_internal_tensor_shape() const {
  return tensor_shape_.Get();
}
inline void MemoryActivityMetadata::_internal_set_tensor_shape(const std::string& value) {
  
  tensor_shape_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemoryActivityMetadata::_internal_mutable_tensor_shape() {
  
  return tensor_shape_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemoryActivityMetadata::release_tensor_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
  return tensor_shape_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemoryActivityMetadata::set_allocated_tensor_shape(std::string* tensor_shape) {
  if (tensor_shape != nullptr) {
    
  } else {
    
  }
  tensor_shape_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_shape,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tensor_shape_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tensor_shape_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
}

// -------------------------------------------------------------------

// MemoryProfileSnapshot

// int64 time_offset_ps = 1;
inline void MemoryProfileSnapshot::clear_time_offset_ps() {
  time_offset_ps_ = int64_t{0};
}
inline int64_t MemoryProfileSnapshot::_internal_time_offset_ps() const {
  return time_offset_ps_;
}
inline int64_t MemoryProfileSnapshot::time_offset_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSnapshot.time_offset_ps)
  return _internal_time_offset_ps();
}
inline void MemoryProfileSnapshot::_internal_set_time_offset_ps(int64_t value) {
  
  time_offset_ps_ = value;
}
inline void MemoryProfileSnapshot::set_time_offset_ps(int64_t value) {
  _internal_set_time_offset_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfileSnapshot.time_offset_ps)
}

// .tensorflow.profiler.MemoryAggregationStats aggregation_stats = 2;
inline bool MemoryProfileSnapshot::_internal_has_aggregation_stats() const {
  return this != internal_default_instance() && aggregation_stats_ != nullptr;
}
inline bool MemoryProfileSnapshot::has_aggregation_stats() const {
  return _internal_has_aggregation_stats();
}
inline void MemoryProfileSnapshot::clear_aggregation_stats() {
  if (GetArenaForAllocation() == nullptr && aggregation_stats_ != nullptr) {
    delete aggregation_stats_;
  }
  aggregation_stats_ = nullptr;
}
inline const ::tensorflow::profiler::MemoryAggregationStats& MemoryProfileSnapshot::_internal_aggregation_stats() const {
  const ::tensorflow::profiler::MemoryAggregationStats* p = aggregation_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::MemoryAggregationStats&>(
      ::tensorflow::profiler::_MemoryAggregationStats_default_instance_);
}
inline const ::tensorflow::profiler::MemoryAggregationStats& MemoryProfileSnapshot::aggregation_stats() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSnapshot.aggregation_stats)
  return _internal_aggregation_stats();
}
inline void MemoryProfileSnapshot::unsafe_arena_set_allocated_aggregation_stats(
    ::tensorflow::profiler::MemoryAggregationStats* aggregation_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregation_stats_);
  }
  aggregation_stats_ = aggregation_stats;
  if (aggregation_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.MemoryProfileSnapshot.aggregation_stats)
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSnapshot::release_aggregation_stats() {
  
  ::tensorflow::profiler::MemoryAggregationStats* temp = aggregation_stats_;
  aggregation_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSnapshot::unsafe_arena_release_aggregation_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryProfileSnapshot.aggregation_stats)
  
  ::tensorflow::profiler::MemoryAggregationStats* temp = aggregation_stats_;
  aggregation_stats_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSnapshot::_internal_mutable_aggregation_stats() {
  
  if (aggregation_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::MemoryAggregationStats>(GetArenaForAllocation());
    aggregation_stats_ = p;
  }
  return aggregation_stats_;
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSnapshot::mutable_aggregation_stats() {
  ::tensorflow::profiler::MemoryAggregationStats* _msg = _internal_mutable_aggregation_stats();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryProfileSnapshot.aggregation_stats)
  return _msg;
}
inline void MemoryProfileSnapshot::set_allocated_aggregation_stats(::tensorflow::profiler::MemoryAggregationStats* aggregation_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete aggregation_stats_;
  }
  if (aggregation_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::MemoryAggregationStats>::GetOwningArena(aggregation_stats);
    if (message_arena != submessage_arena) {
      aggregation_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregation_stats, submessage_arena);
    }
    
  } else {
    
  }
  aggregation_stats_ = aggregation_stats;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryProfileSnapshot.aggregation_stats)
}

// .tensorflow.profiler.MemoryActivityMetadata activity_metadata = 3;
inline bool MemoryProfileSnapshot::_internal_has_activity_metadata() const {
  return this != internal_default_instance() && activity_metadata_ != nullptr;
}
inline bool MemoryProfileSnapshot::has_activity_metadata() const {
  return _internal_has_activity_metadata();
}
inline void MemoryProfileSnapshot::clear_activity_metadata() {
  if (GetArenaForAllocation() == nullptr && activity_metadata_ != nullptr) {
    delete activity_metadata_;
  }
  activity_metadata_ = nullptr;
}
inline const ::tensorflow::profiler::MemoryActivityMetadata& MemoryProfileSnapshot::_internal_activity_metadata() const {
  const ::tensorflow::profiler::MemoryActivityMetadata* p = activity_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::MemoryActivityMetadata&>(
      ::tensorflow::profiler::_MemoryActivityMetadata_default_instance_);
}
inline const ::tensorflow::profiler::MemoryActivityMetadata& MemoryProfileSnapshot::activity_metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSnapshot.activity_metadata)
  return _internal_activity_metadata();
}
inline void MemoryProfileSnapshot::unsafe_arena_set_allocated_activity_metadata(
    ::tensorflow::profiler::MemoryActivityMetadata* activity_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_metadata_);
  }
  activity_metadata_ = activity_metadata;
  if (activity_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.MemoryProfileSnapshot.activity_metadata)
}
inline ::tensorflow::profiler::MemoryActivityMetadata* MemoryProfileSnapshot::release_activity_metadata() {
  
  ::tensorflow::profiler::MemoryActivityMetadata* temp = activity_metadata_;
  activity_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::MemoryActivityMetadata* MemoryProfileSnapshot::unsafe_arena_release_activity_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryProfileSnapshot.activity_metadata)
  
  ::tensorflow::profiler::MemoryActivityMetadata* temp = activity_metadata_;
  activity_metadata_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::MemoryActivityMetadata* MemoryProfileSnapshot::_internal_mutable_activity_metadata() {
  
  if (activity_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::MemoryActivityMetadata>(GetArenaForAllocation());
    activity_metadata_ = p;
  }
  return activity_metadata_;
}
inline ::tensorflow::profiler::MemoryActivityMetadata* MemoryProfileSnapshot::mutable_activity_metadata() {
  ::tensorflow::profiler::MemoryActivityMetadata* _msg = _internal_mutable_activity_metadata();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryProfileSnapshot.activity_metadata)
  return _msg;
}
inline void MemoryProfileSnapshot::set_allocated_activity_metadata(::tensorflow::profiler::MemoryActivityMetadata* activity_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete activity_metadata_;
  }
  if (activity_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::MemoryActivityMetadata>::GetOwningArena(activity_metadata);
    if (message_arena != submessage_arena) {
      activity_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity_metadata, submessage_arena);
    }
    
  } else {
    
  }
  activity_metadata_ = activity_metadata;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryProfileSnapshot.activity_metadata)
}

// -------------------------------------------------------------------

// MemoryProfileSummary

// int64 peak_bytes_usage_lifetime = 1;
inline void MemoryProfileSummary::clear_peak_bytes_usage_lifetime() {
  peak_bytes_usage_lifetime_ = int64_t{0};
}
inline int64_t MemoryProfileSummary::_internal_peak_bytes_usage_lifetime() const {
  return peak_bytes_usage_lifetime_;
}
inline int64_t MemoryProfileSummary::peak_bytes_usage_lifetime() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSummary.peak_bytes_usage_lifetime)
  return _internal_peak_bytes_usage_lifetime();
}
inline void MemoryProfileSummary::_internal_set_peak_bytes_usage_lifetime(int64_t value) {
  
  peak_bytes_usage_lifetime_ = value;
}
inline void MemoryProfileSummary::set_peak_bytes_usage_lifetime(int64_t value) {
  _internal_set_peak_bytes_usage_lifetime(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfileSummary.peak_bytes_usage_lifetime)
}

// .tensorflow.profiler.MemoryAggregationStats peak_stats = 2;
inline bool MemoryProfileSummary::_internal_has_peak_stats() const {
  return this != internal_default_instance() && peak_stats_ != nullptr;
}
inline bool MemoryProfileSummary::has_peak_stats() const {
  return _internal_has_peak_stats();
}
inline void MemoryProfileSummary::clear_peak_stats() {
  if (GetArenaForAllocation() == nullptr && peak_stats_ != nullptr) {
    delete peak_stats_;
  }
  peak_stats_ = nullptr;
}
inline const ::tensorflow::profiler::MemoryAggregationStats& MemoryProfileSummary::_internal_peak_stats() const {
  const ::tensorflow::profiler::MemoryAggregationStats* p = peak_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::MemoryAggregationStats&>(
      ::tensorflow::profiler::_MemoryAggregationStats_default_instance_);
}
inline const ::tensorflow::profiler::MemoryAggregationStats& MemoryProfileSummary::peak_stats() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSummary.peak_stats)
  return _internal_peak_stats();
}
inline void MemoryProfileSummary::unsafe_arena_set_allocated_peak_stats(
    ::tensorflow::profiler::MemoryAggregationStats* peak_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peak_stats_);
  }
  peak_stats_ = peak_stats;
  if (peak_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.MemoryProfileSummary.peak_stats)
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSummary::release_peak_stats() {
  
  ::tensorflow::profiler::MemoryAggregationStats* temp = peak_stats_;
  peak_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSummary::unsafe_arena_release_peak_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryProfileSummary.peak_stats)
  
  ::tensorflow::profiler::MemoryAggregationStats* temp = peak_stats_;
  peak_stats_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSummary::_internal_mutable_peak_stats() {
  
  if (peak_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::MemoryAggregationStats>(GetArenaForAllocation());
    peak_stats_ = p;
  }
  return peak_stats_;
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSummary::mutable_peak_stats() {
  ::tensorflow::profiler::MemoryAggregationStats* _msg = _internal_mutable_peak_stats();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryProfileSummary.peak_stats)
  return _msg;
}
inline void MemoryProfileSummary::set_allocated_peak_stats(::tensorflow::profiler::MemoryAggregationStats* peak_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete peak_stats_;
  }
  if (peak_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::MemoryAggregationStats>::GetOwningArena(peak_stats);
    if (message_arena != submessage_arena) {
      peak_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peak_stats, submessage_arena);
    }
    
  } else {
    
  }
  peak_stats_ = peak_stats;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryProfileSummary.peak_stats)
}

// int64 peak_stats_time_ps = 3;
inline void MemoryProfileSummary::clear_peak_stats_time_ps() {
  peak_stats_time_ps_ = int64_t{0};
}
inline int64_t MemoryProfileSummary::_internal_peak_stats_time_ps() const {
  return peak_stats_time_ps_;
}
inline int64_t MemoryProfileSummary::peak_stats_time_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSummary.peak_stats_time_ps)
  return _internal_peak_stats_time_ps();
}
inline void MemoryProfileSummary::_internal_set_peak_stats_time_ps(int64_t value) {
  
  peak_stats_time_ps_ = value;
}
inline void MemoryProfileSummary::set_peak_stats_time_ps(int64_t value) {
  _internal_set_peak_stats_time_ps(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfileSummary.peak_stats_time_ps)
}

// int64 memory_capacity = 4;
inline void MemoryProfileSummary::clear_memory_capacity() {
  memory_capacity_ = int64_t{0};
}
inline int64_t MemoryProfileSummary::_internal_memory_capacity() const {
  return memory_capacity_;
}
inline int64_t MemoryProfileSummary::memory_capacity() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSummary.memory_capacity)
  return _internal_memory_capacity();
}
inline void MemoryProfileSummary::_internal_set_memory_capacity(int64_t value) {
  
  memory_capacity_ = value;
}
inline void MemoryProfileSummary::set_memory_capacity(int64_t value) {
  _internal_set_memory_capacity(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfileSummary.memory_capacity)
}

// -------------------------------------------------------------------

// ActiveAllocation

// int64 snapshot_index = 1;
inline void ActiveAllocation::clear_snapshot_index() {
  snapshot_index_ = int64_t{0};
}
inline int64_t ActiveAllocation::_internal_snapshot_index() const {
  return snapshot_index_;
}
inline int64_t ActiveAllocation::snapshot_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.ActiveAllocation.snapshot_index)
  return _internal_snapshot_index();
}
inline void ActiveAllocation::_internal_set_snapshot_index(int64_t value) {
  
  snapshot_index_ = value;
}
inline void ActiveAllocation::set_snapshot_index(int64_t value) {
  _internal_set_snapshot_index(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.ActiveAllocation.snapshot_index)
}

// int64 special_index = 2;
inline void ActiveAllocation::clear_special_index() {
  special_index_ = int64_t{0};
}
inline int64_t ActiveAllocation::_internal_special_index() const {
  return special_index_;
}
inline int64_t ActiveAllocation::special_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.ActiveAllocation.special_index)
  return _internal_special_index();
}
inline void ActiveAllocation::_internal_set_special_index(int64_t value) {
  
  special_index_ = value;
}
inline void ActiveAllocation::set_special_index(int64_t value) {
  _internal_set_special_index(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.ActiveAllocation.special_index)
}

// int64 num_occurrences = 3;
inline void ActiveAllocation::clear_num_occurrences() {
  num_occurrences_ = int64_t{0};
}
inline int64_t ActiveAllocation::_internal_num_occurrences() const {
  return num_occurrences_;
}
inline int64_t ActiveAllocation::num_occurrences() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.ActiveAllocation.num_occurrences)
  return _internal_num_occurrences();
}
inline void ActiveAllocation::_internal_set_num_occurrences(int64_t value) {
  
  num_occurrences_ = value;
}
inline void ActiveAllocation::set_num_occurrences(int64_t value) {
  _internal_set_num_occurrences(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.ActiveAllocation.num_occurrences)
}

// -------------------------------------------------------------------

// PerAllocatorMemoryProfile

// repeated .tensorflow.profiler.MemoryProfileSnapshot memory_profile_snapshots = 1;
inline int PerAllocatorMemoryProfile::_internal_memory_profile_snapshots_size() const {
  return memory_profile_snapshots_.size();
}
inline int PerAllocatorMemoryProfile::memory_profile_snapshots_size() const {
  return _internal_memory_profile_snapshots_size();
}
inline void PerAllocatorMemoryProfile::clear_memory_profile_snapshots() {
  memory_profile_snapshots_.Clear();
}
inline ::tensorflow::profiler::MemoryProfileSnapshot* PerAllocatorMemoryProfile::mutable_memory_profile_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots)
  return memory_profile_snapshots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >*
PerAllocatorMemoryProfile::mutable_memory_profile_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots)
  return &memory_profile_snapshots_;
}
inline const ::tensorflow::profiler::MemoryProfileSnapshot& PerAllocatorMemoryProfile::_internal_memory_profile_snapshots(int index) const {
  return memory_profile_snapshots_.Get(index);
}
inline const ::tensorflow::profiler::MemoryProfileSnapshot& PerAllocatorMemoryProfile::memory_profile_snapshots(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots)
  return _internal_memory_profile_snapshots(index);
}
inline ::tensorflow::profiler::MemoryProfileSnapshot* PerAllocatorMemoryProfile::_internal_add_memory_profile_snapshots() {
  return memory_profile_snapshots_.Add();
}
inline ::tensorflow::profiler::MemoryProfileSnapshot* PerAllocatorMemoryProfile::add_memory_profile_snapshots() {
  ::tensorflow::profiler::MemoryProfileSnapshot* _add = _internal_add_memory_profile_snapshots();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >&
PerAllocatorMemoryProfile::memory_profile_snapshots() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots)
  return memory_profile_snapshots_;
}

// .tensorflow.profiler.MemoryProfileSummary profile_summary = 2;
inline bool PerAllocatorMemoryProfile::_internal_has_profile_summary() const {
  return this != internal_default_instance() && profile_summary_ != nullptr;
}
inline bool PerAllocatorMemoryProfile::has_profile_summary() const {
  return _internal_has_profile_summary();
}
inline void PerAllocatorMemoryProfile::clear_profile_summary() {
  if (GetArenaForAllocation() == nullptr && profile_summary_ != nullptr) {
    delete profile_summary_;
  }
  profile_summary_ = nullptr;
}
inline const ::tensorflow::profiler::MemoryProfileSummary& PerAllocatorMemoryProfile::_internal_profile_summary() const {
  const ::tensorflow::profiler::MemoryProfileSummary* p = profile_summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::profiler::MemoryProfileSummary&>(
      ::tensorflow::profiler::_MemoryProfileSummary_default_instance_);
}
inline const ::tensorflow::profiler::MemoryProfileSummary& PerAllocatorMemoryProfile::profile_summary() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerAllocatorMemoryProfile.profile_summary)
  return _internal_profile_summary();
}
inline void PerAllocatorMemoryProfile::unsafe_arena_set_allocated_profile_summary(
    ::tensorflow::profiler::MemoryProfileSummary* profile_summary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_summary_);
  }
  profile_summary_ = profile_summary;
  if (profile_summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.profiler.PerAllocatorMemoryProfile.profile_summary)
}
inline ::tensorflow::profiler::MemoryProfileSummary* PerAllocatorMemoryProfile::release_profile_summary() {
  
  ::tensorflow::profiler::MemoryProfileSummary* temp = profile_summary_;
  profile_summary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::profiler::MemoryProfileSummary* PerAllocatorMemoryProfile::unsafe_arena_release_profile_summary() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.PerAllocatorMemoryProfile.profile_summary)
  
  ::tensorflow::profiler::MemoryProfileSummary* temp = profile_summary_;
  profile_summary_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::MemoryProfileSummary* PerAllocatorMemoryProfile::_internal_mutable_profile_summary() {
  
  if (profile_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::MemoryProfileSummary>(GetArenaForAllocation());
    profile_summary_ = p;
  }
  return profile_summary_;
}
inline ::tensorflow::profiler::MemoryProfileSummary* PerAllocatorMemoryProfile::mutable_profile_summary() {
  ::tensorflow::profiler::MemoryProfileSummary* _msg = _internal_mutable_profile_summary();
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PerAllocatorMemoryProfile.profile_summary)
  return _msg;
}
inline void PerAllocatorMemoryProfile::set_allocated_profile_summary(::tensorflow::profiler::MemoryProfileSummary* profile_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_summary_;
  }
  if (profile_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorflow::profiler::MemoryProfileSummary>::GetOwningArena(profile_summary);
    if (message_arena != submessage_arena) {
      profile_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_summary, submessage_arena);
    }
    
  } else {
    
  }
  profile_summary_ = profile_summary;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.PerAllocatorMemoryProfile.profile_summary)
}

// repeated .tensorflow.profiler.ActiveAllocation active_allocations = 3;
inline int PerAllocatorMemoryProfile::_internal_active_allocations_size() const {
  return active_allocations_.size();
}
inline int PerAllocatorMemoryProfile::active_allocations_size() const {
  return _internal_active_allocations_size();
}
inline void PerAllocatorMemoryProfile::clear_active_allocations() {
  active_allocations_.Clear();
}
inline ::tensorflow::profiler::ActiveAllocation* PerAllocatorMemoryProfile::mutable_active_allocations(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations)
  return active_allocations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::ActiveAllocation >*
PerAllocatorMemoryProfile::mutable_active_allocations() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations)
  return &active_allocations_;
}
inline const ::tensorflow::profiler::ActiveAllocation& PerAllocatorMemoryProfile::_internal_active_allocations(int index) const {
  return active_allocations_.Get(index);
}
inline const ::tensorflow::profiler::ActiveAllocation& PerAllocatorMemoryProfile::active_allocations(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations)
  return _internal_active_allocations(index);
}
inline ::tensorflow::profiler::ActiveAllocation* PerAllocatorMemoryProfile::_internal_add_active_allocations() {
  return active_allocations_.Add();
}
inline ::tensorflow::profiler::ActiveAllocation* PerAllocatorMemoryProfile::add_active_allocations() {
  ::tensorflow::profiler::ActiveAllocation* _add = _internal_add_active_allocations();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::ActiveAllocation >&
PerAllocatorMemoryProfile::active_allocations() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations)
  return active_allocations_;
}

// repeated .tensorflow.profiler.MemoryActivityMetadata special_allocations = 4;
inline int PerAllocatorMemoryProfile::_internal_special_allocations_size() const {
  return special_allocations_.size();
}
inline int PerAllocatorMemoryProfile::special_allocations_size() const {
  return _internal_special_allocations_size();
}
inline void PerAllocatorMemoryProfile::clear_special_allocations() {
  special_allocations_.Clear();
}
inline ::tensorflow::profiler::MemoryActivityMetadata* PerAllocatorMemoryProfile::mutable_special_allocations(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations)
  return special_allocations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::MemoryActivityMetadata >*
PerAllocatorMemoryProfile::mutable_special_allocations() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations)
  return &special_allocations_;
}
inline const ::tensorflow::profiler::MemoryActivityMetadata& PerAllocatorMemoryProfile::_internal_special_allocations(int index) const {
  return special_allocations_.Get(index);
}
inline const ::tensorflow::profiler::MemoryActivityMetadata& PerAllocatorMemoryProfile::special_allocations(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations)
  return _internal_special_allocations(index);
}
inline ::tensorflow::profiler::MemoryActivityMetadata* PerAllocatorMemoryProfile::_internal_add_special_allocations() {
  return special_allocations_.Add();
}
inline ::tensorflow::profiler::MemoryActivityMetadata* PerAllocatorMemoryProfile::add_special_allocations() {
  ::tensorflow::profiler::MemoryActivityMetadata* _add = _internal_add_special_allocations();
  // @@protoc_insertion_point(field_add:tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::profiler::MemoryActivityMetadata >&
PerAllocatorMemoryProfile::special_allocations() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations)
  return special_allocations_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MemoryProfile

// map<string, .tensorflow.profiler.PerAllocatorMemoryProfile> memory_profile_per_allocator = 1;
inline int MemoryProfile::_internal_memory_profile_per_allocator_size() const {
  return memory_profile_per_allocator_.size();
}
inline int MemoryProfile::memory_profile_per_allocator_size() const {
  return _internal_memory_profile_per_allocator_size();
}
inline void MemoryProfile::clear_memory_profile_per_allocator() {
  memory_profile_per_allocator_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >&
MemoryProfile::_internal_memory_profile_per_allocator() const {
  return memory_profile_per_allocator_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >&
MemoryProfile::memory_profile_per_allocator() const {
  // @@protoc_insertion_point(field_map:tensorflow.profiler.MemoryProfile.memory_profile_per_allocator)
  return _internal_memory_profile_per_allocator();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >*
MemoryProfile::_internal_mutable_memory_profile_per_allocator() {
  return memory_profile_per_allocator_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >*
MemoryProfile::mutable_memory_profile_per_allocator() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.profiler.MemoryProfile.memory_profile_per_allocator)
  return _internal_mutable_memory_profile_per_allocator();
}

// int32 num_hosts = 2;
inline void MemoryProfile::clear_num_hosts() {
  num_hosts_ = 0;
}
inline int32_t MemoryProfile::_internal_num_hosts() const {
  return num_hosts_;
}
inline int32_t MemoryProfile::num_hosts() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfile.num_hosts)
  return _internal_num_hosts();
}
inline void MemoryProfile::_internal_set_num_hosts(int32_t value) {
  
  num_hosts_ = value;
}
inline void MemoryProfile::set_num_hosts(int32_t value) {
  _internal_set_num_hosts(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfile.num_hosts)
}

// repeated string memory_ids = 3;
inline int MemoryProfile::_internal_memory_ids_size() const {
  return memory_ids_.size();
}
inline int MemoryProfile::memory_ids_size() const {
  return _internal_memory_ids_size();
}
inline void MemoryProfile::clear_memory_ids() {
  memory_ids_.Clear();
}
inline std::string* MemoryProfile::add_memory_ids() {
  std::string* _s = _internal_add_memory_ids();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.profiler.MemoryProfile.memory_ids)
  return _s;
}
inline const std::string& MemoryProfile::_internal_memory_ids(int index) const {
  return memory_ids_.Get(index);
}
inline const std::string& MemoryProfile::memory_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfile.memory_ids)
  return _internal_memory_ids(index);
}
inline std::string* MemoryProfile::mutable_memory_ids(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryProfile.memory_ids)
  return memory_ids_.Mutable(index);
}
inline void MemoryProfile::set_memory_ids(int index, const std::string& value) {
  memory_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline void MemoryProfile::set_memory_ids(int index, std::string&& value) {
  memory_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline void MemoryProfile::set_memory_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  memory_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline void MemoryProfile::set_memory_ids(int index, const char* value, size_t size) {
  memory_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline std::string* MemoryProfile::_internal_add_memory_ids() {
  return memory_ids_.Add();
}
inline void MemoryProfile::add_memory_ids(const std::string& value) {
  memory_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline void MemoryProfile::add_memory_ids(std::string&& value) {
  memory_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline void MemoryProfile::add_memory_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  memory_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline void MemoryProfile::add_memory_ids(const char* value, size_t size) {
  memory_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MemoryProfile::memory_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.MemoryProfile.memory_ids)
  return memory_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MemoryProfile::mutable_memory_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.MemoryProfile.memory_ids)
  return &memory_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::profiler::MemoryActivity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::profiler::MemoryActivity>() {
  return ::tensorflow::profiler::MemoryActivity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto
