// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/diagnostics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fdiagnostics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fdiagnostics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fdiagnostics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fdiagnostics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fdiagnostics_2eproto;
namespace tensorflow {
namespace profiler {
class Diagnostics;
struct DiagnosticsDefaultTypeInternal;
extern DiagnosticsDefaultTypeInternal _Diagnostics_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::profiler::Diagnostics* Arena::CreateMaybeMessage<::tensorflow::profiler::Diagnostics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace profiler {

// ===================================================================

class Diagnostics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.Diagnostics) */ {
 public:
  inline Diagnostics() : Diagnostics(nullptr) {}
  ~Diagnostics() override;
  explicit constexpr Diagnostics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Diagnostics(const Diagnostics& from);
  Diagnostics(Diagnostics&& from) noexcept
    : Diagnostics() {
    *this = ::std::move(from);
  }

  inline Diagnostics& operator=(const Diagnostics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Diagnostics& operator=(Diagnostics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Diagnostics& default_instance() {
    return *internal_default_instance();
  }
  static inline const Diagnostics* internal_default_instance() {
    return reinterpret_cast<const Diagnostics*>(
               &_Diagnostics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Diagnostics& a, Diagnostics& b) {
    a.Swap(&b);
  }
  inline void Swap(Diagnostics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Diagnostics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Diagnostics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Diagnostics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Diagnostics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Diagnostics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Diagnostics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.Diagnostics";
  }
  protected:
  explicit Diagnostics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kWarningsFieldNumber = 2,
    kErrorsFieldNumber = 3,
  };
  // repeated string info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  const std::string& info(int index) const;
  std::string* mutable_info(int index);
  void set_info(int index, const std::string& value);
  void set_info(int index, std::string&& value);
  void set_info(int index, const char* value);
  void set_info(int index, const char* value, size_t size);
  std::string* add_info();
  void add_info(const std::string& value);
  void add_info(std::string&& value);
  void add_info(const char* value);
  void add_info(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_info();
  private:
  const std::string& _internal_info(int index) const;
  std::string* _internal_add_info();
  public:

  // repeated string warnings = 2;
  int warnings_size() const;
  private:
  int _internal_warnings_size() const;
  public:
  void clear_warnings();
  const std::string& warnings(int index) const;
  std::string* mutable_warnings(int index);
  void set_warnings(int index, const std::string& value);
  void set_warnings(int index, std::string&& value);
  void set_warnings(int index, const char* value);
  void set_warnings(int index, const char* value, size_t size);
  std::string* add_warnings();
  void add_warnings(const std::string& value);
  void add_warnings(std::string&& value);
  void add_warnings(const char* value);
  void add_warnings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& warnings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_warnings();
  private:
  const std::string& _internal_warnings(int index) const;
  std::string* _internal_add_warnings();
  public:

  // repeated string errors = 3;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  const std::string& errors(int index) const;
  std::string* mutable_errors(int index);
  void set_errors(int index, const std::string& value);
  void set_errors(int index, std::string&& value);
  void set_errors(int index, const char* value);
  void set_errors(int index, const char* value, size_t size);
  std::string* add_errors();
  void add_errors(const std::string& value);
  void add_errors(std::string&& value);
  void add_errors(const char* value);
  void add_errors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& errors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_errors();
  private:
  const std::string& _internal_errors(int index) const;
  std::string* _internal_add_errors();
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.Diagnostics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> warnings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fdiagnostics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Diagnostics

// repeated string info = 1;
inline int Diagnostics::_internal_info_size() const {
  return info_.size();
}
inline int Diagnostics::info_size() const {
  return _internal_info_size();
}
inline void Diagnostics::clear_info() {
  info_.Clear();
}
inline std::string* Diagnostics::add_info() {
  std::string* _s = _internal_add_info();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.profiler.Diagnostics.info)
  return _s;
}
inline const std::string& Diagnostics::_internal_info(int index) const {
  return info_.Get(index);
}
inline const std::string& Diagnostics::info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.Diagnostics.info)
  return _internal_info(index);
}
inline std::string* Diagnostics::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.Diagnostics.info)
  return info_.Mutable(index);
}
inline void Diagnostics::set_info(int index, const std::string& value) {
  info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.Diagnostics.info)
}
inline void Diagnostics::set_info(int index, std::string&& value) {
  info_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensorflow.profiler.Diagnostics.info)
}
inline void Diagnostics::set_info(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.Diagnostics.info)
}
inline void Diagnostics::set_info(int index, const char* value, size_t size) {
  info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.Diagnostics.info)
}
inline std::string* Diagnostics::_internal_add_info() {
  return info_.Add();
}
inline void Diagnostics::add_info(const std::string& value) {
  info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.profiler.Diagnostics.info)
}
inline void Diagnostics::add_info(std::string&& value) {
  info_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.profiler.Diagnostics.info)
}
inline void Diagnostics::add_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.profiler.Diagnostics.info)
}
inline void Diagnostics::add_info(const char* value, size_t size) {
  info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.profiler.Diagnostics.info)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Diagnostics::info() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.Diagnostics.info)
  return info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Diagnostics::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.Diagnostics.info)
  return &info_;
}

// repeated string warnings = 2;
inline int Diagnostics::_internal_warnings_size() const {
  return warnings_.size();
}
inline int Diagnostics::warnings_size() const {
  return _internal_warnings_size();
}
inline void Diagnostics::clear_warnings() {
  warnings_.Clear();
}
inline std::string* Diagnostics::add_warnings() {
  std::string* _s = _internal_add_warnings();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.profiler.Diagnostics.warnings)
  return _s;
}
inline const std::string& Diagnostics::_internal_warnings(int index) const {
  return warnings_.Get(index);
}
inline const std::string& Diagnostics::warnings(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.Diagnostics.warnings)
  return _internal_warnings(index);
}
inline std::string* Diagnostics::mutable_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.Diagnostics.warnings)
  return warnings_.Mutable(index);
}
inline void Diagnostics::set_warnings(int index, const std::string& value) {
  warnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.Diagnostics.warnings)
}
inline void Diagnostics::set_warnings(int index, std::string&& value) {
  warnings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensorflow.profiler.Diagnostics.warnings)
}
inline void Diagnostics::set_warnings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.Diagnostics.warnings)
}
inline void Diagnostics::set_warnings(int index, const char* value, size_t size) {
  warnings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.Diagnostics.warnings)
}
inline std::string* Diagnostics::_internal_add_warnings() {
  return warnings_.Add();
}
inline void Diagnostics::add_warnings(const std::string& value) {
  warnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.profiler.Diagnostics.warnings)
}
inline void Diagnostics::add_warnings(std::string&& value) {
  warnings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.profiler.Diagnostics.warnings)
}
inline void Diagnostics::add_warnings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.profiler.Diagnostics.warnings)
}
inline void Diagnostics::add_warnings(const char* value, size_t size) {
  warnings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.profiler.Diagnostics.warnings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Diagnostics::warnings() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.Diagnostics.warnings)
  return warnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Diagnostics::mutable_warnings() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.Diagnostics.warnings)
  return &warnings_;
}

// repeated string errors = 3;
inline int Diagnostics::_internal_errors_size() const {
  return errors_.size();
}
inline int Diagnostics::errors_size() const {
  return _internal_errors_size();
}
inline void Diagnostics::clear_errors() {
  errors_.Clear();
}
inline std::string* Diagnostics::add_errors() {
  std::string* _s = _internal_add_errors();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.profiler.Diagnostics.errors)
  return _s;
}
inline const std::string& Diagnostics::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const std::string& Diagnostics::errors(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.Diagnostics.errors)
  return _internal_errors(index);
}
inline std::string* Diagnostics::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.Diagnostics.errors)
  return errors_.Mutable(index);
}
inline void Diagnostics::set_errors(int index, const std::string& value) {
  errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.Diagnostics.errors)
}
inline void Diagnostics::set_errors(int index, std::string&& value) {
  errors_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensorflow.profiler.Diagnostics.errors)
}
inline void Diagnostics::set_errors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.Diagnostics.errors)
}
inline void Diagnostics::set_errors(int index, const char* value, size_t size) {
  errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.Diagnostics.errors)
}
inline std::string* Diagnostics::_internal_add_errors() {
  return errors_.Add();
}
inline void Diagnostics::add_errors(const std::string& value) {
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.profiler.Diagnostics.errors)
}
inline void Diagnostics::add_errors(std::string&& value) {
  errors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.profiler.Diagnostics.errors)
}
inline void Diagnostics::add_errors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.profiler.Diagnostics.errors)
}
inline void Diagnostics::add_errors(const char* value, size_t size) {
  errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.profiler.Diagnostics.errors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Diagnostics::errors() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.Diagnostics.errors)
  return errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Diagnostics::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.Diagnostics.errors)
  return &errors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fdiagnostics_2eproto
