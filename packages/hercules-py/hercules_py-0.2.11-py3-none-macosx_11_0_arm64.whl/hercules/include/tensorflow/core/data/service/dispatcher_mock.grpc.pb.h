// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/data/service/dispatcher.proto

#include "tensorflow/core/data/service/dispatcher.pb.h"
#include "tensorflow/core/data/service/dispatcher.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace tensorflow {
namespace data {

class MockDispatcherServiceStub : public DispatcherService::StubInterface {
 public:
  MOCK_METHOD3(WorkerHeartbeat, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::WorkerHeartbeatRequest& request, ::tensorflow::data::WorkerHeartbeatResponse* response));
  MOCK_METHOD3(AsyncWorkerHeartbeatRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::WorkerHeartbeatResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::WorkerHeartbeatRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncWorkerHeartbeatRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::WorkerHeartbeatResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::WorkerHeartbeatRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(WorkerUpdate, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::WorkerUpdateRequest& request, ::tensorflow::data::WorkerUpdateResponse* response));
  MOCK_METHOD3(AsyncWorkerUpdateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::WorkerUpdateResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::WorkerUpdateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncWorkerUpdateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::WorkerUpdateResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::WorkerUpdateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetDatasetDef, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::GetDatasetDefRequest& request, ::tensorflow::data::GetDatasetDefResponse* response));
  MOCK_METHOD3(AsyncGetDatasetDefRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetDatasetDefResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetDatasetDefRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetDatasetDefRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetDatasetDefResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetDatasetDefRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetSplit, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::GetSplitRequest& request, ::tensorflow::data::GetSplitResponse* response));
  MOCK_METHOD3(AsyncGetSplitRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetSplitResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetSplitRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetSplitRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetSplitResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetSplitRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetVersion, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::GetVersionRequest& request, ::tensorflow::data::GetVersionResponse* response));
  MOCK_METHOD3(AsyncGetVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetVersionResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetVersionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetVersionResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetVersionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetOrRegisterDataset, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::GetOrRegisterDatasetRequest& request, ::tensorflow::data::GetOrRegisterDatasetResponse* response));
  MOCK_METHOD3(AsyncGetOrRegisterDatasetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetOrRegisterDatasetResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetOrRegisterDatasetRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetOrRegisterDatasetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetOrRegisterDatasetResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetOrRegisterDatasetRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetOrCreateJob, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::GetOrCreateJobRequest& request, ::tensorflow::data::GetOrCreateJobResponse* response));
  MOCK_METHOD3(AsyncGetOrCreateJobRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetOrCreateJobResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetOrCreateJobRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetOrCreateJobRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetOrCreateJobResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetOrCreateJobRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(MaybeRemoveTask, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::MaybeRemoveTaskRequest& request, ::tensorflow::data::MaybeRemoveTaskResponse* response));
  MOCK_METHOD3(AsyncMaybeRemoveTaskRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::MaybeRemoveTaskResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::MaybeRemoveTaskRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncMaybeRemoveTaskRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::MaybeRemoveTaskResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::MaybeRemoveTaskRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ReleaseJobClient, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::ReleaseJobClientRequest& request, ::tensorflow::data::ReleaseJobClientResponse* response));
  MOCK_METHOD3(AsyncReleaseJobClientRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::ReleaseJobClientResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::ReleaseJobClientRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncReleaseJobClientRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::ReleaseJobClientResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::ReleaseJobClientRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ClientHeartbeat, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::ClientHeartbeatRequest& request, ::tensorflow::data::ClientHeartbeatResponse* response));
  MOCK_METHOD3(AsyncClientHeartbeatRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::ClientHeartbeatResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::ClientHeartbeatRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncClientHeartbeatRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::ClientHeartbeatResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::ClientHeartbeatRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetWorkers, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkersRequest& request, ::tensorflow::data::GetWorkersResponse* response));
  MOCK_METHOD3(AsyncGetWorkersRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetWorkersResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkersRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetWorkersRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetWorkersResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkersRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetElementSpec, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::GetElementSpecRequest& request, ::tensorflow::data::GetElementSpecResponse* response));
  MOCK_METHOD3(AsyncGetElementSpecRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetElementSpecResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetElementSpecRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetElementSpecRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetElementSpecResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetElementSpecRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetDataServiceMetadata, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceMetadataRequest& request, ::tensorflow::data::GetDataServiceMetadataResponse* response));
  MOCK_METHOD3(AsyncGetDataServiceMetadataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetDataServiceMetadataResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceMetadataRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetDataServiceMetadataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::data::GetDataServiceMetadataResponse>*(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceMetadataRequest& request, ::grpc::CompletionQueue* cq));
};

} // namespace tensorflow
} // namespace data

