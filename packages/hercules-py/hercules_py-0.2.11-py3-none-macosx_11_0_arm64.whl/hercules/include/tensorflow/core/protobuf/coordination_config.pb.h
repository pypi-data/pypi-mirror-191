// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/coordination_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto;
namespace tensorflow {
class CoordinationServiceConfig;
struct CoordinationServiceConfigDefaultTypeInternal;
extern CoordinationServiceConfigDefaultTypeInternal _CoordinationServiceConfig_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::CoordinationServiceConfig* Arena::CreateMaybeMessage<::tensorflow::CoordinationServiceConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class CoordinationServiceConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.CoordinationServiceConfig) */ {
 public:
  inline CoordinationServiceConfig() : CoordinationServiceConfig(nullptr) {}
  ~CoordinationServiceConfig() override;
  explicit constexpr CoordinationServiceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoordinationServiceConfig(const CoordinationServiceConfig& from);
  CoordinationServiceConfig(CoordinationServiceConfig&& from) noexcept
    : CoordinationServiceConfig() {
    *this = ::std::move(from);
  }

  inline CoordinationServiceConfig& operator=(const CoordinationServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinationServiceConfig& operator=(CoordinationServiceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordinationServiceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoordinationServiceConfig* internal_default_instance() {
    return reinterpret_cast<const CoordinationServiceConfig*>(
               &_CoordinationServiceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CoordinationServiceConfig& a, CoordinationServiceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinationServiceConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordinationServiceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoordinationServiceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CoordinationServiceConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoordinationServiceConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CoordinationServiceConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationServiceConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.CoordinationServiceConfig";
  }
  protected:
  explicit CoordinationServiceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatedJobsFieldNumber = 6,
    kServiceTypeFieldNumber = 1,
    kServiceLeaderFieldNumber = 2,
    kClusterRegisterTimeoutInMsFieldNumber = 4,
    kHeartbeatTimeoutInMsFieldNumber = 5,
    kEnableHealthCheckFieldNumber = 3,
  };
  // repeated string coordinated_jobs = 6;
  int coordinated_jobs_size() const;
  private:
  int _internal_coordinated_jobs_size() const;
  public:
  void clear_coordinated_jobs();
  const std::string& coordinated_jobs(int index) const;
  std::string* mutable_coordinated_jobs(int index);
  void set_coordinated_jobs(int index, const std::string& value);
  void set_coordinated_jobs(int index, std::string&& value);
  void set_coordinated_jobs(int index, const char* value);
  void set_coordinated_jobs(int index, const char* value, size_t size);
  std::string* add_coordinated_jobs();
  void add_coordinated_jobs(const std::string& value);
  void add_coordinated_jobs(std::string&& value);
  void add_coordinated_jobs(const char* value);
  void add_coordinated_jobs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& coordinated_jobs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_coordinated_jobs();
  private:
  const std::string& _internal_coordinated_jobs(int index) const;
  std::string* _internal_add_coordinated_jobs();
  public:

  // string service_type = 1;
  void clear_service_type();
  const std::string& service_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_type();
  PROTOBUF_NODISCARD std::string* release_service_type();
  void set_allocated_service_type(std::string* service_type);
  private:
  const std::string& _internal_service_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_type(const std::string& value);
  std::string* _internal_mutable_service_type();
  public:

  // string service_leader = 2;
  void clear_service_leader();
  const std::string& service_leader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_leader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_leader();
  PROTOBUF_NODISCARD std::string* release_service_leader();
  void set_allocated_service_leader(std::string* service_leader);
  private:
  const std::string& _internal_service_leader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_leader(const std::string& value);
  std::string* _internal_mutable_service_leader();
  public:

  // int64 cluster_register_timeout_in_ms = 4;
  void clear_cluster_register_timeout_in_ms();
  int64_t cluster_register_timeout_in_ms() const;
  void set_cluster_register_timeout_in_ms(int64_t value);
  private:
  int64_t _internal_cluster_register_timeout_in_ms() const;
  void _internal_set_cluster_register_timeout_in_ms(int64_t value);
  public:

  // int64 heartbeat_timeout_in_ms = 5;
  void clear_heartbeat_timeout_in_ms();
  int64_t heartbeat_timeout_in_ms() const;
  void set_heartbeat_timeout_in_ms(int64_t value);
  private:
  int64_t _internal_heartbeat_timeout_in_ms() const;
  void _internal_set_heartbeat_timeout_in_ms(int64_t value);
  public:

  // bool enable_health_check = 3;
  void clear_enable_health_check();
  bool enable_health_check() const;
  void set_enable_health_check(bool value);
  private:
  bool _internal_enable_health_check() const;
  void _internal_set_enable_health_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.CoordinationServiceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> coordinated_jobs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_leader_;
  int64_t cluster_register_timeout_in_ms_;
  int64_t heartbeat_timeout_in_ms_;
  bool enable_health_check_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CoordinationServiceConfig

// string service_type = 1;
inline void CoordinationServiceConfig::clear_service_type() {
  service_type_.ClearToEmpty();
}
inline const std::string& CoordinationServiceConfig::service_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.service_type)
  return _internal_service_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoordinationServiceConfig::set_service_type(ArgT0&& arg0, ArgT... args) {
 
 service_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.service_type)
}
inline std::string* CoordinationServiceConfig::mutable_service_type() {
  std::string* _s = _internal_mutable_service_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.service_type)
  return _s;
}
inline const std::string& CoordinationServiceConfig::_internal_service_type() const {
  return service_type_.Get();
}
inline void CoordinationServiceConfig::_internal_set_service_type(const std::string& value) {
  
  service_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CoordinationServiceConfig::_internal_mutable_service_type() {
  
  return service_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CoordinationServiceConfig::release_service_type() {
  // @@protoc_insertion_point(field_release:tensorflow.CoordinationServiceConfig.service_type)
  return service_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CoordinationServiceConfig::set_allocated_service_type(std::string* service_type) {
  if (service_type != nullptr) {
    
  } else {
    
  }
  service_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (service_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    service_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CoordinationServiceConfig.service_type)
}

// string service_leader = 2;
inline void CoordinationServiceConfig::clear_service_leader() {
  service_leader_.ClearToEmpty();
}
inline const std::string& CoordinationServiceConfig::service_leader() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.service_leader)
  return _internal_service_leader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoordinationServiceConfig::set_service_leader(ArgT0&& arg0, ArgT... args) {
 
 service_leader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.service_leader)
}
inline std::string* CoordinationServiceConfig::mutable_service_leader() {
  std::string* _s = _internal_mutable_service_leader();
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.service_leader)
  return _s;
}
inline const std::string& CoordinationServiceConfig::_internal_service_leader() const {
  return service_leader_.Get();
}
inline void CoordinationServiceConfig::_internal_set_service_leader(const std::string& value) {
  
  service_leader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CoordinationServiceConfig::_internal_mutable_service_leader() {
  
  return service_leader_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CoordinationServiceConfig::release_service_leader() {
  // @@protoc_insertion_point(field_release:tensorflow.CoordinationServiceConfig.service_leader)
  return service_leader_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CoordinationServiceConfig::set_allocated_service_leader(std::string* service_leader) {
  if (service_leader != nullptr) {
    
  } else {
    
  }
  service_leader_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_leader,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (service_leader_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    service_leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CoordinationServiceConfig.service_leader)
}

// bool enable_health_check = 3;
inline void CoordinationServiceConfig::clear_enable_health_check() {
  enable_health_check_ = false;
}
inline bool CoordinationServiceConfig::_internal_enable_health_check() const {
  return enable_health_check_;
}
inline bool CoordinationServiceConfig::enable_health_check() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.enable_health_check)
  return _internal_enable_health_check();
}
inline void CoordinationServiceConfig::_internal_set_enable_health_check(bool value) {
  
  enable_health_check_ = value;
}
inline void CoordinationServiceConfig::set_enable_health_check(bool value) {
  _internal_set_enable_health_check(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.enable_health_check)
}

// int64 cluster_register_timeout_in_ms = 4;
inline void CoordinationServiceConfig::clear_cluster_register_timeout_in_ms() {
  cluster_register_timeout_in_ms_ = int64_t{0};
}
inline int64_t CoordinationServiceConfig::_internal_cluster_register_timeout_in_ms() const {
  return cluster_register_timeout_in_ms_;
}
inline int64_t CoordinationServiceConfig::cluster_register_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.cluster_register_timeout_in_ms)
  return _internal_cluster_register_timeout_in_ms();
}
inline void CoordinationServiceConfig::_internal_set_cluster_register_timeout_in_ms(int64_t value) {
  
  cluster_register_timeout_in_ms_ = value;
}
inline void CoordinationServiceConfig::set_cluster_register_timeout_in_ms(int64_t value) {
  _internal_set_cluster_register_timeout_in_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.cluster_register_timeout_in_ms)
}

// int64 heartbeat_timeout_in_ms = 5;
inline void CoordinationServiceConfig::clear_heartbeat_timeout_in_ms() {
  heartbeat_timeout_in_ms_ = int64_t{0};
}
inline int64_t CoordinationServiceConfig::_internal_heartbeat_timeout_in_ms() const {
  return heartbeat_timeout_in_ms_;
}
inline int64_t CoordinationServiceConfig::heartbeat_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.heartbeat_timeout_in_ms)
  return _internal_heartbeat_timeout_in_ms();
}
inline void CoordinationServiceConfig::_internal_set_heartbeat_timeout_in_ms(int64_t value) {
  
  heartbeat_timeout_in_ms_ = value;
}
inline void CoordinationServiceConfig::set_heartbeat_timeout_in_ms(int64_t value) {
  _internal_set_heartbeat_timeout_in_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.heartbeat_timeout_in_ms)
}

// repeated string coordinated_jobs = 6;
inline int CoordinationServiceConfig::_internal_coordinated_jobs_size() const {
  return coordinated_jobs_.size();
}
inline int CoordinationServiceConfig::coordinated_jobs_size() const {
  return _internal_coordinated_jobs_size();
}
inline void CoordinationServiceConfig::clear_coordinated_jobs() {
  coordinated_jobs_.Clear();
}
inline std::string* CoordinationServiceConfig::add_coordinated_jobs() {
  std::string* _s = _internal_add_coordinated_jobs();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CoordinationServiceConfig.coordinated_jobs)
  return _s;
}
inline const std::string& CoordinationServiceConfig::_internal_coordinated_jobs(int index) const {
  return coordinated_jobs_.Get(index);
}
inline const std::string& CoordinationServiceConfig::coordinated_jobs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.coordinated_jobs)
  return _internal_coordinated_jobs(index);
}
inline std::string* CoordinationServiceConfig::mutable_coordinated_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.coordinated_jobs)
  return coordinated_jobs_.Mutable(index);
}
inline void CoordinationServiceConfig::set_coordinated_jobs(int index, const std::string& value) {
  coordinated_jobs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.coordinated_jobs)
}
inline void CoordinationServiceConfig::set_coordinated_jobs(int index, std::string&& value) {
  coordinated_jobs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.coordinated_jobs)
}
inline void CoordinationServiceConfig::set_coordinated_jobs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  coordinated_jobs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CoordinationServiceConfig.coordinated_jobs)
}
inline void CoordinationServiceConfig::set_coordinated_jobs(int index, const char* value, size_t size) {
  coordinated_jobs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CoordinationServiceConfig.coordinated_jobs)
}
inline std::string* CoordinationServiceConfig::_internal_add_coordinated_jobs() {
  return coordinated_jobs_.Add();
}
inline void CoordinationServiceConfig::add_coordinated_jobs(const std::string& value) {
  coordinated_jobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CoordinationServiceConfig.coordinated_jobs)
}
inline void CoordinationServiceConfig::add_coordinated_jobs(std::string&& value) {
  coordinated_jobs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.CoordinationServiceConfig.coordinated_jobs)
}
inline void CoordinationServiceConfig::add_coordinated_jobs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  coordinated_jobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CoordinationServiceConfig.coordinated_jobs)
}
inline void CoordinationServiceConfig::add_coordinated_jobs(const char* value, size_t size) {
  coordinated_jobs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CoordinationServiceConfig.coordinated_jobs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CoordinationServiceConfig::coordinated_jobs() const {
  // @@protoc_insertion_point(field_list:tensorflow.CoordinationServiceConfig.coordinated_jobs)
  return coordinated_jobs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CoordinationServiceConfig::mutable_coordinated_jobs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CoordinationServiceConfig.coordinated_jobs)
  return &coordinated_jobs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcoordination_5fconfig_2eproto
