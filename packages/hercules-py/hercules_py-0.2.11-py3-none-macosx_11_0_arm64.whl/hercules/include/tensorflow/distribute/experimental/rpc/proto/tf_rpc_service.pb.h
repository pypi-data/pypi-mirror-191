// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/distribute/experimental/rpc/proto/tf_rpc_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/protobuf/struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto;
namespace tensorflow {
namespace rpc {
class CallRequest;
struct CallRequestDefaultTypeInternal;
extern CallRequestDefaultTypeInternal _CallRequest_default_instance_;
class CallResponse;
struct CallResponseDefaultTypeInternal;
extern CallResponseDefaultTypeInternal _CallResponse_default_instance_;
class ListRequest;
struct ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class ListResponse;
struct ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class RegisteredMethod;
struct RegisteredMethodDefaultTypeInternal;
extern RegisteredMethodDefaultTypeInternal _RegisteredMethod_default_instance_;
}  // namespace rpc
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::rpc::CallRequest* Arena::CreateMaybeMessage<::tensorflow::rpc::CallRequest>(Arena*);
template<> ::tensorflow::rpc::CallResponse* Arena::CreateMaybeMessage<::tensorflow::rpc::CallResponse>(Arena*);
template<> ::tensorflow::rpc::ListRequest* Arena::CreateMaybeMessage<::tensorflow::rpc::ListRequest>(Arena*);
template<> ::tensorflow::rpc::ListResponse* Arena::CreateMaybeMessage<::tensorflow::rpc::ListResponse>(Arena*);
template<> ::tensorflow::rpc::RegisteredMethod* Arena::CreateMaybeMessage<::tensorflow::rpc::RegisteredMethod>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace rpc {

// ===================================================================

class CallRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.rpc.CallRequest) */ {
 public:
  inline CallRequest() : CallRequest(nullptr) {}
  ~CallRequest() override;
  explicit constexpr CallRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallRequest(const CallRequest& from);
  CallRequest(CallRequest&& from) noexcept
    : CallRequest() {
    *this = ::std::move(from);
  }

  inline CallRequest& operator=(const CallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallRequest& operator=(CallRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallRequest* internal_default_instance() {
    return reinterpret_cast<const CallRequest*>(
               &_CallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CallRequest& a, CallRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CallRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CallRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.rpc.CallRequest";
  }
  protected:
  explicit CallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputTensorsFieldNumber = 2,
    kMethodFieldNumber = 1,
  };
  // repeated .tensorflow.TensorProto input_tensors = 2;
  int input_tensors_size() const;
  private:
  int _internal_input_tensors_size() const;
  public:
  void clear_input_tensors();
  ::tensorflow::TensorProto* mutable_input_tensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >*
      mutable_input_tensors();
  private:
  const ::tensorflow::TensorProto& _internal_input_tensors(int index) const;
  ::tensorflow::TensorProto* _internal_add_input_tensors();
  public:
  const ::tensorflow::TensorProto& input_tensors(int index) const;
  ::tensorflow::TensorProto* add_input_tensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >&
      input_tensors() const;

  // string method = 1;
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.rpc.CallRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto > input_tensors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CallResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.rpc.CallResponse) */ {
 public:
  inline CallResponse() : CallResponse(nullptr) {}
  ~CallResponse() override;
  explicit constexpr CallResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallResponse(const CallResponse& from);
  CallResponse(CallResponse&& from) noexcept
    : CallResponse() {
    *this = ::std::move(from);
  }

  inline CallResponse& operator=(const CallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallResponse& operator=(CallResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallResponse* internal_default_instance() {
    return reinterpret_cast<const CallResponse*>(
               &_CallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CallResponse& a, CallResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CallResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CallResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.rpc.CallResponse";
  }
  protected:
  explicit CallResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputTensorsFieldNumber = 1,
  };
  // repeated .tensorflow.TensorProto output_tensors = 1;
  int output_tensors_size() const;
  private:
  int _internal_output_tensors_size() const;
  public:
  void clear_output_tensors();
  ::tensorflow::TensorProto* mutable_output_tensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >*
      mutable_output_tensors();
  private:
  const ::tensorflow::TensorProto& _internal_output_tensors(int index) const;
  ::tensorflow::TensorProto* _internal_add_output_tensors();
  public:
  const ::tensorflow::TensorProto& output_tensors(int index) const;
  ::tensorflow::TensorProto* add_output_tensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >&
      output_tensors() const;

  // @@protoc_insertion_point(class_scope:tensorflow.rpc.CallResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto > output_tensors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tensorflow.rpc.ListRequest) */ {
 public:
  inline ListRequest() : ListRequest(nullptr) {}
  explicit constexpr ListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRequest(const ListRequest& from);
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.rpc.ListRequest";
  }
  protected:
  explicit ListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.rpc.ListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RegisteredMethod final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.rpc.RegisteredMethod) */ {
 public:
  inline RegisteredMethod() : RegisteredMethod(nullptr) {}
  ~RegisteredMethod() override;
  explicit constexpr RegisteredMethod(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisteredMethod(const RegisteredMethod& from);
  RegisteredMethod(RegisteredMethod&& from) noexcept
    : RegisteredMethod() {
    *this = ::std::move(from);
  }

  inline RegisteredMethod& operator=(const RegisteredMethod& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredMethod& operator=(RegisteredMethod&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisteredMethod& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisteredMethod* internal_default_instance() {
    return reinterpret_cast<const RegisteredMethod*>(
               &_RegisteredMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisteredMethod& a, RegisteredMethod& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredMethod* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisteredMethod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisteredMethod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisteredMethod>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisteredMethod& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisteredMethod& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredMethod* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.rpc.RegisteredMethod";
  }
  protected:
  explicit RegisteredMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
    kInputSpecsFieldNumber = 2,
    kOutputSpecsFieldNumber = 3,
  };
  // string method = 1;
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // .tensorflow.StructuredValue input_specs = 2;
  bool has_input_specs() const;
  private:
  bool _internal_has_input_specs() const;
  public:
  void clear_input_specs();
  const ::tensorflow::StructuredValue& input_specs() const;
  PROTOBUF_NODISCARD ::tensorflow::StructuredValue* release_input_specs();
  ::tensorflow::StructuredValue* mutable_input_specs();
  void set_allocated_input_specs(::tensorflow::StructuredValue* input_specs);
  private:
  const ::tensorflow::StructuredValue& _internal_input_specs() const;
  ::tensorflow::StructuredValue* _internal_mutable_input_specs();
  public:
  void unsafe_arena_set_allocated_input_specs(
      ::tensorflow::StructuredValue* input_specs);
  ::tensorflow::StructuredValue* unsafe_arena_release_input_specs();

  // .tensorflow.StructuredValue output_specs = 3;
  bool has_output_specs() const;
  private:
  bool _internal_has_output_specs() const;
  public:
  void clear_output_specs();
  const ::tensorflow::StructuredValue& output_specs() const;
  PROTOBUF_NODISCARD ::tensorflow::StructuredValue* release_output_specs();
  ::tensorflow::StructuredValue* mutable_output_specs();
  void set_allocated_output_specs(::tensorflow::StructuredValue* output_specs);
  private:
  const ::tensorflow::StructuredValue& _internal_output_specs() const;
  ::tensorflow::StructuredValue* _internal_mutable_output_specs();
  public:
  void unsafe_arena_set_allocated_output_specs(
      ::tensorflow::StructuredValue* output_specs);
  ::tensorflow::StructuredValue* unsafe_arena_release_output_specs();

  // @@protoc_insertion_point(class_scope:tensorflow.rpc.RegisteredMethod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::tensorflow::StructuredValue* input_specs_;
  ::tensorflow::StructuredValue* output_specs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.rpc.ListResponse) */ {
 public:
  inline ListResponse() : ListResponse(nullptr) {}
  ~ListResponse() override;
  explicit constexpr ListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListResponse(const ListResponse& from);
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.rpc.ListResponse";
  }
  protected:
  explicit ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegisteredMethodsFieldNumber = 1,
  };
  // repeated .tensorflow.rpc.RegisteredMethod registered_methods = 1;
  int registered_methods_size() const;
  private:
  int _internal_registered_methods_size() const;
  public:
  void clear_registered_methods();
  ::tensorflow::rpc::RegisteredMethod* mutable_registered_methods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::rpc::RegisteredMethod >*
      mutable_registered_methods();
  private:
  const ::tensorflow::rpc::RegisteredMethod& _internal_registered_methods(int index) const;
  ::tensorflow::rpc::RegisteredMethod* _internal_add_registered_methods();
  public:
  const ::tensorflow::rpc::RegisteredMethod& registered_methods(int index) const;
  ::tensorflow::rpc::RegisteredMethod* add_registered_methods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::rpc::RegisteredMethod >&
      registered_methods() const;

  // @@protoc_insertion_point(class_scope:tensorflow.rpc.ListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::rpc::RegisteredMethod > registered_methods_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CallRequest

// string method = 1;
inline void CallRequest::clear_method() {
  method_.ClearToEmpty();
}
inline const std::string& CallRequest::method() const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.CallRequest.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallRequest::set_method(ArgT0&& arg0, ArgT... args) {
 
 method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.rpc.CallRequest.method)
}
inline std::string* CallRequest::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.CallRequest.method)
  return _s;
}
inline const std::string& CallRequest::_internal_method() const {
  return method_.Get();
}
inline void CallRequest::_internal_set_method(const std::string& value) {
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CallRequest::_internal_mutable_method() {
  
  return method_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CallRequest::release_method() {
  // @@protoc_insertion_point(field_release:tensorflow.rpc.CallRequest.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CallRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.rpc.CallRequest.method)
}

// repeated .tensorflow.TensorProto input_tensors = 2;
inline int CallRequest::_internal_input_tensors_size() const {
  return input_tensors_.size();
}
inline int CallRequest::input_tensors_size() const {
  return _internal_input_tensors_size();
}
inline ::tensorflow::TensorProto* CallRequest::mutable_input_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.CallRequest.input_tensors)
  return input_tensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >*
CallRequest::mutable_input_tensors() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.rpc.CallRequest.input_tensors)
  return &input_tensors_;
}
inline const ::tensorflow::TensorProto& CallRequest::_internal_input_tensors(int index) const {
  return input_tensors_.Get(index);
}
inline const ::tensorflow::TensorProto& CallRequest::input_tensors(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.CallRequest.input_tensors)
  return _internal_input_tensors(index);
}
inline ::tensorflow::TensorProto* CallRequest::_internal_add_input_tensors() {
  return input_tensors_.Add();
}
inline ::tensorflow::TensorProto* CallRequest::add_input_tensors() {
  ::tensorflow::TensorProto* _add = _internal_add_input_tensors();
  // @@protoc_insertion_point(field_add:tensorflow.rpc.CallRequest.input_tensors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >&
CallRequest::input_tensors() const {
  // @@protoc_insertion_point(field_list:tensorflow.rpc.CallRequest.input_tensors)
  return input_tensors_;
}

// -------------------------------------------------------------------

// CallResponse

// repeated .tensorflow.TensorProto output_tensors = 1;
inline int CallResponse::_internal_output_tensors_size() const {
  return output_tensors_.size();
}
inline int CallResponse::output_tensors_size() const {
  return _internal_output_tensors_size();
}
inline ::tensorflow::TensorProto* CallResponse::mutable_output_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.CallResponse.output_tensors)
  return output_tensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >*
CallResponse::mutable_output_tensors() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.rpc.CallResponse.output_tensors)
  return &output_tensors_;
}
inline const ::tensorflow::TensorProto& CallResponse::_internal_output_tensors(int index) const {
  return output_tensors_.Get(index);
}
inline const ::tensorflow::TensorProto& CallResponse::output_tensors(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.CallResponse.output_tensors)
  return _internal_output_tensors(index);
}
inline ::tensorflow::TensorProto* CallResponse::_internal_add_output_tensors() {
  return output_tensors_.Add();
}
inline ::tensorflow::TensorProto* CallResponse::add_output_tensors() {
  ::tensorflow::TensorProto* _add = _internal_add_output_tensors();
  // @@protoc_insertion_point(field_add:tensorflow.rpc.CallResponse.output_tensors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >&
CallResponse::output_tensors() const {
  // @@protoc_insertion_point(field_list:tensorflow.rpc.CallResponse.output_tensors)
  return output_tensors_;
}

// -------------------------------------------------------------------

// ListRequest

// -------------------------------------------------------------------

// RegisteredMethod

// string method = 1;
inline void RegisteredMethod::clear_method() {
  method_.ClearToEmpty();
}
inline const std::string& RegisteredMethod::method() const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.RegisteredMethod.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisteredMethod::set_method(ArgT0&& arg0, ArgT... args) {
 
 method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.rpc.RegisteredMethod.method)
}
inline std::string* RegisteredMethod::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.RegisteredMethod.method)
  return _s;
}
inline const std::string& RegisteredMethod::_internal_method() const {
  return method_.Get();
}
inline void RegisteredMethod::_internal_set_method(const std::string& value) {
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisteredMethod::_internal_mutable_method() {
  
  return method_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisteredMethod::release_method() {
  // @@protoc_insertion_point(field_release:tensorflow.rpc.RegisteredMethod.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisteredMethod::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.rpc.RegisteredMethod.method)
}

// .tensorflow.StructuredValue input_specs = 2;
inline bool RegisteredMethod::_internal_has_input_specs() const {
  return this != internal_default_instance() && input_specs_ != nullptr;
}
inline bool RegisteredMethod::has_input_specs() const {
  return _internal_has_input_specs();
}
inline const ::tensorflow::StructuredValue& RegisteredMethod::_internal_input_specs() const {
  const ::tensorflow::StructuredValue* p = input_specs_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::StructuredValue&>(
      ::tensorflow::_StructuredValue_default_instance_);
}
inline const ::tensorflow::StructuredValue& RegisteredMethod::input_specs() const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.RegisteredMethod.input_specs)
  return _internal_input_specs();
}
inline void RegisteredMethod::unsafe_arena_set_allocated_input_specs(
    ::tensorflow::StructuredValue* input_specs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_specs_);
  }
  input_specs_ = input_specs;
  if (input_specs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.rpc.RegisteredMethod.input_specs)
}
inline ::tensorflow::StructuredValue* RegisteredMethod::release_input_specs() {
  
  ::tensorflow::StructuredValue* temp = input_specs_;
  input_specs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::StructuredValue* RegisteredMethod::unsafe_arena_release_input_specs() {
  // @@protoc_insertion_point(field_release:tensorflow.rpc.RegisteredMethod.input_specs)
  
  ::tensorflow::StructuredValue* temp = input_specs_;
  input_specs_ = nullptr;
  return temp;
}
inline ::tensorflow::StructuredValue* RegisteredMethod::_internal_mutable_input_specs() {
  
  if (input_specs_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::StructuredValue>(GetArenaForAllocation());
    input_specs_ = p;
  }
  return input_specs_;
}
inline ::tensorflow::StructuredValue* RegisteredMethod::mutable_input_specs() {
  ::tensorflow::StructuredValue* _msg = _internal_mutable_input_specs();
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.RegisteredMethod.input_specs)
  return _msg;
}
inline void RegisteredMethod::set_allocated_input_specs(::tensorflow::StructuredValue* input_specs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_specs_);
  }
  if (input_specs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_specs));
    if (message_arena != submessage_arena) {
      input_specs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_specs, submessage_arena);
    }
    
  } else {
    
  }
  input_specs_ = input_specs;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.rpc.RegisteredMethod.input_specs)
}

// .tensorflow.StructuredValue output_specs = 3;
inline bool RegisteredMethod::_internal_has_output_specs() const {
  return this != internal_default_instance() && output_specs_ != nullptr;
}
inline bool RegisteredMethod::has_output_specs() const {
  return _internal_has_output_specs();
}
inline const ::tensorflow::StructuredValue& RegisteredMethod::_internal_output_specs() const {
  const ::tensorflow::StructuredValue* p = output_specs_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::StructuredValue&>(
      ::tensorflow::_StructuredValue_default_instance_);
}
inline const ::tensorflow::StructuredValue& RegisteredMethod::output_specs() const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.RegisteredMethod.output_specs)
  return _internal_output_specs();
}
inline void RegisteredMethod::unsafe_arena_set_allocated_output_specs(
    ::tensorflow::StructuredValue* output_specs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_specs_);
  }
  output_specs_ = output_specs;
  if (output_specs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.rpc.RegisteredMethod.output_specs)
}
inline ::tensorflow::StructuredValue* RegisteredMethod::release_output_specs() {
  
  ::tensorflow::StructuredValue* temp = output_specs_;
  output_specs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::StructuredValue* RegisteredMethod::unsafe_arena_release_output_specs() {
  // @@protoc_insertion_point(field_release:tensorflow.rpc.RegisteredMethod.output_specs)
  
  ::tensorflow::StructuredValue* temp = output_specs_;
  output_specs_ = nullptr;
  return temp;
}
inline ::tensorflow::StructuredValue* RegisteredMethod::_internal_mutable_output_specs() {
  
  if (output_specs_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::StructuredValue>(GetArenaForAllocation());
    output_specs_ = p;
  }
  return output_specs_;
}
inline ::tensorflow::StructuredValue* RegisteredMethod::mutable_output_specs() {
  ::tensorflow::StructuredValue* _msg = _internal_mutable_output_specs();
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.RegisteredMethod.output_specs)
  return _msg;
}
inline void RegisteredMethod::set_allocated_output_specs(::tensorflow::StructuredValue* output_specs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_specs_);
  }
  if (output_specs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_specs));
    if (message_arena != submessage_arena) {
      output_specs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_specs, submessage_arena);
    }
    
  } else {
    
  }
  output_specs_ = output_specs;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.rpc.RegisteredMethod.output_specs)
}

// -------------------------------------------------------------------

// ListResponse

// repeated .tensorflow.rpc.RegisteredMethod registered_methods = 1;
inline int ListResponse::_internal_registered_methods_size() const {
  return registered_methods_.size();
}
inline int ListResponse::registered_methods_size() const {
  return _internal_registered_methods_size();
}
inline void ListResponse::clear_registered_methods() {
  registered_methods_.Clear();
}
inline ::tensorflow::rpc::RegisteredMethod* ListResponse::mutable_registered_methods(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.ListResponse.registered_methods)
  return registered_methods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::rpc::RegisteredMethod >*
ListResponse::mutable_registered_methods() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.rpc.ListResponse.registered_methods)
  return &registered_methods_;
}
inline const ::tensorflow::rpc::RegisteredMethod& ListResponse::_internal_registered_methods(int index) const {
  return registered_methods_.Get(index);
}
inline const ::tensorflow::rpc::RegisteredMethod& ListResponse::registered_methods(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.ListResponse.registered_methods)
  return _internal_registered_methods(index);
}
inline ::tensorflow::rpc::RegisteredMethod* ListResponse::_internal_add_registered_methods() {
  return registered_methods_.Add();
}
inline ::tensorflow::rpc::RegisteredMethod* ListResponse::add_registered_methods() {
  ::tensorflow::rpc::RegisteredMethod* _add = _internal_add_registered_methods();
  // @@protoc_insertion_point(field_add:tensorflow.rpc.ListResponse.registered_methods)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::rpc::RegisteredMethod >&
ListResponse::registered_methods() const {
  // @@protoc_insertion_point(field_list:tensorflow.rpc.ListResponse.registered_methods)
  return registered_methods_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto
