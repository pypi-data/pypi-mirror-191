// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/toco/logging/toco_conversion_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto;
namespace toco {
class TocoConversionLog;
struct TocoConversionLogDefaultTypeInternal;
extern TocoConversionLogDefaultTypeInternal _TocoConversionLog_default_instance_;
class TocoConversionLog_BuiltInOpsEntry_DoNotUse;
struct TocoConversionLog_BuiltInOpsEntry_DoNotUseDefaultTypeInternal;
extern TocoConversionLog_BuiltInOpsEntry_DoNotUseDefaultTypeInternal _TocoConversionLog_BuiltInOpsEntry_DoNotUse_default_instance_;
class TocoConversionLog_CustomOpsEntry_DoNotUse;
struct TocoConversionLog_CustomOpsEntry_DoNotUseDefaultTypeInternal;
extern TocoConversionLog_CustomOpsEntry_DoNotUseDefaultTypeInternal _TocoConversionLog_CustomOpsEntry_DoNotUse_default_instance_;
class TocoConversionLog_SelectOpsEntry_DoNotUse;
struct TocoConversionLog_SelectOpsEntry_DoNotUseDefaultTypeInternal;
extern TocoConversionLog_SelectOpsEntry_DoNotUseDefaultTypeInternal _TocoConversionLog_SelectOpsEntry_DoNotUse_default_instance_;
}  // namespace toco
PROTOBUF_NAMESPACE_OPEN
template<> ::toco::TocoConversionLog* Arena::CreateMaybeMessage<::toco::TocoConversionLog>(Arena*);
template<> ::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse* Arena::CreateMaybeMessage<::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse>(Arena*);
template<> ::toco::TocoConversionLog_CustomOpsEntry_DoNotUse* Arena::CreateMaybeMessage<::toco::TocoConversionLog_CustomOpsEntry_DoNotUse>(Arena*);
template<> ::toco::TocoConversionLog_SelectOpsEntry_DoNotUse* Arena::CreateMaybeMessage<::toco::TocoConversionLog_SelectOpsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace toco {

// ===================================================================

class TocoConversionLog_BuiltInOpsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TocoConversionLog_BuiltInOpsEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TocoConversionLog_BuiltInOpsEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  TocoConversionLog_BuiltInOpsEntry_DoNotUse();
  explicit constexpr TocoConversionLog_BuiltInOpsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TocoConversionLog_BuiltInOpsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TocoConversionLog_BuiltInOpsEntry_DoNotUse& other);
  static const TocoConversionLog_BuiltInOpsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TocoConversionLog_BuiltInOpsEntry_DoNotUse*>(&_TocoConversionLog_BuiltInOpsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "toco.TocoConversionLog.BuiltInOpsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class TocoConversionLog_CustomOpsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TocoConversionLog_CustomOpsEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TocoConversionLog_CustomOpsEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  TocoConversionLog_CustomOpsEntry_DoNotUse();
  explicit constexpr TocoConversionLog_CustomOpsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TocoConversionLog_CustomOpsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TocoConversionLog_CustomOpsEntry_DoNotUse& other);
  static const TocoConversionLog_CustomOpsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TocoConversionLog_CustomOpsEntry_DoNotUse*>(&_TocoConversionLog_CustomOpsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "toco.TocoConversionLog.CustomOpsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class TocoConversionLog_SelectOpsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TocoConversionLog_SelectOpsEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TocoConversionLog_SelectOpsEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  TocoConversionLog_SelectOpsEntry_DoNotUse();
  explicit constexpr TocoConversionLog_SelectOpsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TocoConversionLog_SelectOpsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TocoConversionLog_SelectOpsEntry_DoNotUse& other);
  static const TocoConversionLog_SelectOpsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TocoConversionLog_SelectOpsEntry_DoNotUse*>(&_TocoConversionLog_SelectOpsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "toco.TocoConversionLog.SelectOpsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class TocoConversionLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toco.TocoConversionLog) */ {
 public:
  inline TocoConversionLog() : TocoConversionLog(nullptr) {}
  ~TocoConversionLog() override;
  explicit constexpr TocoConversionLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TocoConversionLog(const TocoConversionLog& from);
  TocoConversionLog(TocoConversionLog&& from) noexcept
    : TocoConversionLog() {
    *this = ::std::move(from);
  }

  inline TocoConversionLog& operator=(const TocoConversionLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TocoConversionLog& operator=(TocoConversionLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TocoConversionLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const TocoConversionLog* internal_default_instance() {
    return reinterpret_cast<const TocoConversionLog*>(
               &_TocoConversionLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TocoConversionLog& a, TocoConversionLog& b) {
    a.Swap(&b);
  }
  inline void Swap(TocoConversionLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TocoConversionLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TocoConversionLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TocoConversionLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TocoConversionLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TocoConversionLog& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TocoConversionLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toco.TocoConversionLog";
  }
  protected:
  explicit TocoConversionLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOpListFieldNumber = 1,
    kBuiltInOpsFieldNumber = 2,
    kCustomOpsFieldNumber = 3,
    kSelectOpsFieldNumber = 4,
    kOpSignaturesFieldNumber = 5,
    kInputTensorTypesFieldNumber = 6,
    kOutputTensorTypesFieldNumber = 7,
    kTfLiteVersionFieldNumber = 10,
    kOsVersionFieldNumber = 11,
    kModelHashFieldNumber = 12,
    kTocoErrLogsFieldNumber = 13,
    kLogGenerationTsFieldNumber = 8,
    kModelSizeFieldNumber = 9,
  };
  // repeated string op_list = 1;
  int op_list_size() const;
  private:
  int _internal_op_list_size() const;
  public:
  void clear_op_list();
  const std::string& op_list(int index) const;
  std::string* mutable_op_list(int index);
  void set_op_list(int index, const std::string& value);
  void set_op_list(int index, std::string&& value);
  void set_op_list(int index, const char* value);
  void set_op_list(int index, const char* value, size_t size);
  std::string* add_op_list();
  void add_op_list(const std::string& value);
  void add_op_list(std::string&& value);
  void add_op_list(const char* value);
  void add_op_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& op_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_op_list();
  private:
  const std::string& _internal_op_list(int index) const;
  std::string* _internal_add_op_list();
  public:

  // map<string, int32> built_in_ops = 2;
  int built_in_ops_size() const;
  private:
  int _internal_built_in_ops_size() const;
  public:
  void clear_built_in_ops();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_built_in_ops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_built_in_ops();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      built_in_ops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_built_in_ops();

  // map<string, int32> custom_ops = 3;
  int custom_ops_size() const;
  private:
  int _internal_custom_ops_size() const;
  public:
  void clear_custom_ops();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_custom_ops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_custom_ops();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      custom_ops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_custom_ops();

  // map<string, int32> select_ops = 4;
  int select_ops_size() const;
  private:
  int _internal_select_ops_size() const;
  public:
  void clear_select_ops();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_select_ops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_select_ops();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      select_ops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_select_ops();

  // repeated string op_signatures = 5;
  int op_signatures_size() const;
  private:
  int _internal_op_signatures_size() const;
  public:
  void clear_op_signatures();
  const std::string& op_signatures(int index) const;
  std::string* mutable_op_signatures(int index);
  void set_op_signatures(int index, const std::string& value);
  void set_op_signatures(int index, std::string&& value);
  void set_op_signatures(int index, const char* value);
  void set_op_signatures(int index, const char* value, size_t size);
  std::string* add_op_signatures();
  void add_op_signatures(const std::string& value);
  void add_op_signatures(std::string&& value);
  void add_op_signatures(const char* value);
  void add_op_signatures(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& op_signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_op_signatures();
  private:
  const std::string& _internal_op_signatures(int index) const;
  std::string* _internal_add_op_signatures();
  public:

  // repeated string input_tensor_types = 6;
  int input_tensor_types_size() const;
  private:
  int _internal_input_tensor_types_size() const;
  public:
  void clear_input_tensor_types();
  const std::string& input_tensor_types(int index) const;
  std::string* mutable_input_tensor_types(int index);
  void set_input_tensor_types(int index, const std::string& value);
  void set_input_tensor_types(int index, std::string&& value);
  void set_input_tensor_types(int index, const char* value);
  void set_input_tensor_types(int index, const char* value, size_t size);
  std::string* add_input_tensor_types();
  void add_input_tensor_types(const std::string& value);
  void add_input_tensor_types(std::string&& value);
  void add_input_tensor_types(const char* value);
  void add_input_tensor_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_tensor_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_tensor_types();
  private:
  const std::string& _internal_input_tensor_types(int index) const;
  std::string* _internal_add_input_tensor_types();
  public:

  // repeated string output_tensor_types = 7;
  int output_tensor_types_size() const;
  private:
  int _internal_output_tensor_types_size() const;
  public:
  void clear_output_tensor_types();
  const std::string& output_tensor_types(int index) const;
  std::string* mutable_output_tensor_types(int index);
  void set_output_tensor_types(int index, const std::string& value);
  void set_output_tensor_types(int index, std::string&& value);
  void set_output_tensor_types(int index, const char* value);
  void set_output_tensor_types(int index, const char* value, size_t size);
  std::string* add_output_tensor_types();
  void add_output_tensor_types(const std::string& value);
  void add_output_tensor_types(std::string&& value);
  void add_output_tensor_types(const char* value);
  void add_output_tensor_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_tensor_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_tensor_types();
  private:
  const std::string& _internal_output_tensor_types(int index) const;
  std::string* _internal_add_output_tensor_types();
  public:

  // optional string tf_lite_version = 10;
  bool has_tf_lite_version() const;
  private:
  bool _internal_has_tf_lite_version() const;
  public:
  void clear_tf_lite_version();
  const std::string& tf_lite_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tf_lite_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tf_lite_version();
  PROTOBUF_NODISCARD std::string* release_tf_lite_version();
  void set_allocated_tf_lite_version(std::string* tf_lite_version);
  private:
  const std::string& _internal_tf_lite_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tf_lite_version(const std::string& value);
  std::string* _internal_mutable_tf_lite_version();
  public:

  // optional string os_version = 11;
  bool has_os_version() const;
  private:
  bool _internal_has_os_version() const;
  public:
  void clear_os_version();
  const std::string& os_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_version();
  PROTOBUF_NODISCARD std::string* release_os_version();
  void set_allocated_os_version(std::string* os_version);
  private:
  const std::string& _internal_os_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_version(const std::string& value);
  std::string* _internal_mutable_os_version();
  public:

  // optional string model_hash = 12;
  bool has_model_hash() const;
  private:
  bool _internal_has_model_hash() const;
  public:
  void clear_model_hash();
  const std::string& model_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_hash();
  PROTOBUF_NODISCARD std::string* release_model_hash();
  void set_allocated_model_hash(std::string* model_hash);
  private:
  const std::string& _internal_model_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_hash(const std::string& value);
  std::string* _internal_mutable_model_hash();
  public:

  // optional string toco_err_logs = 13;
  bool has_toco_err_logs() const;
  private:
  bool _internal_has_toco_err_logs() const;
  public:
  void clear_toco_err_logs();
  const std::string& toco_err_logs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_toco_err_logs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_toco_err_logs();
  PROTOBUF_NODISCARD std::string* release_toco_err_logs();
  void set_allocated_toco_err_logs(std::string* toco_err_logs);
  private:
  const std::string& _internal_toco_err_logs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_toco_err_logs(const std::string& value);
  std::string* _internal_mutable_toco_err_logs();
  public:

  // optional int64 log_generation_ts = 8;
  bool has_log_generation_ts() const;
  private:
  bool _internal_has_log_generation_ts() const;
  public:
  void clear_log_generation_ts();
  int64_t log_generation_ts() const;
  void set_log_generation_ts(int64_t value);
  private:
  int64_t _internal_log_generation_ts() const;
  void _internal_set_log_generation_ts(int64_t value);
  public:

  // optional int32 model_size = 9;
  bool has_model_size() const;
  private:
  bool _internal_has_model_size() const;
  public:
  void clear_model_size();
  int32_t model_size() const;
  void set_model_size(int32_t value);
  private:
  int32_t _internal_model_size() const;
  void _internal_set_model_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:toco.TocoConversionLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> op_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TocoConversionLog_BuiltInOpsEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> built_in_ops_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TocoConversionLog_CustomOpsEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> custom_ops_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TocoConversionLog_SelectOpsEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> select_ops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> op_signatures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_tensor_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_tensor_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tf_lite_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toco_err_logs_;
  int64_t log_generation_ts_;
  int32_t model_size_;
  friend struct ::TableStruct_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TocoConversionLog

// repeated string op_list = 1;
inline int TocoConversionLog::_internal_op_list_size() const {
  return op_list_.size();
}
inline int TocoConversionLog::op_list_size() const {
  return _internal_op_list_size();
}
inline void TocoConversionLog::clear_op_list() {
  op_list_.Clear();
}
inline std::string* TocoConversionLog::add_op_list() {
  std::string* _s = _internal_add_op_list();
  // @@protoc_insertion_point(field_add_mutable:toco.TocoConversionLog.op_list)
  return _s;
}
inline const std::string& TocoConversionLog::_internal_op_list(int index) const {
  return op_list_.Get(index);
}
inline const std::string& TocoConversionLog::op_list(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.op_list)
  return _internal_op_list(index);
}
inline std::string* TocoConversionLog::mutable_op_list(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.op_list)
  return op_list_.Mutable(index);
}
inline void TocoConversionLog::set_op_list(int index, const std::string& value) {
  op_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.op_list)
}
inline void TocoConversionLog::set_op_list(int index, std::string&& value) {
  op_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.op_list)
}
inline void TocoConversionLog::set_op_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  op_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.op_list)
}
inline void TocoConversionLog::set_op_list(int index, const char* value, size_t size) {
  op_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.op_list)
}
inline std::string* TocoConversionLog::_internal_add_op_list() {
  return op_list_.Add();
}
inline void TocoConversionLog::add_op_list(const std::string& value) {
  op_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.op_list)
}
inline void TocoConversionLog::add_op_list(std::string&& value) {
  op_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.op_list)
}
inline void TocoConversionLog::add_op_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  op_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoConversionLog.op_list)
}
inline void TocoConversionLog::add_op_list(const char* value, size_t size) {
  op_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoConversionLog.op_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TocoConversionLog::op_list() const {
  // @@protoc_insertion_point(field_list:toco.TocoConversionLog.op_list)
  return op_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TocoConversionLog::mutable_op_list() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoConversionLog.op_list)
  return &op_list_;
}

// map<string, int32> built_in_ops = 2;
inline int TocoConversionLog::_internal_built_in_ops_size() const {
  return built_in_ops_.size();
}
inline int TocoConversionLog::built_in_ops_size() const {
  return _internal_built_in_ops_size();
}
inline void TocoConversionLog::clear_built_in_ops() {
  built_in_ops_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
TocoConversionLog::_internal_built_in_ops() const {
  return built_in_ops_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
TocoConversionLog::built_in_ops() const {
  // @@protoc_insertion_point(field_map:toco.TocoConversionLog.built_in_ops)
  return _internal_built_in_ops();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
TocoConversionLog::_internal_mutable_built_in_ops() {
  return built_in_ops_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
TocoConversionLog::mutable_built_in_ops() {
  // @@protoc_insertion_point(field_mutable_map:toco.TocoConversionLog.built_in_ops)
  return _internal_mutable_built_in_ops();
}

// map<string, int32> custom_ops = 3;
inline int TocoConversionLog::_internal_custom_ops_size() const {
  return custom_ops_.size();
}
inline int TocoConversionLog::custom_ops_size() const {
  return _internal_custom_ops_size();
}
inline void TocoConversionLog::clear_custom_ops() {
  custom_ops_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
TocoConversionLog::_internal_custom_ops() const {
  return custom_ops_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
TocoConversionLog::custom_ops() const {
  // @@protoc_insertion_point(field_map:toco.TocoConversionLog.custom_ops)
  return _internal_custom_ops();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
TocoConversionLog::_internal_mutable_custom_ops() {
  return custom_ops_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
TocoConversionLog::mutable_custom_ops() {
  // @@protoc_insertion_point(field_mutable_map:toco.TocoConversionLog.custom_ops)
  return _internal_mutable_custom_ops();
}

// map<string, int32> select_ops = 4;
inline int TocoConversionLog::_internal_select_ops_size() const {
  return select_ops_.size();
}
inline int TocoConversionLog::select_ops_size() const {
  return _internal_select_ops_size();
}
inline void TocoConversionLog::clear_select_ops() {
  select_ops_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
TocoConversionLog::_internal_select_ops() const {
  return select_ops_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
TocoConversionLog::select_ops() const {
  // @@protoc_insertion_point(field_map:toco.TocoConversionLog.select_ops)
  return _internal_select_ops();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
TocoConversionLog::_internal_mutable_select_ops() {
  return select_ops_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
TocoConversionLog::mutable_select_ops() {
  // @@protoc_insertion_point(field_mutable_map:toco.TocoConversionLog.select_ops)
  return _internal_mutable_select_ops();
}

// repeated string op_signatures = 5;
inline int TocoConversionLog::_internal_op_signatures_size() const {
  return op_signatures_.size();
}
inline int TocoConversionLog::op_signatures_size() const {
  return _internal_op_signatures_size();
}
inline void TocoConversionLog::clear_op_signatures() {
  op_signatures_.Clear();
}
inline std::string* TocoConversionLog::add_op_signatures() {
  std::string* _s = _internal_add_op_signatures();
  // @@protoc_insertion_point(field_add_mutable:toco.TocoConversionLog.op_signatures)
  return _s;
}
inline const std::string& TocoConversionLog::_internal_op_signatures(int index) const {
  return op_signatures_.Get(index);
}
inline const std::string& TocoConversionLog::op_signatures(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.op_signatures)
  return _internal_op_signatures(index);
}
inline std::string* TocoConversionLog::mutable_op_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.op_signatures)
  return op_signatures_.Mutable(index);
}
inline void TocoConversionLog::set_op_signatures(int index, const std::string& value) {
  op_signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.op_signatures)
}
inline void TocoConversionLog::set_op_signatures(int index, std::string&& value) {
  op_signatures_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.op_signatures)
}
inline void TocoConversionLog::set_op_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  op_signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.op_signatures)
}
inline void TocoConversionLog::set_op_signatures(int index, const char* value, size_t size) {
  op_signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.op_signatures)
}
inline std::string* TocoConversionLog::_internal_add_op_signatures() {
  return op_signatures_.Add();
}
inline void TocoConversionLog::add_op_signatures(const std::string& value) {
  op_signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.op_signatures)
}
inline void TocoConversionLog::add_op_signatures(std::string&& value) {
  op_signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.op_signatures)
}
inline void TocoConversionLog::add_op_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  op_signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoConversionLog.op_signatures)
}
inline void TocoConversionLog::add_op_signatures(const char* value, size_t size) {
  op_signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoConversionLog.op_signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TocoConversionLog::op_signatures() const {
  // @@protoc_insertion_point(field_list:toco.TocoConversionLog.op_signatures)
  return op_signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TocoConversionLog::mutable_op_signatures() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoConversionLog.op_signatures)
  return &op_signatures_;
}

// repeated string input_tensor_types = 6;
inline int TocoConversionLog::_internal_input_tensor_types_size() const {
  return input_tensor_types_.size();
}
inline int TocoConversionLog::input_tensor_types_size() const {
  return _internal_input_tensor_types_size();
}
inline void TocoConversionLog::clear_input_tensor_types() {
  input_tensor_types_.Clear();
}
inline std::string* TocoConversionLog::add_input_tensor_types() {
  std::string* _s = _internal_add_input_tensor_types();
  // @@protoc_insertion_point(field_add_mutable:toco.TocoConversionLog.input_tensor_types)
  return _s;
}
inline const std::string& TocoConversionLog::_internal_input_tensor_types(int index) const {
  return input_tensor_types_.Get(index);
}
inline const std::string& TocoConversionLog::input_tensor_types(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.input_tensor_types)
  return _internal_input_tensor_types(index);
}
inline std::string* TocoConversionLog::mutable_input_tensor_types(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.input_tensor_types)
  return input_tensor_types_.Mutable(index);
}
inline void TocoConversionLog::set_input_tensor_types(int index, const std::string& value) {
  input_tensor_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.input_tensor_types)
}
inline void TocoConversionLog::set_input_tensor_types(int index, std::string&& value) {
  input_tensor_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.input_tensor_types)
}
inline void TocoConversionLog::set_input_tensor_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_tensor_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.input_tensor_types)
}
inline void TocoConversionLog::set_input_tensor_types(int index, const char* value, size_t size) {
  input_tensor_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.input_tensor_types)
}
inline std::string* TocoConversionLog::_internal_add_input_tensor_types() {
  return input_tensor_types_.Add();
}
inline void TocoConversionLog::add_input_tensor_types(const std::string& value) {
  input_tensor_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.input_tensor_types)
}
inline void TocoConversionLog::add_input_tensor_types(std::string&& value) {
  input_tensor_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.input_tensor_types)
}
inline void TocoConversionLog::add_input_tensor_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_tensor_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoConversionLog.input_tensor_types)
}
inline void TocoConversionLog::add_input_tensor_types(const char* value, size_t size) {
  input_tensor_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoConversionLog.input_tensor_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TocoConversionLog::input_tensor_types() const {
  // @@protoc_insertion_point(field_list:toco.TocoConversionLog.input_tensor_types)
  return input_tensor_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TocoConversionLog::mutable_input_tensor_types() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoConversionLog.input_tensor_types)
  return &input_tensor_types_;
}

// repeated string output_tensor_types = 7;
inline int TocoConversionLog::_internal_output_tensor_types_size() const {
  return output_tensor_types_.size();
}
inline int TocoConversionLog::output_tensor_types_size() const {
  return _internal_output_tensor_types_size();
}
inline void TocoConversionLog::clear_output_tensor_types() {
  output_tensor_types_.Clear();
}
inline std::string* TocoConversionLog::add_output_tensor_types() {
  std::string* _s = _internal_add_output_tensor_types();
  // @@protoc_insertion_point(field_add_mutable:toco.TocoConversionLog.output_tensor_types)
  return _s;
}
inline const std::string& TocoConversionLog::_internal_output_tensor_types(int index) const {
  return output_tensor_types_.Get(index);
}
inline const std::string& TocoConversionLog::output_tensor_types(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.output_tensor_types)
  return _internal_output_tensor_types(index);
}
inline std::string* TocoConversionLog::mutable_output_tensor_types(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.output_tensor_types)
  return output_tensor_types_.Mutable(index);
}
inline void TocoConversionLog::set_output_tensor_types(int index, const std::string& value) {
  output_tensor_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.output_tensor_types)
}
inline void TocoConversionLog::set_output_tensor_types(int index, std::string&& value) {
  output_tensor_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.output_tensor_types)
}
inline void TocoConversionLog::set_output_tensor_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_tensor_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.output_tensor_types)
}
inline void TocoConversionLog::set_output_tensor_types(int index, const char* value, size_t size) {
  output_tensor_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.output_tensor_types)
}
inline std::string* TocoConversionLog::_internal_add_output_tensor_types() {
  return output_tensor_types_.Add();
}
inline void TocoConversionLog::add_output_tensor_types(const std::string& value) {
  output_tensor_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.output_tensor_types)
}
inline void TocoConversionLog::add_output_tensor_types(std::string&& value) {
  output_tensor_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.output_tensor_types)
}
inline void TocoConversionLog::add_output_tensor_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_tensor_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoConversionLog.output_tensor_types)
}
inline void TocoConversionLog::add_output_tensor_types(const char* value, size_t size) {
  output_tensor_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoConversionLog.output_tensor_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TocoConversionLog::output_tensor_types() const {
  // @@protoc_insertion_point(field_list:toco.TocoConversionLog.output_tensor_types)
  return output_tensor_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TocoConversionLog::mutable_output_tensor_types() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoConversionLog.output_tensor_types)
  return &output_tensor_types_;
}

// optional int64 log_generation_ts = 8;
inline bool TocoConversionLog::_internal_has_log_generation_ts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TocoConversionLog::has_log_generation_ts() const {
  return _internal_has_log_generation_ts();
}
inline void TocoConversionLog::clear_log_generation_ts() {
  log_generation_ts_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t TocoConversionLog::_internal_log_generation_ts() const {
  return log_generation_ts_;
}
inline int64_t TocoConversionLog::log_generation_ts() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.log_generation_ts)
  return _internal_log_generation_ts();
}
inline void TocoConversionLog::_internal_set_log_generation_ts(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  log_generation_ts_ = value;
}
inline void TocoConversionLog::set_log_generation_ts(int64_t value) {
  _internal_set_log_generation_ts(value);
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.log_generation_ts)
}

// optional int32 model_size = 9;
inline bool TocoConversionLog::_internal_has_model_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TocoConversionLog::has_model_size() const {
  return _internal_has_model_size();
}
inline void TocoConversionLog::clear_model_size() {
  model_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t TocoConversionLog::_internal_model_size() const {
  return model_size_;
}
inline int32_t TocoConversionLog::model_size() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.model_size)
  return _internal_model_size();
}
inline void TocoConversionLog::_internal_set_model_size(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  model_size_ = value;
}
inline void TocoConversionLog::set_model_size(int32_t value) {
  _internal_set_model_size(value);
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.model_size)
}

// optional string tf_lite_version = 10;
inline bool TocoConversionLog::_internal_has_tf_lite_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TocoConversionLog::has_tf_lite_version() const {
  return _internal_has_tf_lite_version();
}
inline void TocoConversionLog::clear_tf_lite_version() {
  tf_lite_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TocoConversionLog::tf_lite_version() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.tf_lite_version)
  return _internal_tf_lite_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TocoConversionLog::set_tf_lite_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tf_lite_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.tf_lite_version)
}
inline std::string* TocoConversionLog::mutable_tf_lite_version() {
  std::string* _s = _internal_mutable_tf_lite_version();
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.tf_lite_version)
  return _s;
}
inline const std::string& TocoConversionLog::_internal_tf_lite_version() const {
  return tf_lite_version_.Get();
}
inline void TocoConversionLog::_internal_set_tf_lite_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tf_lite_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TocoConversionLog::_internal_mutable_tf_lite_version() {
  _has_bits_[0] |= 0x00000001u;
  return tf_lite_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TocoConversionLog::release_tf_lite_version() {
  // @@protoc_insertion_point(field_release:toco.TocoConversionLog.tf_lite_version)
  if (!_internal_has_tf_lite_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tf_lite_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tf_lite_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tf_lite_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TocoConversionLog::set_allocated_tf_lite_version(std::string* tf_lite_version) {
  if (tf_lite_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tf_lite_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tf_lite_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tf_lite_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tf_lite_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toco.TocoConversionLog.tf_lite_version)
}

// optional string os_version = 11;
inline bool TocoConversionLog::_internal_has_os_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TocoConversionLog::has_os_version() const {
  return _internal_has_os_version();
}
inline void TocoConversionLog::clear_os_version() {
  os_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TocoConversionLog::os_version() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.os_version)
  return _internal_os_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TocoConversionLog::set_os_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.os_version)
}
inline std::string* TocoConversionLog::mutable_os_version() {
  std::string* _s = _internal_mutable_os_version();
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.os_version)
  return _s;
}
inline const std::string& TocoConversionLog::_internal_os_version() const {
  return os_version_.Get();
}
inline void TocoConversionLog::_internal_set_os_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TocoConversionLog::_internal_mutable_os_version() {
  _has_bits_[0] |= 0x00000002u;
  return os_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TocoConversionLog::release_os_version() {
  // @@protoc_insertion_point(field_release:toco.TocoConversionLog.os_version)
  if (!_internal_has_os_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = os_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    os_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TocoConversionLog::set_allocated_os_version(std::string* os_version) {
  if (os_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  os_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    os_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toco.TocoConversionLog.os_version)
}

// optional string model_hash = 12;
inline bool TocoConversionLog::_internal_has_model_hash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TocoConversionLog::has_model_hash() const {
  return _internal_has_model_hash();
}
inline void TocoConversionLog::clear_model_hash() {
  model_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TocoConversionLog::model_hash() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.model_hash)
  return _internal_model_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TocoConversionLog::set_model_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 model_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.model_hash)
}
inline std::string* TocoConversionLog::mutable_model_hash() {
  std::string* _s = _internal_mutable_model_hash();
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.model_hash)
  return _s;
}
inline const std::string& TocoConversionLog::_internal_model_hash() const {
  return model_hash_.Get();
}
inline void TocoConversionLog::_internal_set_model_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  model_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TocoConversionLog::_internal_mutable_model_hash() {
  _has_bits_[0] |= 0x00000004u;
  return model_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TocoConversionLog::release_model_hash() {
  // @@protoc_insertion_point(field_release:toco.TocoConversionLog.model_hash)
  if (!_internal_has_model_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = model_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TocoConversionLog::set_allocated_model_hash(std::string* model_hash) {
  if (model_hash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  model_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toco.TocoConversionLog.model_hash)
}

// optional string toco_err_logs = 13;
inline bool TocoConversionLog::_internal_has_toco_err_logs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TocoConversionLog::has_toco_err_logs() const {
  return _internal_has_toco_err_logs();
}
inline void TocoConversionLog::clear_toco_err_logs() {
  toco_err_logs_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TocoConversionLog::toco_err_logs() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.toco_err_logs)
  return _internal_toco_err_logs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TocoConversionLog::set_toco_err_logs(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 toco_err_logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.toco_err_logs)
}
inline std::string* TocoConversionLog::mutable_toco_err_logs() {
  std::string* _s = _internal_mutable_toco_err_logs();
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.toco_err_logs)
  return _s;
}
inline const std::string& TocoConversionLog::_internal_toco_err_logs() const {
  return toco_err_logs_.Get();
}
inline void TocoConversionLog::_internal_set_toco_err_logs(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  toco_err_logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TocoConversionLog::_internal_mutable_toco_err_logs() {
  _has_bits_[0] |= 0x00000008u;
  return toco_err_logs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TocoConversionLog::release_toco_err_logs() {
  // @@protoc_insertion_point(field_release:toco.TocoConversionLog.toco_err_logs)
  if (!_internal_has_toco_err_logs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = toco_err_logs_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (toco_err_logs_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    toco_err_logs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TocoConversionLog::set_allocated_toco_err_logs(std::string* toco_err_logs) {
  if (toco_err_logs != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  toco_err_logs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toco_err_logs,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (toco_err_logs_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    toco_err_logs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toco.TocoConversionLog.toco_err_logs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace toco

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto
