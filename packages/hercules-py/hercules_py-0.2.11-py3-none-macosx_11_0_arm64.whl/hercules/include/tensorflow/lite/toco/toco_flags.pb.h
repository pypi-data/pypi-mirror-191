// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/toco/toco_flags.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/lite/toco/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto;
namespace toco {
class TocoFlags;
struct TocoFlagsDefaultTypeInternal;
extern TocoFlagsDefaultTypeInternal _TocoFlags_default_instance_;
}  // namespace toco
PROTOBUF_NAMESPACE_OPEN
template<> ::toco::TocoFlags* Arena::CreateMaybeMessage<::toco::TocoFlags>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace toco {

enum FileFormat : int {
  FILE_FORMAT_UNKNOWN = 0,
  TENSORFLOW_GRAPHDEF = 1,
  TFLITE = 2,
  GRAPHVIZ_DOT = 3
};
bool FileFormat_IsValid(int value);
constexpr FileFormat FileFormat_MIN = FILE_FORMAT_UNKNOWN;
constexpr FileFormat FileFormat_MAX = GRAPHVIZ_DOT;
constexpr int FileFormat_ARRAYSIZE = FileFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileFormat_descriptor();
template<typename T>
inline const std::string& FileFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileFormat_descriptor(), enum_t_value);
}
inline bool FileFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileFormat>(
    FileFormat_descriptor(), name, value);
}
// ===================================================================

class TocoFlags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toco.TocoFlags) */ {
 public:
  inline TocoFlags() : TocoFlags(nullptr) {}
  ~TocoFlags() override;
  explicit constexpr TocoFlags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TocoFlags(const TocoFlags& from);
  TocoFlags(TocoFlags&& from) noexcept
    : TocoFlags() {
    *this = ::std::move(from);
  }

  inline TocoFlags& operator=(const TocoFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline TocoFlags& operator=(TocoFlags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TocoFlags& default_instance() {
    return *internal_default_instance();
  }
  static inline const TocoFlags* internal_default_instance() {
    return reinterpret_cast<const TocoFlags*>(
               &_TocoFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TocoFlags& a, TocoFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(TocoFlags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TocoFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TocoFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TocoFlags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TocoFlags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TocoFlags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TocoFlags* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toco.TocoFlags";
  }
  protected:
  explicit TocoFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomOpdefsFieldNumber = 32,
    kSelectUserTfOpsFieldNumber = 33,
    kSupportedBackendsFieldNumber = 41,
    kDumpGraphvizDirFieldNumber = 24,
    kConversionSummaryDirFieldNumber = 31,
    kTfQuantizationModeFieldNumber = 45,
    kInputFormatFieldNumber = 1,
    kOutputFormatFieldNumber = 2,
    kInferenceTypeFieldNumber = 4,
    kDefaultRangesMinFieldNumber = 5,
    kDefaultRangesMaxFieldNumber = 6,
    kDropFakeQuantFieldNumber = 7,
    kReorderAcrossFakeQuantFieldNumber = 8,
    kAllowCustomOpsFieldNumber = 10,
    kDropControlDependencyFieldNumber = 12,
    kInferenceInputTypeFieldNumber = 11,
    kDefaultInt16RangesMinFieldNumber = 15,
    kDefaultInt16RangesMaxFieldNumber = 16,
    kDebugDisableRecurrentCellFusionFieldNumber = 13,
    kPropagateFakeQuantNumBitsFieldNumber = 14,
    kAllowNudgingWeightsToUseFastGemmKernelFieldNumber = 17,
    kQuantizeWeightsFieldNumber = 20,
    kDumpGraphvizIncludeVideoFieldNumber = 25,
    kPostTrainingQuantizeFieldNumber = 26,
    kEnableSelectTfOpsFieldNumber = 27,
    kForceSelectTfOpsFieldNumber = 28,
    kQuantizeToFloat16FieldNumber = 29,
    kEnableTfliteResourceVariablesFieldNumber = 34,
    kAllowBfloat16FieldNumber = 38,
    kAllowAllSelectTfOpsFieldNumber = 39,
    kAccumulationTypeFieldNumber = 37,
    kUnfoldLargeSplatConstantFieldNumber = 40,
    kDefaultToSingleBatchInTensorListOpsFieldNumber = 42,
    kDisablePerChannelQuantizationFieldNumber = 43,
    kEnableMlirDynamicRangeQuantizerFieldNumber = 44,
    kDisableInferTensorRangeFieldNumber = 46,
    kUseFakeQuantNumBitsFieldNumber = 47,
    kSplitTfliteLstmInputsFieldNumber = 19,
    kAllowDynamicTensorsFieldNumber = 30,
    kUnfoldBatchmatmulFieldNumber = 35,
    kLowerTensorListOpsFieldNumber = 36,
    kDedupeArrayMinSizeBytesFieldNumber = 18,
  };
  // repeated string custom_opdefs = 32 [deprecated = true];
  PROTOBUF_DEPRECATED int custom_opdefs_size() const;
  private:
  int _internal_custom_opdefs_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_custom_opdefs();
  PROTOBUF_DEPRECATED const std::string& custom_opdefs(int index) const;
  PROTOBUF_DEPRECATED std::string* mutable_custom_opdefs(int index);
  PROTOBUF_DEPRECATED void set_custom_opdefs(int index, const std::string& value);
  PROTOBUF_DEPRECATED void set_custom_opdefs(int index, std::string&& value);
  PROTOBUF_DEPRECATED void set_custom_opdefs(int index, const char* value);
  PROTOBUF_DEPRECATED void set_custom_opdefs(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* add_custom_opdefs();
  PROTOBUF_DEPRECATED void add_custom_opdefs(const std::string& value);
  PROTOBUF_DEPRECATED void add_custom_opdefs(std::string&& value);
  PROTOBUF_DEPRECATED void add_custom_opdefs(const char* value);
  PROTOBUF_DEPRECATED void add_custom_opdefs(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& custom_opdefs() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_custom_opdefs();
  private:
  const std::string& _internal_custom_opdefs(int index) const;
  std::string* _internal_add_custom_opdefs();
  public:

  // repeated string select_user_tf_ops = 33;
  int select_user_tf_ops_size() const;
  private:
  int _internal_select_user_tf_ops_size() const;
  public:
  void clear_select_user_tf_ops();
  const std::string& select_user_tf_ops(int index) const;
  std::string* mutable_select_user_tf_ops(int index);
  void set_select_user_tf_ops(int index, const std::string& value);
  void set_select_user_tf_ops(int index, std::string&& value);
  void set_select_user_tf_ops(int index, const char* value);
  void set_select_user_tf_ops(int index, const char* value, size_t size);
  std::string* add_select_user_tf_ops();
  void add_select_user_tf_ops(const std::string& value);
  void add_select_user_tf_ops(std::string&& value);
  void add_select_user_tf_ops(const char* value);
  void add_select_user_tf_ops(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& select_user_tf_ops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_select_user_tf_ops();
  private:
  const std::string& _internal_select_user_tf_ops(int index) const;
  std::string* _internal_add_select_user_tf_ops();
  public:

  // repeated string supported_backends = 41;
  int supported_backends_size() const;
  private:
  int _internal_supported_backends_size() const;
  public:
  void clear_supported_backends();
  const std::string& supported_backends(int index) const;
  std::string* mutable_supported_backends(int index);
  void set_supported_backends(int index, const std::string& value);
  void set_supported_backends(int index, std::string&& value);
  void set_supported_backends(int index, const char* value);
  void set_supported_backends(int index, const char* value, size_t size);
  std::string* add_supported_backends();
  void add_supported_backends(const std::string& value);
  void add_supported_backends(std::string&& value);
  void add_supported_backends(const char* value);
  void add_supported_backends(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& supported_backends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_supported_backends();
  private:
  const std::string& _internal_supported_backends(int index) const;
  std::string* _internal_add_supported_backends();
  public:

  // optional string dump_graphviz_dir = 24;
  bool has_dump_graphviz_dir() const;
  private:
  bool _internal_has_dump_graphviz_dir() const;
  public:
  void clear_dump_graphviz_dir();
  const std::string& dump_graphviz_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dump_graphviz_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dump_graphviz_dir();
  PROTOBUF_NODISCARD std::string* release_dump_graphviz_dir();
  void set_allocated_dump_graphviz_dir(std::string* dump_graphviz_dir);
  private:
  const std::string& _internal_dump_graphviz_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dump_graphviz_dir(const std::string& value);
  std::string* _internal_mutable_dump_graphviz_dir();
  public:

  // optional string conversion_summary_dir = 31;
  bool has_conversion_summary_dir() const;
  private:
  bool _internal_has_conversion_summary_dir() const;
  public:
  void clear_conversion_summary_dir();
  const std::string& conversion_summary_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversion_summary_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversion_summary_dir();
  PROTOBUF_NODISCARD std::string* release_conversion_summary_dir();
  void set_allocated_conversion_summary_dir(std::string* conversion_summary_dir);
  private:
  const std::string& _internal_conversion_summary_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversion_summary_dir(const std::string& value);
  std::string* _internal_mutable_conversion_summary_dir();
  public:

  // optional string tf_quantization_mode = 45;
  bool has_tf_quantization_mode() const;
  private:
  bool _internal_has_tf_quantization_mode() const;
  public:
  void clear_tf_quantization_mode();
  const std::string& tf_quantization_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tf_quantization_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tf_quantization_mode();
  PROTOBUF_NODISCARD std::string* release_tf_quantization_mode();
  void set_allocated_tf_quantization_mode(std::string* tf_quantization_mode);
  private:
  const std::string& _internal_tf_quantization_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tf_quantization_mode(const std::string& value);
  std::string* _internal_mutable_tf_quantization_mode();
  public:

  // optional .toco.FileFormat input_format = 1;
  bool has_input_format() const;
  private:
  bool _internal_has_input_format() const;
  public:
  void clear_input_format();
  ::toco::FileFormat input_format() const;
  void set_input_format(::toco::FileFormat value);
  private:
  ::toco::FileFormat _internal_input_format() const;
  void _internal_set_input_format(::toco::FileFormat value);
  public:

  // optional .toco.FileFormat output_format = 2;
  bool has_output_format() const;
  private:
  bool _internal_has_output_format() const;
  public:
  void clear_output_format();
  ::toco::FileFormat output_format() const;
  void set_output_format(::toco::FileFormat value);
  private:
  ::toco::FileFormat _internal_output_format() const;
  void _internal_set_output_format(::toco::FileFormat value);
  public:

  // optional .toco.IODataType inference_type = 4;
  bool has_inference_type() const;
  private:
  bool _internal_has_inference_type() const;
  public:
  void clear_inference_type();
  ::toco::IODataType inference_type() const;
  void set_inference_type(::toco::IODataType value);
  private:
  ::toco::IODataType _internal_inference_type() const;
  void _internal_set_inference_type(::toco::IODataType value);
  public:

  // optional float default_ranges_min = 5;
  bool has_default_ranges_min() const;
  private:
  bool _internal_has_default_ranges_min() const;
  public:
  void clear_default_ranges_min();
  float default_ranges_min() const;
  void set_default_ranges_min(float value);
  private:
  float _internal_default_ranges_min() const;
  void _internal_set_default_ranges_min(float value);
  public:

  // optional float default_ranges_max = 6;
  bool has_default_ranges_max() const;
  private:
  bool _internal_has_default_ranges_max() const;
  public:
  void clear_default_ranges_max();
  float default_ranges_max() const;
  void set_default_ranges_max(float value);
  private:
  float _internal_default_ranges_max() const;
  void _internal_set_default_ranges_max(float value);
  public:

  // optional bool drop_fake_quant = 7;
  bool has_drop_fake_quant() const;
  private:
  bool _internal_has_drop_fake_quant() const;
  public:
  void clear_drop_fake_quant();
  bool drop_fake_quant() const;
  void set_drop_fake_quant(bool value);
  private:
  bool _internal_drop_fake_quant() const;
  void _internal_set_drop_fake_quant(bool value);
  public:

  // optional bool reorder_across_fake_quant = 8;
  bool has_reorder_across_fake_quant() const;
  private:
  bool _internal_has_reorder_across_fake_quant() const;
  public:
  void clear_reorder_across_fake_quant();
  bool reorder_across_fake_quant() const;
  void set_reorder_across_fake_quant(bool value);
  private:
  bool _internal_reorder_across_fake_quant() const;
  void _internal_set_reorder_across_fake_quant(bool value);
  public:

  // optional bool allow_custom_ops = 10;
  bool has_allow_custom_ops() const;
  private:
  bool _internal_has_allow_custom_ops() const;
  public:
  void clear_allow_custom_ops();
  bool allow_custom_ops() const;
  void set_allow_custom_ops(bool value);
  private:
  bool _internal_allow_custom_ops() const;
  void _internal_set_allow_custom_ops(bool value);
  public:

  // optional bool drop_control_dependency = 12;
  bool has_drop_control_dependency() const;
  private:
  bool _internal_has_drop_control_dependency() const;
  public:
  void clear_drop_control_dependency();
  bool drop_control_dependency() const;
  void set_drop_control_dependency(bool value);
  private:
  bool _internal_drop_control_dependency() const;
  void _internal_set_drop_control_dependency(bool value);
  public:

  // optional .toco.IODataType inference_input_type = 11;
  bool has_inference_input_type() const;
  private:
  bool _internal_has_inference_input_type() const;
  public:
  void clear_inference_input_type();
  ::toco::IODataType inference_input_type() const;
  void set_inference_input_type(::toco::IODataType value);
  private:
  ::toco::IODataType _internal_inference_input_type() const;
  void _internal_set_inference_input_type(::toco::IODataType value);
  public:

  // optional float default_int16_ranges_min = 15;
  bool has_default_int16_ranges_min() const;
  private:
  bool _internal_has_default_int16_ranges_min() const;
  public:
  void clear_default_int16_ranges_min();
  float default_int16_ranges_min() const;
  void set_default_int16_ranges_min(float value);
  private:
  float _internal_default_int16_ranges_min() const;
  void _internal_set_default_int16_ranges_min(float value);
  public:

  // optional float default_int16_ranges_max = 16;
  bool has_default_int16_ranges_max() const;
  private:
  bool _internal_has_default_int16_ranges_max() const;
  public:
  void clear_default_int16_ranges_max();
  float default_int16_ranges_max() const;
  void set_default_int16_ranges_max(float value);
  private:
  float _internal_default_int16_ranges_max() const;
  void _internal_set_default_int16_ranges_max(float value);
  public:

  // optional bool debug_disable_recurrent_cell_fusion = 13;
  bool has_debug_disable_recurrent_cell_fusion() const;
  private:
  bool _internal_has_debug_disable_recurrent_cell_fusion() const;
  public:
  void clear_debug_disable_recurrent_cell_fusion();
  bool debug_disable_recurrent_cell_fusion() const;
  void set_debug_disable_recurrent_cell_fusion(bool value);
  private:
  bool _internal_debug_disable_recurrent_cell_fusion() const;
  void _internal_set_debug_disable_recurrent_cell_fusion(bool value);
  public:

  // optional bool propagate_fake_quant_num_bits = 14;
  bool has_propagate_fake_quant_num_bits() const;
  private:
  bool _internal_has_propagate_fake_quant_num_bits() const;
  public:
  void clear_propagate_fake_quant_num_bits();
  bool propagate_fake_quant_num_bits() const;
  void set_propagate_fake_quant_num_bits(bool value);
  private:
  bool _internal_propagate_fake_quant_num_bits() const;
  void _internal_set_propagate_fake_quant_num_bits(bool value);
  public:

  // optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
  bool has_allow_nudging_weights_to_use_fast_gemm_kernel() const;
  private:
  bool _internal_has_allow_nudging_weights_to_use_fast_gemm_kernel() const;
  public:
  void clear_allow_nudging_weights_to_use_fast_gemm_kernel();
  bool allow_nudging_weights_to_use_fast_gemm_kernel() const;
  void set_allow_nudging_weights_to_use_fast_gemm_kernel(bool value);
  private:
  bool _internal_allow_nudging_weights_to_use_fast_gemm_kernel() const;
  void _internal_set_allow_nudging_weights_to_use_fast_gemm_kernel(bool value);
  public:

  // optional bool quantize_weights = 20 [default = false];
  bool has_quantize_weights() const;
  private:
  bool _internal_has_quantize_weights() const;
  public:
  void clear_quantize_weights();
  bool quantize_weights() const;
  void set_quantize_weights(bool value);
  private:
  bool _internal_quantize_weights() const;
  void _internal_set_quantize_weights(bool value);
  public:

  // optional bool dump_graphviz_include_video = 25;
  bool has_dump_graphviz_include_video() const;
  private:
  bool _internal_has_dump_graphviz_include_video() const;
  public:
  void clear_dump_graphviz_include_video();
  bool dump_graphviz_include_video() const;
  void set_dump_graphviz_include_video(bool value);
  private:
  bool _internal_dump_graphviz_include_video() const;
  void _internal_set_dump_graphviz_include_video(bool value);
  public:

  // optional bool post_training_quantize = 26 [default = false];
  bool has_post_training_quantize() const;
  private:
  bool _internal_has_post_training_quantize() const;
  public:
  void clear_post_training_quantize();
  bool post_training_quantize() const;
  void set_post_training_quantize(bool value);
  private:
  bool _internal_post_training_quantize() const;
  void _internal_set_post_training_quantize(bool value);
  public:

  // optional bool enable_select_tf_ops = 27 [default = false];
  bool has_enable_select_tf_ops() const;
  private:
  bool _internal_has_enable_select_tf_ops() const;
  public:
  void clear_enable_select_tf_ops();
  bool enable_select_tf_ops() const;
  void set_enable_select_tf_ops(bool value);
  private:
  bool _internal_enable_select_tf_ops() const;
  void _internal_set_enable_select_tf_ops(bool value);
  public:

  // optional bool force_select_tf_ops = 28 [default = false];
  bool has_force_select_tf_ops() const;
  private:
  bool _internal_has_force_select_tf_ops() const;
  public:
  void clear_force_select_tf_ops();
  bool force_select_tf_ops() const;
  void set_force_select_tf_ops(bool value);
  private:
  bool _internal_force_select_tf_ops() const;
  void _internal_set_force_select_tf_ops(bool value);
  public:

  // optional bool quantize_to_float16 = 29 [default = false];
  bool has_quantize_to_float16() const;
  private:
  bool _internal_has_quantize_to_float16() const;
  public:
  void clear_quantize_to_float16();
  bool quantize_to_float16() const;
  void set_quantize_to_float16(bool value);
  private:
  bool _internal_quantize_to_float16() const;
  void _internal_set_quantize_to_float16(bool value);
  public:

  // optional bool enable_tflite_resource_variables = 34;
  bool has_enable_tflite_resource_variables() const;
  private:
  bool _internal_has_enable_tflite_resource_variables() const;
  public:
  void clear_enable_tflite_resource_variables();
  bool enable_tflite_resource_variables() const;
  void set_enable_tflite_resource_variables(bool value);
  private:
  bool _internal_enable_tflite_resource_variables() const;
  void _internal_set_enable_tflite_resource_variables(bool value);
  public:

  // optional bool allow_bfloat16 = 38 [default = false];
  bool has_allow_bfloat16() const;
  private:
  bool _internal_has_allow_bfloat16() const;
  public:
  void clear_allow_bfloat16();
  bool allow_bfloat16() const;
  void set_allow_bfloat16(bool value);
  private:
  bool _internal_allow_bfloat16() const;
  void _internal_set_allow_bfloat16(bool value);
  public:

  // optional bool allow_all_select_tf_ops = 39;
  bool has_allow_all_select_tf_ops() const;
  private:
  bool _internal_has_allow_all_select_tf_ops() const;
  public:
  void clear_allow_all_select_tf_ops();
  bool allow_all_select_tf_ops() const;
  void set_allow_all_select_tf_ops(bool value);
  private:
  bool _internal_allow_all_select_tf_ops() const;
  void _internal_set_allow_all_select_tf_ops(bool value);
  public:

  // optional .toco.IODataType accumulation_type = 37;
  bool has_accumulation_type() const;
  private:
  bool _internal_has_accumulation_type() const;
  public:
  void clear_accumulation_type();
  ::toco::IODataType accumulation_type() const;
  void set_accumulation_type(::toco::IODataType value);
  private:
  ::toco::IODataType _internal_accumulation_type() const;
  void _internal_set_accumulation_type(::toco::IODataType value);
  public:

  // optional bool unfold_large_splat_constant = 40 [default = false];
  bool has_unfold_large_splat_constant() const;
  private:
  bool _internal_has_unfold_large_splat_constant() const;
  public:
  void clear_unfold_large_splat_constant();
  bool unfold_large_splat_constant() const;
  void set_unfold_large_splat_constant(bool value);
  private:
  bool _internal_unfold_large_splat_constant() const;
  void _internal_set_unfold_large_splat_constant(bool value);
  public:

  // optional bool default_to_single_batch_in_tensor_list_ops = 42 [default = false];
  bool has_default_to_single_batch_in_tensor_list_ops() const;
  private:
  bool _internal_has_default_to_single_batch_in_tensor_list_ops() const;
  public:
  void clear_default_to_single_batch_in_tensor_list_ops();
  bool default_to_single_batch_in_tensor_list_ops() const;
  void set_default_to_single_batch_in_tensor_list_ops(bool value);
  private:
  bool _internal_default_to_single_batch_in_tensor_list_ops() const;
  void _internal_set_default_to_single_batch_in_tensor_list_ops(bool value);
  public:

  // optional bool disable_per_channel_quantization = 43 [default = false];
  bool has_disable_per_channel_quantization() const;
  private:
  bool _internal_has_disable_per_channel_quantization() const;
  public:
  void clear_disable_per_channel_quantization();
  bool disable_per_channel_quantization() const;
  void set_disable_per_channel_quantization(bool value);
  private:
  bool _internal_disable_per_channel_quantization() const;
  void _internal_set_disable_per_channel_quantization(bool value);
  public:

  // optional bool enable_mlir_dynamic_range_quantizer = 44 [default = false];
  bool has_enable_mlir_dynamic_range_quantizer() const;
  private:
  bool _internal_has_enable_mlir_dynamic_range_quantizer() const;
  public:
  void clear_enable_mlir_dynamic_range_quantizer();
  bool enable_mlir_dynamic_range_quantizer() const;
  void set_enable_mlir_dynamic_range_quantizer(bool value);
  private:
  bool _internal_enable_mlir_dynamic_range_quantizer() const;
  void _internal_set_enable_mlir_dynamic_range_quantizer(bool value);
  public:

  // optional bool disable_infer_tensor_range = 46 [default = false];
  bool has_disable_infer_tensor_range() const;
  private:
  bool _internal_has_disable_infer_tensor_range() const;
  public:
  void clear_disable_infer_tensor_range();
  bool disable_infer_tensor_range() const;
  void set_disable_infer_tensor_range(bool value);
  private:
  bool _internal_disable_infer_tensor_range() const;
  void _internal_set_disable_infer_tensor_range(bool value);
  public:

  // optional bool use_fake_quant_num_bits = 47 [default = false];
  bool has_use_fake_quant_num_bits() const;
  private:
  bool _internal_has_use_fake_quant_num_bits() const;
  public:
  void clear_use_fake_quant_num_bits();
  bool use_fake_quant_num_bits() const;
  void set_use_fake_quant_num_bits(bool value);
  private:
  bool _internal_use_fake_quant_num_bits() const;
  void _internal_set_use_fake_quant_num_bits(bool value);
  public:

  // optional bool split_tflite_lstm_inputs = 19 [default = true];
  bool has_split_tflite_lstm_inputs() const;
  private:
  bool _internal_has_split_tflite_lstm_inputs() const;
  public:
  void clear_split_tflite_lstm_inputs();
  bool split_tflite_lstm_inputs() const;
  void set_split_tflite_lstm_inputs(bool value);
  private:
  bool _internal_split_tflite_lstm_inputs() const;
  void _internal_set_split_tflite_lstm_inputs(bool value);
  public:

  // optional bool allow_dynamic_tensors = 30 [default = true];
  bool has_allow_dynamic_tensors() const;
  private:
  bool _internal_has_allow_dynamic_tensors() const;
  public:
  void clear_allow_dynamic_tensors();
  bool allow_dynamic_tensors() const;
  void set_allow_dynamic_tensors(bool value);
  private:
  bool _internal_allow_dynamic_tensors() const;
  void _internal_set_allow_dynamic_tensors(bool value);
  public:

  // optional bool unfold_batchmatmul = 35 [default = true];
  bool has_unfold_batchmatmul() const;
  private:
  bool _internal_has_unfold_batchmatmul() const;
  public:
  void clear_unfold_batchmatmul();
  bool unfold_batchmatmul() const;
  void set_unfold_batchmatmul(bool value);
  private:
  bool _internal_unfold_batchmatmul() const;
  void _internal_set_unfold_batchmatmul(bool value);
  public:

  // optional bool lower_tensor_list_ops = 36 [default = true];
  bool has_lower_tensor_list_ops() const;
  private:
  bool _internal_has_lower_tensor_list_ops() const;
  public:
  void clear_lower_tensor_list_ops();
  bool lower_tensor_list_ops() const;
  void set_lower_tensor_list_ops(bool value);
  private:
  bool _internal_lower_tensor_list_ops() const;
  void _internal_set_lower_tensor_list_ops(bool value);
  public:

  // optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
  bool has_dedupe_array_min_size_bytes() const;
  private:
  bool _internal_has_dedupe_array_min_size_bytes() const;
  public:
  void clear_dedupe_array_min_size_bytes();
  int64_t dedupe_array_min_size_bytes() const;
  void set_dedupe_array_min_size_bytes(int64_t value);
  private:
  int64_t _internal_dedupe_array_min_size_bytes() const;
  void _internal_set_dedupe_array_min_size_bytes(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:toco.TocoFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> custom_opdefs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> select_user_tf_ops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> supported_backends_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dump_graphviz_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversion_summary_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tf_quantization_mode_;
  int input_format_;
  int output_format_;
  int inference_type_;
  float default_ranges_min_;
  float default_ranges_max_;
  bool drop_fake_quant_;
  bool reorder_across_fake_quant_;
  bool allow_custom_ops_;
  bool drop_control_dependency_;
  int inference_input_type_;
  float default_int16_ranges_min_;
  float default_int16_ranges_max_;
  bool debug_disable_recurrent_cell_fusion_;
  bool propagate_fake_quant_num_bits_;
  bool allow_nudging_weights_to_use_fast_gemm_kernel_;
  bool quantize_weights_;
  bool dump_graphviz_include_video_;
  bool post_training_quantize_;
  bool enable_select_tf_ops_;
  bool force_select_tf_ops_;
  bool quantize_to_float16_;
  bool enable_tflite_resource_variables_;
  bool allow_bfloat16_;
  bool allow_all_select_tf_ops_;
  int accumulation_type_;
  bool unfold_large_splat_constant_;
  bool default_to_single_batch_in_tensor_list_ops_;
  bool disable_per_channel_quantization_;
  bool enable_mlir_dynamic_range_quantizer_;
  bool disable_infer_tensor_range_;
  bool use_fake_quant_num_bits_;
  bool split_tflite_lstm_inputs_;
  bool allow_dynamic_tensors_;
  bool unfold_batchmatmul_;
  bool lower_tensor_list_ops_;
  int64_t dedupe_array_min_size_bytes_;
  friend struct ::TableStruct_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TocoFlags

// optional .toco.FileFormat input_format = 1;
inline bool TocoFlags::_internal_has_input_format() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TocoFlags::has_input_format() const {
  return _internal_has_input_format();
}
inline void TocoFlags::clear_input_format() {
  input_format_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::toco::FileFormat TocoFlags::_internal_input_format() const {
  return static_cast< ::toco::FileFormat >(input_format_);
}
inline ::toco::FileFormat TocoFlags::input_format() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.input_format)
  return _internal_input_format();
}
inline void TocoFlags::_internal_set_input_format(::toco::FileFormat value) {
  assert(::toco::FileFormat_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  input_format_ = value;
}
inline void TocoFlags::set_input_format(::toco::FileFormat value) {
  _internal_set_input_format(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.input_format)
}

// optional .toco.FileFormat output_format = 2;
inline bool TocoFlags::_internal_has_output_format() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TocoFlags::has_output_format() const {
  return _internal_has_output_format();
}
inline void TocoFlags::clear_output_format() {
  output_format_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::toco::FileFormat TocoFlags::_internal_output_format() const {
  return static_cast< ::toco::FileFormat >(output_format_);
}
inline ::toco::FileFormat TocoFlags::output_format() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.output_format)
  return _internal_output_format();
}
inline void TocoFlags::_internal_set_output_format(::toco::FileFormat value) {
  assert(::toco::FileFormat_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  output_format_ = value;
}
inline void TocoFlags::set_output_format(::toco::FileFormat value) {
  _internal_set_output_format(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.output_format)
}

// optional .toco.IODataType inference_input_type = 11;
inline bool TocoFlags::_internal_has_inference_input_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TocoFlags::has_inference_input_type() const {
  return _internal_has_inference_input_type();
}
inline void TocoFlags::clear_inference_input_type() {
  inference_input_type_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::toco::IODataType TocoFlags::_internal_inference_input_type() const {
  return static_cast< ::toco::IODataType >(inference_input_type_);
}
inline ::toco::IODataType TocoFlags::inference_input_type() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.inference_input_type)
  return _internal_inference_input_type();
}
inline void TocoFlags::_internal_set_inference_input_type(::toco::IODataType value) {
  assert(::toco::IODataType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  inference_input_type_ = value;
}
inline void TocoFlags::set_inference_input_type(::toco::IODataType value) {
  _internal_set_inference_input_type(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.inference_input_type)
}

// optional .toco.IODataType inference_type = 4;
inline bool TocoFlags::_internal_has_inference_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TocoFlags::has_inference_type() const {
  return _internal_has_inference_type();
}
inline void TocoFlags::clear_inference_type() {
  inference_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::toco::IODataType TocoFlags::_internal_inference_type() const {
  return static_cast< ::toco::IODataType >(inference_type_);
}
inline ::toco::IODataType TocoFlags::inference_type() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.inference_type)
  return _internal_inference_type();
}
inline void TocoFlags::_internal_set_inference_type(::toco::IODataType value) {
  assert(::toco::IODataType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  inference_type_ = value;
}
inline void TocoFlags::set_inference_type(::toco::IODataType value) {
  _internal_set_inference_type(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.inference_type)
}

// optional float default_ranges_min = 5;
inline bool TocoFlags::_internal_has_default_ranges_min() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TocoFlags::has_default_ranges_min() const {
  return _internal_has_default_ranges_min();
}
inline void TocoFlags::clear_default_ranges_min() {
  default_ranges_min_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TocoFlags::_internal_default_ranges_min() const {
  return default_ranges_min_;
}
inline float TocoFlags::default_ranges_min() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_ranges_min)
  return _internal_default_ranges_min();
}
inline void TocoFlags::_internal_set_default_ranges_min(float value) {
  _has_bits_[0] |= 0x00000040u;
  default_ranges_min_ = value;
}
inline void TocoFlags::set_default_ranges_min(float value) {
  _internal_set_default_ranges_min(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_ranges_min)
}

// optional float default_ranges_max = 6;
inline bool TocoFlags::_internal_has_default_ranges_max() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TocoFlags::has_default_ranges_max() const {
  return _internal_has_default_ranges_max();
}
inline void TocoFlags::clear_default_ranges_max() {
  default_ranges_max_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TocoFlags::_internal_default_ranges_max() const {
  return default_ranges_max_;
}
inline float TocoFlags::default_ranges_max() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_ranges_max)
  return _internal_default_ranges_max();
}
inline void TocoFlags::_internal_set_default_ranges_max(float value) {
  _has_bits_[0] |= 0x00000080u;
  default_ranges_max_ = value;
}
inline void TocoFlags::set_default_ranges_max(float value) {
  _internal_set_default_ranges_max(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_ranges_max)
}

// optional float default_int16_ranges_min = 15;
inline bool TocoFlags::_internal_has_default_int16_ranges_min() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TocoFlags::has_default_int16_ranges_min() const {
  return _internal_has_default_int16_ranges_min();
}
inline void TocoFlags::clear_default_int16_ranges_min() {
  default_int16_ranges_min_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float TocoFlags::_internal_default_int16_ranges_min() const {
  return default_int16_ranges_min_;
}
inline float TocoFlags::default_int16_ranges_min() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_int16_ranges_min)
  return _internal_default_int16_ranges_min();
}
inline void TocoFlags::_internal_set_default_int16_ranges_min(float value) {
  _has_bits_[0] |= 0x00002000u;
  default_int16_ranges_min_ = value;
}
inline void TocoFlags::set_default_int16_ranges_min(float value) {
  _internal_set_default_int16_ranges_min(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_int16_ranges_min)
}

// optional float default_int16_ranges_max = 16;
inline bool TocoFlags::_internal_has_default_int16_ranges_max() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TocoFlags::has_default_int16_ranges_max() const {
  return _internal_has_default_int16_ranges_max();
}
inline void TocoFlags::clear_default_int16_ranges_max() {
  default_int16_ranges_max_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float TocoFlags::_internal_default_int16_ranges_max() const {
  return default_int16_ranges_max_;
}
inline float TocoFlags::default_int16_ranges_max() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_int16_ranges_max)
  return _internal_default_int16_ranges_max();
}
inline void TocoFlags::_internal_set_default_int16_ranges_max(float value) {
  _has_bits_[0] |= 0x00004000u;
  default_int16_ranges_max_ = value;
}
inline void TocoFlags::set_default_int16_ranges_max(float value) {
  _internal_set_default_int16_ranges_max(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_int16_ranges_max)
}

// optional bool drop_fake_quant = 7;
inline bool TocoFlags::_internal_has_drop_fake_quant() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TocoFlags::has_drop_fake_quant() const {
  return _internal_has_drop_fake_quant();
}
inline void TocoFlags::clear_drop_fake_quant() {
  drop_fake_quant_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TocoFlags::_internal_drop_fake_quant() const {
  return drop_fake_quant_;
}
inline bool TocoFlags::drop_fake_quant() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.drop_fake_quant)
  return _internal_drop_fake_quant();
}
inline void TocoFlags::_internal_set_drop_fake_quant(bool value) {
  _has_bits_[0] |= 0x00000100u;
  drop_fake_quant_ = value;
}
inline void TocoFlags::set_drop_fake_quant(bool value) {
  _internal_set_drop_fake_quant(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.drop_fake_quant)
}

// optional bool reorder_across_fake_quant = 8;
inline bool TocoFlags::_internal_has_reorder_across_fake_quant() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TocoFlags::has_reorder_across_fake_quant() const {
  return _internal_has_reorder_across_fake_quant();
}
inline void TocoFlags::clear_reorder_across_fake_quant() {
  reorder_across_fake_quant_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool TocoFlags::_internal_reorder_across_fake_quant() const {
  return reorder_across_fake_quant_;
}
inline bool TocoFlags::reorder_across_fake_quant() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.reorder_across_fake_quant)
  return _internal_reorder_across_fake_quant();
}
inline void TocoFlags::_internal_set_reorder_across_fake_quant(bool value) {
  _has_bits_[0] |= 0x00000200u;
  reorder_across_fake_quant_ = value;
}
inline void TocoFlags::set_reorder_across_fake_quant(bool value) {
  _internal_set_reorder_across_fake_quant(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.reorder_across_fake_quant)
}

// optional bool allow_custom_ops = 10;
inline bool TocoFlags::_internal_has_allow_custom_ops() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TocoFlags::has_allow_custom_ops() const {
  return _internal_has_allow_custom_ops();
}
inline void TocoFlags::clear_allow_custom_ops() {
  allow_custom_ops_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool TocoFlags::_internal_allow_custom_ops() const {
  return allow_custom_ops_;
}
inline bool TocoFlags::allow_custom_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_custom_ops)
  return _internal_allow_custom_ops();
}
inline void TocoFlags::_internal_set_allow_custom_ops(bool value) {
  _has_bits_[0] |= 0x00000400u;
  allow_custom_ops_ = value;
}
inline void TocoFlags::set_allow_custom_ops(bool value) {
  _internal_set_allow_custom_ops(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_custom_ops)
}

// optional bool drop_control_dependency = 12;
inline bool TocoFlags::_internal_has_drop_control_dependency() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TocoFlags::has_drop_control_dependency() const {
  return _internal_has_drop_control_dependency();
}
inline void TocoFlags::clear_drop_control_dependency() {
  drop_control_dependency_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TocoFlags::_internal_drop_control_dependency() const {
  return drop_control_dependency_;
}
inline bool TocoFlags::drop_control_dependency() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.drop_control_dependency)
  return _internal_drop_control_dependency();
}
inline void TocoFlags::_internal_set_drop_control_dependency(bool value) {
  _has_bits_[0] |= 0x00000800u;
  drop_control_dependency_ = value;
}
inline void TocoFlags::set_drop_control_dependency(bool value) {
  _internal_set_drop_control_dependency(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.drop_control_dependency)
}

// optional bool debug_disable_recurrent_cell_fusion = 13;
inline bool TocoFlags::_internal_has_debug_disable_recurrent_cell_fusion() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TocoFlags::has_debug_disable_recurrent_cell_fusion() const {
  return _internal_has_debug_disable_recurrent_cell_fusion();
}
inline void TocoFlags::clear_debug_disable_recurrent_cell_fusion() {
  debug_disable_recurrent_cell_fusion_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool TocoFlags::_internal_debug_disable_recurrent_cell_fusion() const {
  return debug_disable_recurrent_cell_fusion_;
}
inline bool TocoFlags::debug_disable_recurrent_cell_fusion() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.debug_disable_recurrent_cell_fusion)
  return _internal_debug_disable_recurrent_cell_fusion();
}
inline void TocoFlags::_internal_set_debug_disable_recurrent_cell_fusion(bool value) {
  _has_bits_[0] |= 0x00008000u;
  debug_disable_recurrent_cell_fusion_ = value;
}
inline void TocoFlags::set_debug_disable_recurrent_cell_fusion(bool value) {
  _internal_set_debug_disable_recurrent_cell_fusion(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.debug_disable_recurrent_cell_fusion)
}

// optional bool propagate_fake_quant_num_bits = 14;
inline bool TocoFlags::_internal_has_propagate_fake_quant_num_bits() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TocoFlags::has_propagate_fake_quant_num_bits() const {
  return _internal_has_propagate_fake_quant_num_bits();
}
inline void TocoFlags::clear_propagate_fake_quant_num_bits() {
  propagate_fake_quant_num_bits_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool TocoFlags::_internal_propagate_fake_quant_num_bits() const {
  return propagate_fake_quant_num_bits_;
}
inline bool TocoFlags::propagate_fake_quant_num_bits() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.propagate_fake_quant_num_bits)
  return _internal_propagate_fake_quant_num_bits();
}
inline void TocoFlags::_internal_set_propagate_fake_quant_num_bits(bool value) {
  _has_bits_[0] |= 0x00010000u;
  propagate_fake_quant_num_bits_ = value;
}
inline void TocoFlags::set_propagate_fake_quant_num_bits(bool value) {
  _internal_set_propagate_fake_quant_num_bits(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.propagate_fake_quant_num_bits)
}

// optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
inline bool TocoFlags::_internal_has_allow_nudging_weights_to_use_fast_gemm_kernel() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TocoFlags::has_allow_nudging_weights_to_use_fast_gemm_kernel() const {
  return _internal_has_allow_nudging_weights_to_use_fast_gemm_kernel();
}
inline void TocoFlags::clear_allow_nudging_weights_to_use_fast_gemm_kernel() {
  allow_nudging_weights_to_use_fast_gemm_kernel_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool TocoFlags::_internal_allow_nudging_weights_to_use_fast_gemm_kernel() const {
  return allow_nudging_weights_to_use_fast_gemm_kernel_;
}
inline bool TocoFlags::allow_nudging_weights_to_use_fast_gemm_kernel() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_nudging_weights_to_use_fast_gemm_kernel)
  return _internal_allow_nudging_weights_to_use_fast_gemm_kernel();
}
inline void TocoFlags::_internal_set_allow_nudging_weights_to_use_fast_gemm_kernel(bool value) {
  _has_bits_[0] |= 0x00020000u;
  allow_nudging_weights_to_use_fast_gemm_kernel_ = value;
}
inline void TocoFlags::set_allow_nudging_weights_to_use_fast_gemm_kernel(bool value) {
  _internal_set_allow_nudging_weights_to_use_fast_gemm_kernel(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_nudging_weights_to_use_fast_gemm_kernel)
}

// optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
inline bool TocoFlags::_internal_has_dedupe_array_min_size_bytes() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool TocoFlags::has_dedupe_array_min_size_bytes() const {
  return _internal_has_dedupe_array_min_size_bytes();
}
inline void TocoFlags::clear_dedupe_array_min_size_bytes() {
  dedupe_array_min_size_bytes_ = int64_t{64};
  _has_bits_[1] &= ~0x00000040u;
}
inline int64_t TocoFlags::_internal_dedupe_array_min_size_bytes() const {
  return dedupe_array_min_size_bytes_;
}
inline int64_t TocoFlags::dedupe_array_min_size_bytes() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.dedupe_array_min_size_bytes)
  return _internal_dedupe_array_min_size_bytes();
}
inline void TocoFlags::_internal_set_dedupe_array_min_size_bytes(int64_t value) {
  _has_bits_[1] |= 0x00000040u;
  dedupe_array_min_size_bytes_ = value;
}
inline void TocoFlags::set_dedupe_array_min_size_bytes(int64_t value) {
  _internal_set_dedupe_array_min_size_bytes(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.dedupe_array_min_size_bytes)
}

// optional bool split_tflite_lstm_inputs = 19 [default = true];
inline bool TocoFlags::_internal_has_split_tflite_lstm_inputs() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool TocoFlags::has_split_tflite_lstm_inputs() const {
  return _internal_has_split_tflite_lstm_inputs();
}
inline void TocoFlags::clear_split_tflite_lstm_inputs() {
  split_tflite_lstm_inputs_ = true;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool TocoFlags::_internal_split_tflite_lstm_inputs() const {
  return split_tflite_lstm_inputs_;
}
inline bool TocoFlags::split_tflite_lstm_inputs() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.split_tflite_lstm_inputs)
  return _internal_split_tflite_lstm_inputs();
}
inline void TocoFlags::_internal_set_split_tflite_lstm_inputs(bool value) {
  _has_bits_[1] |= 0x00000004u;
  split_tflite_lstm_inputs_ = value;
}
inline void TocoFlags::set_split_tflite_lstm_inputs(bool value) {
  _internal_set_split_tflite_lstm_inputs(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.split_tflite_lstm_inputs)
}

// optional bool quantize_weights = 20 [default = false];
inline bool TocoFlags::_internal_has_quantize_weights() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TocoFlags::has_quantize_weights() const {
  return _internal_has_quantize_weights();
}
inline void TocoFlags::clear_quantize_weights() {
  quantize_weights_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool TocoFlags::_internal_quantize_weights() const {
  return quantize_weights_;
}
inline bool TocoFlags::quantize_weights() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.quantize_weights)
  return _internal_quantize_weights();
}
inline void TocoFlags::_internal_set_quantize_weights(bool value) {
  _has_bits_[0] |= 0x00040000u;
  quantize_weights_ = value;
}
inline void TocoFlags::set_quantize_weights(bool value) {
  _internal_set_quantize_weights(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.quantize_weights)
}

// optional string dump_graphviz_dir = 24;
inline bool TocoFlags::_internal_has_dump_graphviz_dir() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TocoFlags::has_dump_graphviz_dir() const {
  return _internal_has_dump_graphviz_dir();
}
inline void TocoFlags::clear_dump_graphviz_dir() {
  dump_graphviz_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TocoFlags::dump_graphviz_dir() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.dump_graphviz_dir)
  return _internal_dump_graphviz_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TocoFlags::set_dump_graphviz_dir(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 dump_graphviz_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toco.TocoFlags.dump_graphviz_dir)
}
inline std::string* TocoFlags::mutable_dump_graphviz_dir() {
  std::string* _s = _internal_mutable_dump_graphviz_dir();
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.dump_graphviz_dir)
  return _s;
}
inline const std::string& TocoFlags::_internal_dump_graphviz_dir() const {
  return dump_graphviz_dir_.Get();
}
inline void TocoFlags::_internal_set_dump_graphviz_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dump_graphviz_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TocoFlags::_internal_mutable_dump_graphviz_dir() {
  _has_bits_[0] |= 0x00000001u;
  return dump_graphviz_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TocoFlags::release_dump_graphviz_dir() {
  // @@protoc_insertion_point(field_release:toco.TocoFlags.dump_graphviz_dir)
  if (!_internal_has_dump_graphviz_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = dump_graphviz_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dump_graphviz_dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dump_graphviz_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TocoFlags::set_allocated_dump_graphviz_dir(std::string* dump_graphviz_dir) {
  if (dump_graphviz_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dump_graphviz_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dump_graphviz_dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dump_graphviz_dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dump_graphviz_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toco.TocoFlags.dump_graphviz_dir)
}

// optional bool dump_graphviz_include_video = 25;
inline bool TocoFlags::_internal_has_dump_graphviz_include_video() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TocoFlags::has_dump_graphviz_include_video() const {
  return _internal_has_dump_graphviz_include_video();
}
inline void TocoFlags::clear_dump_graphviz_include_video() {
  dump_graphviz_include_video_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool TocoFlags::_internal_dump_graphviz_include_video() const {
  return dump_graphviz_include_video_;
}
inline bool TocoFlags::dump_graphviz_include_video() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.dump_graphviz_include_video)
  return _internal_dump_graphviz_include_video();
}
inline void TocoFlags::_internal_set_dump_graphviz_include_video(bool value) {
  _has_bits_[0] |= 0x00080000u;
  dump_graphviz_include_video_ = value;
}
inline void TocoFlags::set_dump_graphviz_include_video(bool value) {
  _internal_set_dump_graphviz_include_video(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.dump_graphviz_include_video)
}

// optional bool post_training_quantize = 26 [default = false];
inline bool TocoFlags::_internal_has_post_training_quantize() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TocoFlags::has_post_training_quantize() const {
  return _internal_has_post_training_quantize();
}
inline void TocoFlags::clear_post_training_quantize() {
  post_training_quantize_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool TocoFlags::_internal_post_training_quantize() const {
  return post_training_quantize_;
}
inline bool TocoFlags::post_training_quantize() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.post_training_quantize)
  return _internal_post_training_quantize();
}
inline void TocoFlags::_internal_set_post_training_quantize(bool value) {
  _has_bits_[0] |= 0x00100000u;
  post_training_quantize_ = value;
}
inline void TocoFlags::set_post_training_quantize(bool value) {
  _internal_set_post_training_quantize(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.post_training_quantize)
}

// optional bool enable_select_tf_ops = 27 [default = false];
inline bool TocoFlags::_internal_has_enable_select_tf_ops() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TocoFlags::has_enable_select_tf_ops() const {
  return _internal_has_enable_select_tf_ops();
}
inline void TocoFlags::clear_enable_select_tf_ops() {
  enable_select_tf_ops_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool TocoFlags::_internal_enable_select_tf_ops() const {
  return enable_select_tf_ops_;
}
inline bool TocoFlags::enable_select_tf_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.enable_select_tf_ops)
  return _internal_enable_select_tf_ops();
}
inline void TocoFlags::_internal_set_enable_select_tf_ops(bool value) {
  _has_bits_[0] |= 0x00200000u;
  enable_select_tf_ops_ = value;
}
inline void TocoFlags::set_enable_select_tf_ops(bool value) {
  _internal_set_enable_select_tf_ops(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.enable_select_tf_ops)
}

// optional bool force_select_tf_ops = 28 [default = false];
inline bool TocoFlags::_internal_has_force_select_tf_ops() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TocoFlags::has_force_select_tf_ops() const {
  return _internal_has_force_select_tf_ops();
}
inline void TocoFlags::clear_force_select_tf_ops() {
  force_select_tf_ops_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool TocoFlags::_internal_force_select_tf_ops() const {
  return force_select_tf_ops_;
}
inline bool TocoFlags::force_select_tf_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.force_select_tf_ops)
  return _internal_force_select_tf_ops();
}
inline void TocoFlags::_internal_set_force_select_tf_ops(bool value) {
  _has_bits_[0] |= 0x00400000u;
  force_select_tf_ops_ = value;
}
inline void TocoFlags::set_force_select_tf_ops(bool value) {
  _internal_set_force_select_tf_ops(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.force_select_tf_ops)
}

// optional bool quantize_to_float16 = 29 [default = false];
inline bool TocoFlags::_internal_has_quantize_to_float16() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TocoFlags::has_quantize_to_float16() const {
  return _internal_has_quantize_to_float16();
}
inline void TocoFlags::clear_quantize_to_float16() {
  quantize_to_float16_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool TocoFlags::_internal_quantize_to_float16() const {
  return quantize_to_float16_;
}
inline bool TocoFlags::quantize_to_float16() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.quantize_to_float16)
  return _internal_quantize_to_float16();
}
inline void TocoFlags::_internal_set_quantize_to_float16(bool value) {
  _has_bits_[0] |= 0x00800000u;
  quantize_to_float16_ = value;
}
inline void TocoFlags::set_quantize_to_float16(bool value) {
  _internal_set_quantize_to_float16(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.quantize_to_float16)
}

// optional bool allow_dynamic_tensors = 30 [default = true];
inline bool TocoFlags::_internal_has_allow_dynamic_tensors() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool TocoFlags::has_allow_dynamic_tensors() const {
  return _internal_has_allow_dynamic_tensors();
}
inline void TocoFlags::clear_allow_dynamic_tensors() {
  allow_dynamic_tensors_ = true;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool TocoFlags::_internal_allow_dynamic_tensors() const {
  return allow_dynamic_tensors_;
}
inline bool TocoFlags::allow_dynamic_tensors() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_dynamic_tensors)
  return _internal_allow_dynamic_tensors();
}
inline void TocoFlags::_internal_set_allow_dynamic_tensors(bool value) {
  _has_bits_[1] |= 0x00000008u;
  allow_dynamic_tensors_ = value;
}
inline void TocoFlags::set_allow_dynamic_tensors(bool value) {
  _internal_set_allow_dynamic_tensors(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_dynamic_tensors)
}

// optional string conversion_summary_dir = 31;
inline bool TocoFlags::_internal_has_conversion_summary_dir() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TocoFlags::has_conversion_summary_dir() const {
  return _internal_has_conversion_summary_dir();
}
inline void TocoFlags::clear_conversion_summary_dir() {
  conversion_summary_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TocoFlags::conversion_summary_dir() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.conversion_summary_dir)
  return _internal_conversion_summary_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TocoFlags::set_conversion_summary_dir(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 conversion_summary_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toco.TocoFlags.conversion_summary_dir)
}
inline std::string* TocoFlags::mutable_conversion_summary_dir() {
  std::string* _s = _internal_mutable_conversion_summary_dir();
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.conversion_summary_dir)
  return _s;
}
inline const std::string& TocoFlags::_internal_conversion_summary_dir() const {
  return conversion_summary_dir_.Get();
}
inline void TocoFlags::_internal_set_conversion_summary_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  conversion_summary_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TocoFlags::_internal_mutable_conversion_summary_dir() {
  _has_bits_[0] |= 0x00000002u;
  return conversion_summary_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TocoFlags::release_conversion_summary_dir() {
  // @@protoc_insertion_point(field_release:toco.TocoFlags.conversion_summary_dir)
  if (!_internal_has_conversion_summary_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = conversion_summary_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (conversion_summary_dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    conversion_summary_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TocoFlags::set_allocated_conversion_summary_dir(std::string* conversion_summary_dir) {
  if (conversion_summary_dir != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  conversion_summary_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conversion_summary_dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (conversion_summary_dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    conversion_summary_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toco.TocoFlags.conversion_summary_dir)
}

// repeated string custom_opdefs = 32 [deprecated = true];
inline int TocoFlags::_internal_custom_opdefs_size() const {
  return custom_opdefs_.size();
}
inline int TocoFlags::custom_opdefs_size() const {
  return _internal_custom_opdefs_size();
}
inline void TocoFlags::clear_custom_opdefs() {
  custom_opdefs_.Clear();
}
inline std::string* TocoFlags::add_custom_opdefs() {
  std::string* _s = _internal_add_custom_opdefs();
  // @@protoc_insertion_point(field_add_mutable:toco.TocoFlags.custom_opdefs)
  return _s;
}
inline const std::string& TocoFlags::_internal_custom_opdefs(int index) const {
  return custom_opdefs_.Get(index);
}
inline const std::string& TocoFlags::custom_opdefs(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.custom_opdefs)
  return _internal_custom_opdefs(index);
}
inline std::string* TocoFlags::mutable_custom_opdefs(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.custom_opdefs)
  return custom_opdefs_.Mutable(index);
}
inline void TocoFlags::set_custom_opdefs(int index, const std::string& value) {
  custom_opdefs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.custom_opdefs)
}
inline void TocoFlags::set_custom_opdefs(int index, std::string&& value) {
  custom_opdefs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:toco.TocoFlags.custom_opdefs)
}
inline void TocoFlags::set_custom_opdefs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  custom_opdefs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoFlags.custom_opdefs)
}
inline void TocoFlags::set_custom_opdefs(int index, const char* value, size_t size) {
  custom_opdefs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoFlags.custom_opdefs)
}
inline std::string* TocoFlags::_internal_add_custom_opdefs() {
  return custom_opdefs_.Add();
}
inline void TocoFlags::add_custom_opdefs(const std::string& value) {
  custom_opdefs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoFlags.custom_opdefs)
}
inline void TocoFlags::add_custom_opdefs(std::string&& value) {
  custom_opdefs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoFlags.custom_opdefs)
}
inline void TocoFlags::add_custom_opdefs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  custom_opdefs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoFlags.custom_opdefs)
}
inline void TocoFlags::add_custom_opdefs(const char* value, size_t size) {
  custom_opdefs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoFlags.custom_opdefs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TocoFlags::custom_opdefs() const {
  // @@protoc_insertion_point(field_list:toco.TocoFlags.custom_opdefs)
  return custom_opdefs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TocoFlags::mutable_custom_opdefs() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoFlags.custom_opdefs)
  return &custom_opdefs_;
}

// repeated string select_user_tf_ops = 33;
inline int TocoFlags::_internal_select_user_tf_ops_size() const {
  return select_user_tf_ops_.size();
}
inline int TocoFlags::select_user_tf_ops_size() const {
  return _internal_select_user_tf_ops_size();
}
inline void TocoFlags::clear_select_user_tf_ops() {
  select_user_tf_ops_.Clear();
}
inline std::string* TocoFlags::add_select_user_tf_ops() {
  std::string* _s = _internal_add_select_user_tf_ops();
  // @@protoc_insertion_point(field_add_mutable:toco.TocoFlags.select_user_tf_ops)
  return _s;
}
inline const std::string& TocoFlags::_internal_select_user_tf_ops(int index) const {
  return select_user_tf_ops_.Get(index);
}
inline const std::string& TocoFlags::select_user_tf_ops(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.select_user_tf_ops)
  return _internal_select_user_tf_ops(index);
}
inline std::string* TocoFlags::mutable_select_user_tf_ops(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.select_user_tf_ops)
  return select_user_tf_ops_.Mutable(index);
}
inline void TocoFlags::set_select_user_tf_ops(int index, const std::string& value) {
  select_user_tf_ops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.select_user_tf_ops)
}
inline void TocoFlags::set_select_user_tf_ops(int index, std::string&& value) {
  select_user_tf_ops_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:toco.TocoFlags.select_user_tf_ops)
}
inline void TocoFlags::set_select_user_tf_ops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  select_user_tf_ops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoFlags.select_user_tf_ops)
}
inline void TocoFlags::set_select_user_tf_ops(int index, const char* value, size_t size) {
  select_user_tf_ops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoFlags.select_user_tf_ops)
}
inline std::string* TocoFlags::_internal_add_select_user_tf_ops() {
  return select_user_tf_ops_.Add();
}
inline void TocoFlags::add_select_user_tf_ops(const std::string& value) {
  select_user_tf_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoFlags.select_user_tf_ops)
}
inline void TocoFlags::add_select_user_tf_ops(std::string&& value) {
  select_user_tf_ops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoFlags.select_user_tf_ops)
}
inline void TocoFlags::add_select_user_tf_ops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  select_user_tf_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoFlags.select_user_tf_ops)
}
inline void TocoFlags::add_select_user_tf_ops(const char* value, size_t size) {
  select_user_tf_ops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoFlags.select_user_tf_ops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TocoFlags::select_user_tf_ops() const {
  // @@protoc_insertion_point(field_list:toco.TocoFlags.select_user_tf_ops)
  return select_user_tf_ops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TocoFlags::mutable_select_user_tf_ops() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoFlags.select_user_tf_ops)
  return &select_user_tf_ops_;
}

// optional bool enable_tflite_resource_variables = 34;
inline bool TocoFlags::_internal_has_enable_tflite_resource_variables() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TocoFlags::has_enable_tflite_resource_variables() const {
  return _internal_has_enable_tflite_resource_variables();
}
inline void TocoFlags::clear_enable_tflite_resource_variables() {
  enable_tflite_resource_variables_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool TocoFlags::_internal_enable_tflite_resource_variables() const {
  return enable_tflite_resource_variables_;
}
inline bool TocoFlags::enable_tflite_resource_variables() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.enable_tflite_resource_variables)
  return _internal_enable_tflite_resource_variables();
}
inline void TocoFlags::_internal_set_enable_tflite_resource_variables(bool value) {
  _has_bits_[0] |= 0x01000000u;
  enable_tflite_resource_variables_ = value;
}
inline void TocoFlags::set_enable_tflite_resource_variables(bool value) {
  _internal_set_enable_tflite_resource_variables(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.enable_tflite_resource_variables)
}

// optional bool unfold_batchmatmul = 35 [default = true];
inline bool TocoFlags::_internal_has_unfold_batchmatmul() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool TocoFlags::has_unfold_batchmatmul() const {
  return _internal_has_unfold_batchmatmul();
}
inline void TocoFlags::clear_unfold_batchmatmul() {
  unfold_batchmatmul_ = true;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool TocoFlags::_internal_unfold_batchmatmul() const {
  return unfold_batchmatmul_;
}
inline bool TocoFlags::unfold_batchmatmul() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.unfold_batchmatmul)
  return _internal_unfold_batchmatmul();
}
inline void TocoFlags::_internal_set_unfold_batchmatmul(bool value) {
  _has_bits_[1] |= 0x00000010u;
  unfold_batchmatmul_ = value;
}
inline void TocoFlags::set_unfold_batchmatmul(bool value) {
  _internal_set_unfold_batchmatmul(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.unfold_batchmatmul)
}

// optional bool lower_tensor_list_ops = 36 [default = true];
inline bool TocoFlags::_internal_has_lower_tensor_list_ops() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool TocoFlags::has_lower_tensor_list_ops() const {
  return _internal_has_lower_tensor_list_ops();
}
inline void TocoFlags::clear_lower_tensor_list_ops() {
  lower_tensor_list_ops_ = true;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool TocoFlags::_internal_lower_tensor_list_ops() const {
  return lower_tensor_list_ops_;
}
inline bool TocoFlags::lower_tensor_list_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.lower_tensor_list_ops)
  return _internal_lower_tensor_list_ops();
}
inline void TocoFlags::_internal_set_lower_tensor_list_ops(bool value) {
  _has_bits_[1] |= 0x00000020u;
  lower_tensor_list_ops_ = value;
}
inline void TocoFlags::set_lower_tensor_list_ops(bool value) {
  _internal_set_lower_tensor_list_ops(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.lower_tensor_list_ops)
}

// optional .toco.IODataType accumulation_type = 37;
inline bool TocoFlags::_internal_has_accumulation_type() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TocoFlags::has_accumulation_type() const {
  return _internal_has_accumulation_type();
}
inline void TocoFlags::clear_accumulation_type() {
  accumulation_type_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::toco::IODataType TocoFlags::_internal_accumulation_type() const {
  return static_cast< ::toco::IODataType >(accumulation_type_);
}
inline ::toco::IODataType TocoFlags::accumulation_type() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.accumulation_type)
  return _internal_accumulation_type();
}
inline void TocoFlags::_internal_set_accumulation_type(::toco::IODataType value) {
  assert(::toco::IODataType_IsValid(value));
  _has_bits_[0] |= 0x08000000u;
  accumulation_type_ = value;
}
inline void TocoFlags::set_accumulation_type(::toco::IODataType value) {
  _internal_set_accumulation_type(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.accumulation_type)
}

// optional bool allow_bfloat16 = 38 [default = false];
inline bool TocoFlags::_internal_has_allow_bfloat16() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TocoFlags::has_allow_bfloat16() const {
  return _internal_has_allow_bfloat16();
}
inline void TocoFlags::clear_allow_bfloat16() {
  allow_bfloat16_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool TocoFlags::_internal_allow_bfloat16() const {
  return allow_bfloat16_;
}
inline bool TocoFlags::allow_bfloat16() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_bfloat16)
  return _internal_allow_bfloat16();
}
inline void TocoFlags::_internal_set_allow_bfloat16(bool value) {
  _has_bits_[0] |= 0x02000000u;
  allow_bfloat16_ = value;
}
inline void TocoFlags::set_allow_bfloat16(bool value) {
  _internal_set_allow_bfloat16(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_bfloat16)
}

// optional bool allow_all_select_tf_ops = 39;
inline bool TocoFlags::_internal_has_allow_all_select_tf_ops() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TocoFlags::has_allow_all_select_tf_ops() const {
  return _internal_has_allow_all_select_tf_ops();
}
inline void TocoFlags::clear_allow_all_select_tf_ops() {
  allow_all_select_tf_ops_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool TocoFlags::_internal_allow_all_select_tf_ops() const {
  return allow_all_select_tf_ops_;
}
inline bool TocoFlags::allow_all_select_tf_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_all_select_tf_ops)
  return _internal_allow_all_select_tf_ops();
}
inline void TocoFlags::_internal_set_allow_all_select_tf_ops(bool value) {
  _has_bits_[0] |= 0x04000000u;
  allow_all_select_tf_ops_ = value;
}
inline void TocoFlags::set_allow_all_select_tf_ops(bool value) {
  _internal_set_allow_all_select_tf_ops(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_all_select_tf_ops)
}

// optional bool unfold_large_splat_constant = 40 [default = false];
inline bool TocoFlags::_internal_has_unfold_large_splat_constant() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TocoFlags::has_unfold_large_splat_constant() const {
  return _internal_has_unfold_large_splat_constant();
}
inline void TocoFlags::clear_unfold_large_splat_constant() {
  unfold_large_splat_constant_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool TocoFlags::_internal_unfold_large_splat_constant() const {
  return unfold_large_splat_constant_;
}
inline bool TocoFlags::unfold_large_splat_constant() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.unfold_large_splat_constant)
  return _internal_unfold_large_splat_constant();
}
inline void TocoFlags::_internal_set_unfold_large_splat_constant(bool value) {
  _has_bits_[0] |= 0x10000000u;
  unfold_large_splat_constant_ = value;
}
inline void TocoFlags::set_unfold_large_splat_constant(bool value) {
  _internal_set_unfold_large_splat_constant(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.unfold_large_splat_constant)
}

// repeated string supported_backends = 41;
inline int TocoFlags::_internal_supported_backends_size() const {
  return supported_backends_.size();
}
inline int TocoFlags::supported_backends_size() const {
  return _internal_supported_backends_size();
}
inline void TocoFlags::clear_supported_backends() {
  supported_backends_.Clear();
}
inline std::string* TocoFlags::add_supported_backends() {
  std::string* _s = _internal_add_supported_backends();
  // @@protoc_insertion_point(field_add_mutable:toco.TocoFlags.supported_backends)
  return _s;
}
inline const std::string& TocoFlags::_internal_supported_backends(int index) const {
  return supported_backends_.Get(index);
}
inline const std::string& TocoFlags::supported_backends(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.supported_backends)
  return _internal_supported_backends(index);
}
inline std::string* TocoFlags::mutable_supported_backends(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.supported_backends)
  return supported_backends_.Mutable(index);
}
inline void TocoFlags::set_supported_backends(int index, const std::string& value) {
  supported_backends_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.supported_backends)
}
inline void TocoFlags::set_supported_backends(int index, std::string&& value) {
  supported_backends_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:toco.TocoFlags.supported_backends)
}
inline void TocoFlags::set_supported_backends(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  supported_backends_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoFlags.supported_backends)
}
inline void TocoFlags::set_supported_backends(int index, const char* value, size_t size) {
  supported_backends_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoFlags.supported_backends)
}
inline std::string* TocoFlags::_internal_add_supported_backends() {
  return supported_backends_.Add();
}
inline void TocoFlags::add_supported_backends(const std::string& value) {
  supported_backends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoFlags.supported_backends)
}
inline void TocoFlags::add_supported_backends(std::string&& value) {
  supported_backends_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoFlags.supported_backends)
}
inline void TocoFlags::add_supported_backends(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  supported_backends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoFlags.supported_backends)
}
inline void TocoFlags::add_supported_backends(const char* value, size_t size) {
  supported_backends_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoFlags.supported_backends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TocoFlags::supported_backends() const {
  // @@protoc_insertion_point(field_list:toco.TocoFlags.supported_backends)
  return supported_backends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TocoFlags::mutable_supported_backends() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoFlags.supported_backends)
  return &supported_backends_;
}

// optional bool default_to_single_batch_in_tensor_list_ops = 42 [default = false];
inline bool TocoFlags::_internal_has_default_to_single_batch_in_tensor_list_ops() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool TocoFlags::has_default_to_single_batch_in_tensor_list_ops() const {
  return _internal_has_default_to_single_batch_in_tensor_list_ops();
}
inline void TocoFlags::clear_default_to_single_batch_in_tensor_list_ops() {
  default_to_single_batch_in_tensor_list_ops_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool TocoFlags::_internal_default_to_single_batch_in_tensor_list_ops() const {
  return default_to_single_batch_in_tensor_list_ops_;
}
inline bool TocoFlags::default_to_single_batch_in_tensor_list_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_to_single_batch_in_tensor_list_ops)
  return _internal_default_to_single_batch_in_tensor_list_ops();
}
inline void TocoFlags::_internal_set_default_to_single_batch_in_tensor_list_ops(bool value) {
  _has_bits_[0] |= 0x20000000u;
  default_to_single_batch_in_tensor_list_ops_ = value;
}
inline void TocoFlags::set_default_to_single_batch_in_tensor_list_ops(bool value) {
  _internal_set_default_to_single_batch_in_tensor_list_ops(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_to_single_batch_in_tensor_list_ops)
}

// optional bool disable_per_channel_quantization = 43 [default = false];
inline bool TocoFlags::_internal_has_disable_per_channel_quantization() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool TocoFlags::has_disable_per_channel_quantization() const {
  return _internal_has_disable_per_channel_quantization();
}
inline void TocoFlags::clear_disable_per_channel_quantization() {
  disable_per_channel_quantization_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool TocoFlags::_internal_disable_per_channel_quantization() const {
  return disable_per_channel_quantization_;
}
inline bool TocoFlags::disable_per_channel_quantization() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.disable_per_channel_quantization)
  return _internal_disable_per_channel_quantization();
}
inline void TocoFlags::_internal_set_disable_per_channel_quantization(bool value) {
  _has_bits_[0] |= 0x40000000u;
  disable_per_channel_quantization_ = value;
}
inline void TocoFlags::set_disable_per_channel_quantization(bool value) {
  _internal_set_disable_per_channel_quantization(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.disable_per_channel_quantization)
}

// optional bool enable_mlir_dynamic_range_quantizer = 44 [default = false];
inline bool TocoFlags::_internal_has_enable_mlir_dynamic_range_quantizer() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool TocoFlags::has_enable_mlir_dynamic_range_quantizer() const {
  return _internal_has_enable_mlir_dynamic_range_quantizer();
}
inline void TocoFlags::clear_enable_mlir_dynamic_range_quantizer() {
  enable_mlir_dynamic_range_quantizer_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool TocoFlags::_internal_enable_mlir_dynamic_range_quantizer() const {
  return enable_mlir_dynamic_range_quantizer_;
}
inline bool TocoFlags::enable_mlir_dynamic_range_quantizer() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.enable_mlir_dynamic_range_quantizer)
  return _internal_enable_mlir_dynamic_range_quantizer();
}
inline void TocoFlags::_internal_set_enable_mlir_dynamic_range_quantizer(bool value) {
  _has_bits_[0] |= 0x80000000u;
  enable_mlir_dynamic_range_quantizer_ = value;
}
inline void TocoFlags::set_enable_mlir_dynamic_range_quantizer(bool value) {
  _internal_set_enable_mlir_dynamic_range_quantizer(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.enable_mlir_dynamic_range_quantizer)
}

// optional string tf_quantization_mode = 45;
inline bool TocoFlags::_internal_has_tf_quantization_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TocoFlags::has_tf_quantization_mode() const {
  return _internal_has_tf_quantization_mode();
}
inline void TocoFlags::clear_tf_quantization_mode() {
  tf_quantization_mode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TocoFlags::tf_quantization_mode() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.tf_quantization_mode)
  return _internal_tf_quantization_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TocoFlags::set_tf_quantization_mode(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 tf_quantization_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toco.TocoFlags.tf_quantization_mode)
}
inline std::string* TocoFlags::mutable_tf_quantization_mode() {
  std::string* _s = _internal_mutable_tf_quantization_mode();
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.tf_quantization_mode)
  return _s;
}
inline const std::string& TocoFlags::_internal_tf_quantization_mode() const {
  return tf_quantization_mode_.Get();
}
inline void TocoFlags::_internal_set_tf_quantization_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  tf_quantization_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TocoFlags::_internal_mutable_tf_quantization_mode() {
  _has_bits_[0] |= 0x00000004u;
  return tf_quantization_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TocoFlags::release_tf_quantization_mode() {
  // @@protoc_insertion_point(field_release:toco.TocoFlags.tf_quantization_mode)
  if (!_internal_has_tf_quantization_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = tf_quantization_mode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tf_quantization_mode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tf_quantization_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TocoFlags::set_allocated_tf_quantization_mode(std::string* tf_quantization_mode) {
  if (tf_quantization_mode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tf_quantization_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tf_quantization_mode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tf_quantization_mode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tf_quantization_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toco.TocoFlags.tf_quantization_mode)
}

// optional bool disable_infer_tensor_range = 46 [default = false];
inline bool TocoFlags::_internal_has_disable_infer_tensor_range() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool TocoFlags::has_disable_infer_tensor_range() const {
  return _internal_has_disable_infer_tensor_range();
}
inline void TocoFlags::clear_disable_infer_tensor_range() {
  disable_infer_tensor_range_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool TocoFlags::_internal_disable_infer_tensor_range() const {
  return disable_infer_tensor_range_;
}
inline bool TocoFlags::disable_infer_tensor_range() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.disable_infer_tensor_range)
  return _internal_disable_infer_tensor_range();
}
inline void TocoFlags::_internal_set_disable_infer_tensor_range(bool value) {
  _has_bits_[1] |= 0x00000001u;
  disable_infer_tensor_range_ = value;
}
inline void TocoFlags::set_disable_infer_tensor_range(bool value) {
  _internal_set_disable_infer_tensor_range(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.disable_infer_tensor_range)
}

// optional bool use_fake_quant_num_bits = 47 [default = false];
inline bool TocoFlags::_internal_has_use_fake_quant_num_bits() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool TocoFlags::has_use_fake_quant_num_bits() const {
  return _internal_has_use_fake_quant_num_bits();
}
inline void TocoFlags::clear_use_fake_quant_num_bits() {
  use_fake_quant_num_bits_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool TocoFlags::_internal_use_fake_quant_num_bits() const {
  return use_fake_quant_num_bits_;
}
inline bool TocoFlags::use_fake_quant_num_bits() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.use_fake_quant_num_bits)
  return _internal_use_fake_quant_num_bits();
}
inline void TocoFlags::_internal_set_use_fake_quant_num_bits(bool value) {
  _has_bits_[1] |= 0x00000002u;
  use_fake_quant_num_bits_ = value;
}
inline void TocoFlags::set_use_fake_quant_num_bits(bool value) {
  _internal_set_use_fake_quant_num_bits(value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.use_fake_quant_num_bits)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace toco

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::toco::FileFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toco::FileFormat>() {
  return ::toco::FileFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto
