# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from ansys.api.fluent.v0 import batch_ops_pb2 as ansys_dot_api_dot_fluent_dot_v0_dot_batch__ops__pb2


class BatchOpsStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Execute = channel.stream_stream(
        '/ansys.api.fluent.v0.BatchOps/Execute',
        request_serializer=ansys_dot_api_dot_fluent_dot_v0_dot_batch__ops__pb2.ExecuteRequest.SerializeToString,
        response_deserializer=ansys_dot_api_dot_fluent_dot_v0_dot_batch__ops__pb2.ExecuteResponse.FromString,
        )


class BatchOpsServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Execute(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BatchOpsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Execute': grpc.stream_stream_rpc_method_handler(
          servicer.Execute,
          request_deserializer=ansys_dot_api_dot_fluent_dot_v0_dot_batch__ops__pb2.ExecuteRequest.FromString,
          response_serializer=ansys_dot_api_dot_fluent_dot_v0_dot_batch__ops__pb2.ExecuteResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ansys.api.fluent.v0.BatchOps', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
