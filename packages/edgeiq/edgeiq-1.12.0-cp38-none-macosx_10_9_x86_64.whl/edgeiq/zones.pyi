from _typeshed import Incomplete
from edgeiq.app_config import JsonFile as JsonFile
from edgeiq.bounding_box import BoundingBox as BoundingBox
from edgeiq.object_detection import ObjectDetectionPrediction as ObjectDetectionPrediction, ObjectDetectionResults as ObjectDetectionResults
from edgeiq.object_tracking.object_tracking import TrackingResults as TrackingResults
from edgeiq.tools import to_json_serializable as to_json_serializable
from enum import Enum

def load_zones_from_config(filepath): ...
def create_zone_from_bounding_box(bounding_box, name: str = ..., description: str = ..., img_width: Incomplete | None = ..., img_height: Incomplete | None = ...): ...
def create_bounding_box_from_zone(zone): ...
def convert_polygon_to_box_zone(zone): ...

class ZoneResults(dict):
    def __init__(self, results_dict) -> None: ...

class ZoneType(Enum):
    BOX: str
    POLYGON: str

class Zone:
    def __init__(self, name: str = ..., points: Incomplete | None = ..., type: Incomplete | None = ..., description: str = ..., width: Incomplete | None = ..., height: Incomplete | None = ...) -> None: ...
    def __eq__(self, other): ...
    @property
    def width(self): ...
    @property
    def height(self): ...
    @property
    def zone_mask(self): ...
    @zone_mask.setter
    def zone_mask(self, mask) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, name) -> None: ...
    @property
    def points(self): ...
    @points.setter
    def points(self, points) -> None: ...
    @property
    def description(self): ...
    @property
    def zone_type(self): ...
    def generate_scaled_zone_points(self, width, height): ...
    def create_zone_mask(self, width: Incomplete | None = ..., height: Incomplete | None = ...): ...
    def check_object_detection_prediction_within_zone(self, prediction): ...
    def get_results_for_zone(self, results): ...
    def compute_prediction_overlap_with_zone(self, prediction: ObjectDetectionPrediction): ...

class ZoneList:
    def __init__(self, filepath: Incomplete | None = ...) -> None: ...
    def set_zones(self, zones_dict) -> None: ...
    @property
    def zones(self): ...
    @property
    def width(self): ...
    @property
    def height(self): ...
    def update_dimensions(self, width: Incomplete | None = ..., height: Incomplete | None = ...) -> None: ...
    def add_zone(self, zone) -> None: ...
    def remove_zone(self, zone) -> None: ...
    def get_zone(self, zone_name): ...
    def get_zones_for_prediction(self, prediction): ...
    def get_results_for_zone(self, results, zone_name): ...
    def get_zone_names(self): ...
    def create_sub_zone_list(self, name_list): ...
    def markup_image_with_zones(self, frame, zone_names: Incomplete | None = ..., show_labels: bool = ..., show_boundaries: bool = ..., fill_zones: bool = ..., color=..., line_thickness: int = ..., font_size: float = ..., font_thickness: int = ..., alpha: float = ...): ...
    def filter_results_by_zone(self, results): ...

RESULT_TYPE: Incomplete
