import numpy as np
from _typeshed import Incomplete
from edgeiq import bounding_box as bounding_box
from edgeiq._production_client import PRODUCTION_CLIENT as PRODUCTION_CLIENT
from edgeiq.base_service import BaseService as BaseService
from edgeiq.engine_accelerator import Engine as Engine
from edgeiq.model_config import ModelConfig as ModelConfig, get_model_config as get_model_config
from edgeiq.processing import ObjectDetectionProcessor as ObjectDetectionProcessor
from edgeiq.tools import to_json_serializable as to_json_serializable
from typing import Any, List, Optional

SUPPORTED_ENGINES: Incomplete

class ObjectDetectionPrediction(bounding_box.BoundingBoxPrediction):
    def __init__(self, box: bounding_box.BoundingBox, confidence: float, label: str, index: int) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, label: str): ...
    @property
    def index(self) -> int: ...

class ObjectDetectionResults:
    def __init__(self, predictions: List[ObjectDetectionPrediction], duration: float, image: np.ndarray, **kwargs) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def duration(self) -> float: ...
    @property
    def predictions(self) -> List[ObjectDetectionPrediction]: ...
    @predictions.setter
    def predictions(self, predictions: List[ObjectDetectionPrediction]): ...
    @property
    def image(self) -> np.ndarray: ...

RESULT_TYPE: Incomplete

class ObjectDetection(BaseService[ObjectDetectionProcessor]):
    def __init__(self, model_id: str, model_config: Optional[ModelConfig] = ...) -> None: ...
    def detect_objects(self, image: np.ndarray, confidence_level: float = ..., overlap_threshold: float = ...) -> ObjectDetectionResults: ...
    def detect_objects_batch(self, images: List[np.ndarray], confidence_level: float = ..., overlap_threshold: float = ...) -> List[ObjectDetectionResults]: ...
    def publish_analytics(self, results: ObjectDetectionResults, tag: Any = ...): ...
