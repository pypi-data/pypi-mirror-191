syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";

import "common.proto";
import "entity_reference.proto";
import "oltpannotation.proto";

option java_package = "io.calixa.domain.learning";
option java_multiple_files = true;
option optimize_for = SPEED;

package calixa.domain.learning;


message FeatureAttribution {
  string feature = 1;
  double attribution = 2;
}

message FeatureAttributionList {
  bool label = 1;
  repeated FeatureAttribution feature_attributions = 2;
}

message ModelMetric {
  double threshold = 1;
  double recall = 2;
  double precision = 3;
  double false_positive_rate = 4;
  int64 true_positives = 5;
  int64 false_positives = 6;
  int64 true_negatives = 7;
  int64 false_negatives = 8;
}

message Model {
  option (calixa.oltp.oltp_primary_key) = {field_ids: [1, 2, 3]};

  string organization_id = 1;
  string prediction_task_id = 2;
  string version = 3 [(calixa.oltp.oltp_field) = {nullable: false}];

  // The BigQuery table the contains the model
  string table_name = 100 [(calixa.oltp.oltp_field) = {nullable: false}];

  // The ideal threshold to maximize accuracy; this will eventually be computed
  // by the model pipeline using a heuristic.
  double ideal_threshold = 101 [(calixa.oltp.oltp_field) = {nullable: false}];

  repeated FeatureAttribution global_feature_attributions = 102 [(calixa.oltp.oltp_field) = {nullable: false}];
  repeated FeatureAttributionList by_class_feature_attributions = 103 [(calixa.oltp.oltp_field) = {nullable: false}];
  repeated ModelMetric metrics = 104 [(calixa.oltp.oltp_field) = {nullable: false}];

  google.protobuf.Timestamp created_at = 200 [(calixa.oltp.oltp_field) = {nullable: false}];
  google.protobuf.Timestamp updated_at = 201 [(calixa.oltp.oltp_field) = {nullable: false}];
  google.protobuf.Timestamp deleted_at = 202 [(calixa.oltp.oltp_field) = {nullable: true}];
  google.protobuf.Timestamp expires_at = 203 [(calixa.oltp.oltp_field) = {nullable: false}];
}

message GetCurrentModelRequest {
  string prediction_task_id = 2;
}

service ModelService {
  rpc GetCurrentModel(GetCurrentModelRequest) returns (Model);
  rpc PutModel(Model) returns (Model);
}

/**
 * Enumerates the possible Prediction Tasks available. A Prediction Task
 * might be comprised of several ML model, both supervised and not, whose output
 * are then combined to generate a TaskResult.
 */
enum PredictionTask {
  PREDICTION_TASK_UNSPECIFIED = 0;
  PREDICTION_TASK_BIG_FISH = 1;
}

message LearningWorkflowNotification {
  // This tells us for whom the work is done and work is done

  string organization_id = 1;
  string prediction_task_id = 2;

  string labels_table_name = 10;
  string feature_vectors_table_name = 11;
  string model_table_name = 12;
  string predictions_table_name = 13;

  // Cursor used by receiver to tell where to start reading BQ data from:
  string cursor = 14;
  // Timestamp used by receiver while publishing md_s1000000 metric observation:
  google.protobuf.Timestamp results_ready_at = 15;
}

message Prediction {
  bool predicted_label = 1;
  double probability = 2;
  repeated FeatureAttribution feature_attributions = 3;
}

/**
 * Defines a PredictionTask: which models and which features for each models.
 * A collection of these messages represent the 'prediction_task_definitions' for a given organization_id
 * and it is stored in organization.proto:Settings
 */
message PredictionTaskDefinition {
  string prediction_task_id = 100;
  PredictionTask prediction_task = 1;

  // which entity type this task for?
  calixa.domain.common.EntityType entity_type = 3;
}

message GetLabelRequest {
 string organization_id = 1;
 // optional, omit to retrieve all overwrites for the specified org
 oneof type {
   string canonical_id = 2;
   calixa.domain.common.EntityType entity_type = 3;
 }
 string prediction_id = 4;
}

message SetLabelRequest {
  Label label = 1;
  string organization_user_id = 2;
}

message Label {
  calixa.domain.entity.EntityReference entity_reference = 1;
  string prediction_id = 2;
  bool value = 3;
  google.protobuf.Timestamp updated_at = 4;
}

message LabelList {
  repeated Label labels = 1;
}

service LearningService {
  rpc SetLabel(SetLabelRequest) returns (Label) {}
  rpc GetLabels(GetLabelRequest) returns (LabelList) {}
}
