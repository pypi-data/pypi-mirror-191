# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import learning_pb2 as learning__pb2


class ModelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCurrentModel = channel.unary_unary(
                '/calixa.domain.learning.ModelService/GetCurrentModel',
                request_serializer=learning__pb2.GetCurrentModelRequest.SerializeToString,
                response_deserializer=learning__pb2.Model.FromString,
                )
        self.PutModel = channel.unary_unary(
                '/calixa.domain.learning.ModelService/PutModel',
                request_serializer=learning__pb2.Model.SerializeToString,
                response_deserializer=learning__pb2.Model.FromString,
                )


class ModelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCurrentModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCurrentModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentModel,
                    request_deserializer=learning__pb2.GetCurrentModelRequest.FromString,
                    response_serializer=learning__pb2.Model.SerializeToString,
            ),
            'PutModel': grpc.unary_unary_rpc_method_handler(
                    servicer.PutModel,
                    request_deserializer=learning__pb2.Model.FromString,
                    response_serializer=learning__pb2.Model.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.learning.ModelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCurrentModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.ModelService/GetCurrentModel',
            learning__pb2.GetCurrentModelRequest.SerializeToString,
            learning__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.ModelService/PutModel',
            learning__pb2.Model.SerializeToString,
            learning__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LearningServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetLabel = channel.unary_unary(
                '/calixa.domain.learning.LearningService/SetLabel',
                request_serializer=learning__pb2.SetLabelRequest.SerializeToString,
                response_deserializer=learning__pb2.Label.FromString,
                )
        self.GetLabels = channel.unary_unary(
                '/calixa.domain.learning.LearningService/GetLabels',
                request_serializer=learning__pb2.GetLabelRequest.SerializeToString,
                response_deserializer=learning__pb2.LabelList.FromString,
                )


class LearningServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetLabel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLabels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LearningServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLabel,
                    request_deserializer=learning__pb2.SetLabelRequest.FromString,
                    response_serializer=learning__pb2.Label.SerializeToString,
            ),
            'GetLabels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLabels,
                    request_deserializer=learning__pb2.GetLabelRequest.FromString,
                    response_serializer=learning__pb2.LabelList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.learning.LearningService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LearningService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.LearningService/SetLabel',
            learning__pb2.SetLabelRequest.SerializeToString,
            learning__pb2.Label.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.LearningService/GetLabels',
            learning__pb2.GetLabelRequest.SerializeToString,
            learning__pb2.LabelList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
