Metadata-Version: 2.1
Name: sqlalchemy-create-table-as
Version: 0.3.0
Summary: module provide *create table as* statement
Home-page: https://github.com/GrozniyToaster/sqlalchemy-create-table-as
License: MIT
Author: Nedosekov Ivan
Author-email: ivan-nedd@mail.ru
Requires-Python: >=3.6,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Programming Language :: SQL
Classifier: Topic :: Database
Classifier: Topic :: Database :: Database Engines/Servers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Dist: sqlalchemy (>=1.0.0)
Project-URL: Repository, https://github.com/GrozniyToaster/sqlalchemy-create-table-as
Description-Content-Type: text/markdown

# "Create Table As" form for SQLAlchemy

Add `create table as` construct to SQLalchemy

## Usage

Examples:
```python
>>> from sqlalchemy import *
>>> from sqlalchemy_create_table_as import *
>>> str(
...     CreateTableAs(
...         table('new_table'), 
...         select(column('f1'), column('f2')).select_from(table('old_table'))
...         )
... )
'CREATE TABLE new_table AS SELECT f1, f2 \nFROM old_table'
 
>>> t = Table('old_table', MetaData(), Column('f1'), Column('f2'))

>>> str(CreateTableAs(table('new_table'), select(t)))
>>> 'CREATE TABLE new_table AS SELECT old_table.f1, old_table.f2 \nFROM old_table'
```

## Installation

`sqlalchemy-create-table-as` is available on PyPI and can be installed via `pip`

```console
pip install sqlalchemy-create-table-as
```

## Acknowledgements
Package inspired by [sqlalchemy-views](https://pypi.org/project/sqlalchemy-views/) 

And thank you to the various [contributors](https://github.com/GrozniyToaster/sqlalchemy-create-table-as/pulse)!
