# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import afilter_pb2 as afilter__pb2


class FilterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FilterFunc = channel.unary_unary(
                '/afilter.Filter/FilterFunc',
                request_serializer=afilter__pb2.FilterRequest.SerializeToString,
                response_deserializer=afilter__pb2.FilterReply.FromString,
                )
        self.FilterChat = channel.stream_stream(
                '/afilter.Filter/FilterChat',
                request_serializer=afilter__pb2.OneRequest.SerializeToString,
                response_deserializer=afilter__pb2.OneReply.FromString,
                )
        self.FilterCheck = channel.unary_unary(
                '/afilter.Filter/FilterCheck',
                request_serializer=afilter__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=afilter__pb2.HealthCheckResponse.FromString,
                )
        self.FilterWatch = channel.unary_stream(
                '/afilter.Filter/FilterWatch',
                request_serializer=afilter__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=afilter__pb2.HealthCheckResponse.FromString,
                )


class FilterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FilterFunc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilterChat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilterCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilterWatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FilterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FilterFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.FilterFunc,
                    request_deserializer=afilter__pb2.FilterRequest.FromString,
                    response_serializer=afilter__pb2.FilterReply.SerializeToString,
            ),
            'FilterChat': grpc.stream_stream_rpc_method_handler(
                    servicer.FilterChat,
                    request_deserializer=afilter__pb2.OneRequest.FromString,
                    response_serializer=afilter__pb2.OneReply.SerializeToString,
            ),
            'FilterCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.FilterCheck,
                    request_deserializer=afilter__pb2.HealthCheckRequest.FromString,
                    response_serializer=afilter__pb2.HealthCheckResponse.SerializeToString,
            ),
            'FilterWatch': grpc.unary_stream_rpc_method_handler(
                    servicer.FilterWatch,
                    request_deserializer=afilter__pb2.HealthCheckRequest.FromString,
                    response_serializer=afilter__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'afilter.Filter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Filter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FilterFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/afilter.Filter/FilterFunc',
            afilter__pb2.FilterRequest.SerializeToString,
            afilter__pb2.FilterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FilterChat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/afilter.Filter/FilterChat',
            afilter__pb2.OneRequest.SerializeToString,
            afilter__pb2.OneReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FilterCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/afilter.Filter/FilterCheck',
            afilter__pb2.HealthCheckRequest.SerializeToString,
            afilter__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FilterWatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/afilter.Filter/FilterWatch',
            afilter__pb2.HealthCheckRequest.SerializeToString,
            afilter__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
