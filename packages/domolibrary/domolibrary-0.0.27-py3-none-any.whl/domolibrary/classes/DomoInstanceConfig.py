# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/classes/50_DomoInstanceConfig.ipynb.

# %% auto 0
__all__ = ['DomoInstanceConfig']

# %% ../../nbs/classes/50_DomoInstanceConfig.ipynb 3
import httpx
import datetime as dt
import asyncio
from fastcore.basics import patch_to


from dataclasses import dataclass, field
from typing import List

import domolibrary.client.DomoAuth as dmda
import domolibrary.client.ResponseGetData as rgd
import domolibrary.routes.instance_config as instance_config_routes

# import Library.utils.convert as cd
# from .DomoAuth import DomoAuth
# from .DomoGrant import DomoGrant
# from .DomoRole import DomoRole
# from .DomoApplication import DomoApplication
# import Library.DomoClasses.DomoPublish as dmpb


# import domolibrary.utils.convert as cd
# import domolibrary.utils.DictDot as util_dd
# import domolibrary.client.DomoError as de


# %% ../../nbs/classes/50_DomoInstanceConfig.ipynb 4
@dataclass
class DomoInstanceConfig:
    """utility class that absorbs many of the domo instance configuration methods"""
    
    auth: dmda.DomoAuth

# %% ../../nbs/classes/50_DomoInstanceConfig.ipynb 5
@patch_to(DomoInstanceConfig, cls_method=True)
async def get_allowlist(cls: DomoInstanceConfig, 
                        auth: dmda.DomoFullAuth, # get_allowlist requires full authentication
                        session: httpx.AsyncClient = None, 
                        debug_api: bool = False) -> list[str]:
    """retrieves the allowlist for an instance"""

    res =  await instance_config_routes.get_allowlist(auth=auth,  debug_api=debug_api)

    if not res.is_success:
        return None

    return res.response.get('addresses')


# %% ../../nbs/classes/50_DomoInstanceConfig.ipynb 9
@patch_to(DomoInstanceConfig, cls_method=True)
async def set_allowlist(cls,
                        auth: dmda.DomoAuth,
                        ip_address_ls: list[str],
                        debug_api: bool = False,
                        session: httpx.AsyncClient = None
                        ):

    await instance_config_routes.set_allowlist(auth=auth,
                                               ip_address_ls=ip_address_ls,
                                               debug_api=debug_api, session=session)

    return await cls.get_allowlist(auth=auth, debug_api=debug_api, session=session)


@patch_to(DomoInstanceConfig, cls_method=True)
async def upsert_allowlist(cls,
                           auth: dmda.DomoAuth,
                           ip_address_ls: list[str],
                           debug_api: bool = False,
                           session: httpx.AsyncClient = None
                           ):

    exist_ip_address_ls = await cls.get_allowlist(auth=auth, debug_api=debug_api, session=session)
    ip_address_ls += exist_ip_address_ls

    return await cls.set_allowlist(auth=auth,
                                   ip_address_ls=list(set(ip_address_ls)),
                                   debug_api=debug_api, session=session)

