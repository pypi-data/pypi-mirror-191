# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pydantic_aioredis', 'pydantic_aioredis.ext', 'pydantic_aioredis.ext.FastAPI']

package_data = \
{'': ['*']}

install_requires = \
['anyio>=3.6.2,<4.0.0',
 'nest-asyncio>=1.5.6,<2.0.0',
 'pydantic>=1.10.2,<2.0.0',
 'redis>=4.4.0,<5.0.0']

extras_require = \
{'fastapi': ['fastapi>=0.91.0,<0.92.0'],
 'fastapi-crudrouter': ['fastapi-crudrouter>=0.8.6,<0.9.0']}

setup_kwargs = {
    'name': 'pydantic-aioredis',
    'version': '1.2.2',
    'description': 'Use your pydantic models as an ORM, storing data in Redis.',
    'long_description': '# pydantic-aioredis\n\nA simple declarative ORM for Redis, using aioredis. Use your Pydantic\nmodels like an ORM, storing data in Redis!\n\nInspired by\n[pydantic-redis](https://github.com/sopherapps/pydantic-redis) by\n[Martin Ahindura](https://github.com/Tinitto)\n\n<p align="center">\n    <a href="https://github.com/andrewthetechie/pydantic-aioredis" target="_blank">\n        <img src="https://img.shields.io/github/last-commit/andrewthetechie/pydantic-aioredis" alt="Latest Commit">\n    </a>\n    <img src="https://img.shields.io/badge/license-MIT-green">\n    <img alt="GitHub release (latest by date)" src="https://img.shields.io/github/v/release/andrewthetechie/pydantic-aioredis?label=Latest%20Release">\n    <br />\n    <a href="https://github.com/andrewthetechie/pydantic-aioredis/issues"><img src="https://img.shields.io/github/issues/andrewthetechie/pydantic-aioredis" /></a>\n    <img alt="GitHub Workflow Status Test and Lint (branch)" src="https://img.shields.io/github/actions/workflow/status/andrewthetechie/pydantic-aioredis/tests.yml?branch=main">\n    <img alt="Contributors" src="https://img.shields.io/github/contributors/andrewthetechie/pydantic-aioredis">\n    <br />\n    <a href="https://pypi.org/project/pydantic-aioredis" target="_blank">\n        <img src="https://img.shields.io/pypi/v/pydantic-aioredis" alt="Package version">\n    </a>\n    <img src="https://img.shields.io/pypi/pyversions/pydantic-aioredis">\n</p>\n\n## Main Dependencies\n\n- [Python +3.7](https://www.python.org)\n- [redis-py <4.2.0](https://github.com/redis/redis-py)\n- [pydantic](https://github.com/samuelcolvin/pydantic/)\n\n## Getting Started\n\n### Examples\n\nExamples are in the [examples/](./examples) directory of this repo.\n\n### Installation\n\nInstall the package\n\n    pip install pydantic-aioredis\n\n### Quick Usage\n\nImport the `Store`, the `RedisConfig` and the `Model` classes and use accordingly\n\n```python\nimport asyncio\nfrom datetime import date\nfrom pydantic_aioredis import RedisConfig, Model, Store\n\n# Create models as you would create pydantic models i.e. using typings\nclass Book(Model):\n    _primary_key_field: str = \'title\'\n    title: str\n    author: str\n    published_on: date\n    in_stock: bool = True\n\n# Do note that there is no concept of relationships here\nclass Library(Model):\n    # the _primary_key_field is mandatory\n    _primary_key_field: str = \'name\'\n    name: str\n    address: str\n\n# Create the store and register your models\nstore = Store(name=\'some_name\', redis_config=RedisConfig(db=5, host=\'localhost\', port=6379), life_span_in_seconds=3600)\nstore.register_model(Book)\nstore.register_model(Library)\n\n# Sample books. You can create as many as you wish anywhere in the code\nbooks = [\n    Book(title="Oliver Twist", author=\'Charles Dickens\', published_on=date(year=1215, month=4, day=4),\n        in_stock=False),\n    Book(title="Great Expectations", author=\'Charles Dickens\', published_on=date(year=1220, month=4, day=4)),\n    Book(title="Jane Eyre", author=\'Charles Dickens\', published_on=date(year=1225, month=6, day=4), in_stock=False),\n    Book(title="Wuthering Heights", author=\'Jane Austen\', published_on=date(year=1600, month=4, day=4)),\n]\n# Some library objects\nlibraries = [\n    Library(name="The Grand Library", address="Kinogozi, Hoima, Uganda"),\n    Library(name="Christian Library", address="Buhimba, Hoima, Uganda")\n]\n\nasync def work_with_orm():\n  # Insert them into redis\n  await Book.insert(books)\n  await Library.insert(libraries)\n\n  # Select all books to view them. A list of Model instances will be returned\n  all_books = await Book.select()\n  print(all_books) # Will print [Book(title="Oliver Twist", author="Charles Dickens", published_on=date(year=1215, month=4, day=4), in_stock=False), Book(...]\n\n  # Or select some of the books\n  some_books = await Book.select(ids=["Oliver Twist", "Jane Eyre"])\n  print(some_books) # Will return only those two books\n\n  # Or select some of the columns. THIS RETURNS DICTIONARIES not MODEL Instances\n  # The Dictionaries have values in string form so you might need to do some extra work\n  books_with_few_fields = await Book.select(columns=["author", "in_stock"])\n  print(books_with_few_fields) # Will print [{"author": "\'Charles Dickens", "in_stock": "True"},...]\n\n\n  this_book = Book(title="Moby Dick", author=\'Herman Melvill\', published_on=date(year=1851, month=10, day=17))\n  await Book.insert(this_book)\n  # oops, there was a typo. Fix it\n  # Update is an async context manager and will update redis with all changes in one operations\n  async with this_book.update():\n    this_book.author = "Herman Melville"\n    this_book.published_on=date(year=1851, month=10, day=18)\n  this_book_from_redis = await Book.select(ids=["Moby Dick"])\n  assert this_book_from_redis[0].author == "Herman Melville"\n  assert this_book_from_redis[0].author == date(year=1851, month=10, day=18)\n\n  # Delete any number of items\n  await Library.delete(ids=["The Grand Library"])\n\n# Now run these updates\nloop = asyncio.get_event_loop()\nloop.run_until_complete(work_with_orm())\n```\n\n### Custom Fields in Model\n\n| Field Name          | Required | Default      | Description                                                          |\n| ------------------- | -------- | ------------ | -------------------------------------------------------------------- |\n| \\_primary_key_field | Yes      | None         | The field of your model that is the primary key                      |\n| \\_redis_prefix      | No       | None         | If set, will be added to the beginning of the keys we store in redis |\n| \\_redis_separator   | No       | :            | Defaults to :, used to separate prefix, table_name, and primary_key  |\n| \\_table_name        | No       | cls.**name** | Defaults to the model\'s name, can set a custom name in redis         |\n| \\_auto_save         | No       | False        | Defaults to false. If true, will save to redis on instantiation      |\n| \\_auto_sync         | No       | False        | Defaults to false. If true, will save to redis on attr update        |\n\n## License\n\nLicensed under the [MIT License](./LICENSE)\n\n## Contributing\n\nContributions are very welcome.\nTo learn more, see the [Contributor Guide](./CONTRIBUTING.rst)\n\n### Contributors\n\nThanks go to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align="center"><a href="https://github.com/andrewthetechie"><img src="https://avatars.githubusercontent.com/u/1377314?v=4?s=100" width="100px;" alt="Andrew"/><br /><sub><b>Andrew</b></sub></a><br /><a href="https://github.com/andrewthetechie/pydantic-aioredis/commits?author=andrewthetechie" title="Code">💻</a> <a href="https://github.com/andrewthetechie/pydantic-aioredis/commits?author=andrewthetechie" title="Documentation">📖</a></td>\n      <td align="center"><a href="https://github.com/Tinitto"><img src="https://avatars.githubusercontent.com/u/21363733??v=4?s=100" width="100px;" alt="Martin Ahindura"/><br /><sub><b>Martin Ahindura</b></sub></a><br /><a href="https://github.com/andrewthetechie/pydantic-aioredis/commits?author=Tinitto" title="Code">💻</a> <a href="#ideas-Tinitto" title="Ideas, Planning, & Feedback">🤔</a></td>\n      <td align="center"><a href="https://github.com/david-wahlstedt"><img src="https://avatars.githubusercontent.com/u/66391333?v=4?s=100" width="100px;" alt="david-wahlstedt"/><br /><sub><b>david-wahlstedt</b></sub></a><br /><a href="https://github.com/andrewthetechie/pydantic-aioredis/commits?author=david-wahlstedt" title="Tests">⚠️</a> <a href="https://github.com/andrewthetechie/pydantic-aioredis/commits?author=david-wahlstedt" title="Documentation">📖</a> <a href="https://github.com/andrewthetechie/pydantic-aioredis/pulls?q=is%3Apr+reviewed-by%3Adavid-wahlstedt" title="Reviewed Pull Requests">👀</a></td>\n      <td align="center"><a href="https://blog.gtmanfred.com"><img src="https://avatars.githubusercontent.com/u/732321?v=4?s=100" width="100px;" alt="Daniel Wallace"/><br /><sub><b>Daniel Wallace</b></sub></a><br /><a href="https://github.com/andrewthetechie/pydantic-aioredis/commits?author=gtmanfred" title="Tests">⚠️</a></td>\n      <td align="center"><a href="https://derwen.ai/paco"><img src="https://avatars.githubusercontent.com/u/57973?v=4?s=100" width="100px;" alt="Paco Nathan"/><br /><sub><b>Paco Nathan</b></sub></a><br /><a href="#example-ceteri" title="Examples">💡</a></td>\n      <td align="center"><a href="https://www.linkedin.com/in/andreas-brodersen-1b955b100/"><img src="https://avatars.githubusercontent.com/u/43907402?v=4?s=100" width="100px;" alt="Andreas Brodersen"/><br /><sub><b>Andreas Brodersen</b></sub></a><br /><a href="https://github.com/andrewthetechie/pydantic-aioredis/commits?author=AndreasPB" title="Documentation">📖</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n',
    'author': 'Andrew Herrington',
    'author_email': 'andrew.the.techie@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/andrewthetechie/pydantic-aioredis',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
