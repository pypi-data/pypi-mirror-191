__author__ = "Marc-Olivier Derouin"
__email__ = "marcolivier.derouin@poulet-frit.com"

from io import StringIO
import school_grader
import os
import importlib.util
from unittest.mock import patch
import sys

from school_grader.test_case import timeout


def run_all_test_recursively(root_folder: str = '.', timeout_time: int = 1):
    """
    Recursively search for Python files in the given root folder and run them and generate a report.

    :param root_folder: The root folder to search for Python files. Default is '.'.
    :param timeout_time: Not used in the code.
    :return: None
    """
    def empty_function(*args, **kwargs):
        """An empty function that does nothing."""
        pass
    old_implementation = school_grader.run_test
    school_grader.run_test = empty_function

    @timeout(timeout_time)
    def run_file(file_path):
        """
        Change the current working directory to the directory containing the file,
        import the file as a module, and run it.

        :param file_path: The path to the file.
        :return: None
        """
        os.chdir(os.path.dirname(file_path))
        spec = importlib.util.spec_from_file_location(file, file_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)

    # Redirect sys.stdout to capture any output generated by the imported modules
    with patch('builtins.input', lambda _: None), patch('sys.stdout', new=StringIO()):
        for root, _, files in os.walk(root_folder):
            for file in files:
                if file.endswith('.py'):
                    file_path = os.path.join(root, file)
                    try:
                        run_file(file_path)
                    except:
                        # Catch and ignore any exceptions that occur during the execution of the file
                        pass
    # Reset sys.stdout and call the original run_test function
    sys.stdout = sys.__stdout__
    old_implementation()
