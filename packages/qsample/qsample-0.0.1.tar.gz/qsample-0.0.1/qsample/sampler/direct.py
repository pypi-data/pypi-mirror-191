# AUTOGENERATED! DO NOT EDIT! File to edit: ../../06c_sampler.direct.ipynb.

# %% auto 0
__all__ = ['DirectSampler']

# %% ../../06c_sampler.direct.ipynb 3
from .base import Sampler, err_probs_tomatrix
import numpy as np

# %% ../../06c_sampler.direct.ipynb 4
class DirectSampler(Sampler):
    
    def __init__(self, protocol, simulator, err_model=None, err_probs=None):
        super().__init__(protocol, simulator, err_probs=err_probs, err_model=err_model)
        self.err_probs = err_probs_tomatrix(err_probs, self.err_model.groups)
    
    def stats(self, tree_idx=None):
        if tree_idx:
            p_L = self.trees[tree_idx].direct_rate
            v_L = self.trees[tree_idx].direct_variance
        else:
            p_L, v_L = [], []
            for tree in self.trees.values():
                p_L.append(tree.direct_rate)
                v_L.append(tree.direct_variance)
        return p_L, np.sqrt(v_L)
    
    def optimize(self, tree_node, circuit, grp_probs):
        locgrps = self.protocol_groups[circuit.id]
        flocs = self.err_model.choose_p(locgrps,grp_probs)
        subset = tuple(len(locs) for locs in flocs.values())
        return {'subset': subset, 'flocs': flocs}
