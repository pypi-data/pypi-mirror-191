# AUTOGENERATED! DO NOT EDIT! File to edit: ../../04b_sim.stabilizer.ipynb.

# %% auto 0
__all__ = ['StabilizerSimulator']

# %% ../../04b_sim.stabilizer.ipynb 3
from chp_sim import ChpSimulator
from .mixin import CircuitRunnerMixin

# %% ../../04b_sim.stabilizer.ipynb 4
class StabilizerSimulator(ChpSimulator, CircuitRunnerMixin):
    """The bare minimum needed for the CHP simulation.
    
    Reference:
        "Improved Simulation of Stabilizer Circuits"
        Scott Aaronson and Daniel Gottesman
        https://arxiv.org/abs/quant-ph/0406196
        
    Original author:
        Craig Gidney
        https://github.com/Strilanc/python-chp-stabilizer-simulator
    """
    
    def init(self, qubit: int) -> None:
        """Initialize to |0>"""
        m = self.measure(qubit)
        if m == 1: 
            self.X(qubit)
            
    def measure(self, qubit: int) -> "MeasureResult":
        """Measurement in Z basis"""
        return super().measure(qubit)
                   
    def S(self, qubit: int) -> None:
        """Phase gate"""
        self.phase(qubit)
        
    def H(self, qubit:int) -> None:
        """H gate"""
        self.hadamard(qubit)
        
    def CNOT(self, control: int, target: int) -> None:
        """CNOT gate"""
        self.cnot(control, target)
            
    def I(self, qubit: int) -> None:
        """Identity gate"""
        pass
        
    def Z(self, qubit: int) -> None:
        """Z gate"""
        self.S(qubit)
        self.S(qubit)
        
    def X(self, qubit: int) -> None:
        """X gate"""
        self.H(qubit)
        self.Z(qubit)
        self.H(qubit)
        
    def Y(self, qubit: int) -> None:
        """Y gate"""
        self.S(qubit)
        self.S(qubit)
        self.S(qubit)
        self.X(qubit)
        self.S(qubit)
        
    def Q(self, qubit: int) -> None:
        """Q = sqrt(X) = HSH"""
        self.H(qubit)
        self.S(qubit)
        self.H(qubit)
    
    def Qd(self, qubit: int) -> None:
        """Q^(dagger) = Q^3"""
        self.Q(qubit)
        self.Q(qubit)
        self.Q(qubit)
        
    def Sd(self, qubit: int) -> None:
        """S^(dagger) = S^3"""
        self.S(qubit)
        self.S(qubit)
        self.S(qubit)
    
    def R(self, qubit: int) -> None:
        """R = sqrt(XZ) = SQS^(dagger)"""
        self.Sd(qubit)
        self.Q(qubit)
        self.S(qubit)
        
    def Rd(self, qubit: int) -> None:
        """R^(dagger) = R^3"""
        self.R(qubit)
        self.R(qubit)
        self.R(qubit)
        
    def MSd(self, qubitA: int, qubitB: int) -> None:
        """Molmer-Sorensen gate: -pi/2 XX rotation
        Ref.: Fig. 6 of https://arxiv.org/pdf/2111.12654.pdf"""
        self.Rd(qubitA)
        self.CNOT(qubitA, qubitB)
        self.R(qubitA)
        self.Qd(qubitA)
        self.Qd(qubitB)
