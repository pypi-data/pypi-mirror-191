""" Verify Images Request Module """
from __future__ import absolute_import
import re
from yk_utils.models import Model, deserialize_model


VerifyImagesRequestSchema = \
    {
        "type": "object",
        "properties": {
            "probe_image": {
                "type": "string",
                "description": "JPG base 64 string face image to be matched against reference image."
            },
            "reference_image": {
                "type": "string",
                "description": "JPG base 64 string reference face image."
            },
            "matching_score_threshold": {
                "type": "number",
                "format": "double",
                "default": 0.4,
                "description": "Matching score threshold used to verify matching between probe and reference image."
            }
        },
        "required": [
            "probe_image",
            "reference_image"
        ]
    }


class VerifyImagesRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, probe_image: str = None, reference_image: str = None,
                 matching_score_threshold: float = 0.4):  # noqa: E501
        """VerifyImagesRequest - a model defined in Swagger

        :param probe_image: The probe_image of this VerifyImagesRequest.  # noqa: E501
        :type probe_image: ByteArray
        :param reference_image: The reference_image of this VerifyImagesRequest.  # noqa: E501
        :type reference_image: ByteArray
        :param matching_score_threshold: The matching_score_threshold of this VerifyImagesRequest.  # noqa: E501
        :type matching_score_threshold: float
        """
        self.swagger_types = {
            'probe_image': str,
            'reference_image': str,
            'matching_score_threshold': float
        }

        self.attribute_map = {
            'probe_image': 'probe_image',
            'reference_image': 'reference_image',
            'matching_score_threshold': 'matching_score_threshold'
        }

        self._probe_image = probe_image
        self._reference_image = reference_image
        self._matching_score_threshold = matching_score_threshold

    @classmethod
    def from_dict(cls, dikt) -> 'VerifyImagesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The verify_images_request of this VerifyImagesRequest.  # noqa: E501
        :rtype: VerifyImagesRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def probe_image(self) -> str:
        """Gets the probe_image of this VerifyImagesRequest.

        JPG base 64 string face image to be matched against reference image.  # noqa: E501

        :return: The probe_image of this VerifyImagesRequest.
        :rtype: ByteArray
        """
        return self._probe_image

    @probe_image.setter
    def probe_image(self, probe_image: str):
        """Sets the probe_image of this VerifyImagesRequest.

        JPG base 64 string face image to be matched against reference image.  # noqa: E501

        :param probe_image: The probe_image of this VerifyImagesRequest.
        :type probe_image: ByteArray
        """
        if probe_image is None:
            raise ValueError("Invalid value for `probe_image`, must not be `None`")  # noqa: E501
        if probe_image is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', probe_image):  # noqa: E501,W1401
            raise ValueError(r"Invalid value for `probe_image`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501,W1401

        self._probe_image = probe_image

    @property
    def reference_image(self) -> str:
        """Gets the reference_image of this VerifyImagesRequest.

        JPG base 64 string reference face image.  # noqa: E501

        :return: The reference_image of this VerifyImagesRequest.
        :rtype: ByteArray
        """
        return self._reference_image

    @reference_image.setter
    def reference_image(self, reference_image: str):
        """Sets the reference_image of this VerifyImagesRequest.

        JPG base 64 string reference face image.  # noqa: E501

        :param reference_image: The reference_image of this VerifyImagesRequest.
        :type reference_image: ByteArray
        """
        if reference_image is None:
            raise ValueError("Invalid value for `reference_image`, must not be `None`")  # noqa: E501
        if reference_image is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', reference_image):  # noqa: E501
            raise ValueError(r"Invalid value for `reference_image`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._reference_image = reference_image

    @property
    def matching_score_threshold(self) -> float:
        """Gets the matching_score_threshold of this VerifyImagesRequest.

        Matching score threshold used to verify matching between probe and reference image.  # noqa: E501

        :return: The matching_score_threshold of this VerifyImagesRequest.
        :rtype: float
        """
        return self._matching_score_threshold

    @matching_score_threshold.setter
    def matching_score_threshold(self, matching_score_threshold: float):
        """Sets the matching_score_threshold of this VerifyImagesRequest.

        Matching score threshold used to verify matching between probe and reference image.  # noqa: E501

        :param matching_score_threshold: The matching_score_threshold of this VerifyImagesRequest.
        :type matching_score_threshold: float
        """

        self._matching_score_threshold = matching_score_threshold
