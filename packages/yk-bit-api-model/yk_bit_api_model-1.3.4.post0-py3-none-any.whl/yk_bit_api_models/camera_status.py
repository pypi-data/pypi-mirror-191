""" Camera Status Response Module """
from yk_utils.models import Model, deserialize_model
from .status_response import StatusResultType


CameraStatusSchema = {
    "type": "object",
    "properties": {
        "camera_id": {
            "type": "string",
            "description": "Camera ID, coherent with the ID in the configuration file."
        },
        "status": {
            "type": "string",
            "description": "Description of device status.",
            "enum": StatusResultType.to_str_list()
        }
    }
}


class CameraStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, camera_id: str=None, status: str=None):  # noqa: E501
        """CameraStatus - a model defined in Swagger

        :param camera_id: The camera_id of this CameraStatus.  # noqa: E501
        :type camera_id: str
        :param status: The status of this CameraStatus.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'camera_id': str,
            'status': str
        }

        self.attribute_map = {
            'camera_id': 'camera_id',
            'status': 'status'
        }

        self._camera_id = camera_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'CameraStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The camera_status of this CameraStatus.  # noqa: E501
        :rtype: CameraStatus
        """
        return deserialize_model(dikt, cls)

    @property
    def camera_id(self) -> str:
        """Gets the camera_id of this CameraStatus.

        Camera ID, coherent with the ID in the configuration file.  # noqa: E501

        :return: The camera_id of this CameraStatus.
        :rtype: str
        """
        return self._camera_id

    @camera_id.setter
    def camera_id(self, camera_id: str):
        """Sets the camera_id of this CameraStatus.

        Camera ID, coherent with the ID in the configuration file.  # noqa: E501

        :param camera_id: The camera_id of this CameraStatus.
        :type camera_id: str
        """

        self._camera_id = camera_id

    @property
    def status(self) -> str:
        """Gets the status of this CameraStatus.

        Description of device status.  # noqa: E501

        :return: The status of this CameraStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this CameraStatus.

        Description of device status.  # noqa: E501

        :param status: The status of this CameraStatus.
        :type status: str
        """
        allowed_values = ["CAMERA_OK", "CAMERA_UNAVAILABLE", "CAMERA_READ_FAILED", "CAMERA_RESET_NEEDED",
                          "CAMERA_OVER_HEATING", "CAMERA_SENSOR_DAMAGED", "CAMERA_TIMEOUT",
                          "CAMERA_OPERATION_IN_PROGRESS", "NONE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(f"Invalid value for `status` ({status}), must be one of {allowed_values}")

        self._status = status
